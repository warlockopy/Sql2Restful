package scopeProto;

//Generated by the protocol buffer compiler.  DO NOT EDIT!
//source: AccidentAnalysisAuxiliaryPeakAboveThresholdProto.proto

public final class AccidentAnalysisAuxiliaryPeakAboveThresholdProto {
private AccidentAnalysisAuxiliaryPeakAboveThresholdProto() {}
public static void registerAllExtensions(
   com.google.protobuf.ExtensionRegistry registry) {
}
public interface AccidentAnalysisAuxiliaryPeakAboveThresholdOrBuilder extends
   // @@protoc_insertion_point(interface_extends:AccidentAnalysisAuxiliaryPeakAboveThreshold)
   com.google.protobuf.MessageOrBuilder {

 /**
  * <code>required .EventHeader header = 1;</code>
  */
 boolean hasHeader();
 /**
  * <code>required .EventHeader header = 1;</code>
  */
 EventHeaderProto.EventHeader getHeader();
 /**
  * <code>required .EventHeader header = 1;</code>
  */
 EventHeaderProto.EventHeaderOrBuilder getHeaderOrBuilder();

 /**
  * <code>optional uint32 event_duration_millisceonds = 2;</code>
  *
  * <pre>
  * Event duration in milliseconds
  * </pre>
  */
 boolean hasEventDurationMillisceonds();
 /**
  * <code>optional uint32 event_duration_millisceonds = 2;</code>
  *
  * <pre>
  * Event duration in milliseconds
  * </pre>
  */
 int getEventDurationMillisceonds();

 /**
  * <code>optional uint32 start_speed_kmh = 3;</code>
  *
  * <pre>
  * Start speed in km/h
  * </pre>
  */
 boolean hasStartSpeedKmh();
 /**
  * <code>optional uint32 start_speed_kmh = 3;</code>
  *
  * <pre>
  * Start speed in km/h
  * </pre>
  */
 int getStartSpeedKmh();

 /**
  * <code>optional double accident_latitude = 4;</code>
  *
  * <pre>
  * Latitude
  * </pre>
  */
 boolean hasAccidentLatitude();
 /**
  * <code>optional double accident_latitude = 4;</code>
  *
  * <pre>
  * Latitude
  * </pre>
  */
 double getAccidentLatitude();

 /**
  * <code>optional double accident_longitude = 5;</code>
  *
  * <pre>
  * Longitude
  * </pre>
  */
 boolean hasAccidentLongitude();
 /**
  * <code>optional double accident_longitude = 5;</code>
  *
  * <pre>
  * Longitude
  * </pre>
  */
 double getAccidentLongitude();

 /**
  * <code>optional float max_acceleration_r = 6;</code>
  *
  * <pre>
  * Max R acceleration in g units where g = 9.8 m/s2
  * </pre>
  */
 boolean hasMaxAccelerationR();
 /**
  * <code>optional float max_acceleration_r = 6;</code>
  *
  * <pre>
  * Max R acceleration in g units where g = 9.8 m/s2
  * </pre>
  */
 float getMaxAccelerationR();

 /**
  * <code>optional float average_acceleration_r = 7;</code>
  *
  * <pre>
  * Average R acceleration
  * </pre>
  */
 boolean hasAverageAccelerationR();
 /**
  * <code>optional float average_acceleration_r = 7;</code>
  *
  * <pre>
  * Average R acceleration
  * </pre>
  */
 float getAverageAccelerationR();

 /**
  * <code>optional float average_acceleration_x = 8;</code>
  *
  * <pre>
  * Average X acceleration
  * </pre>
  */
 boolean hasAverageAccelerationX();
 /**
  * <code>optional float average_acceleration_x = 8;</code>
  *
  * <pre>
  * Average X acceleration
  * </pre>
  */
 float getAverageAccelerationX();

 /**
  * <code>optional float average_acceleration_y = 9;</code>
  *
  * <pre>
  * Average Y acceleration
  * </pre>
  */
 boolean hasAverageAccelerationY();
 /**
  * <code>optional float average_acceleration_y = 9;</code>
  *
  * <pre>
  * Average Y acceleration
  * </pre>
  */
 float getAverageAccelerationY();

 /**
  * <code>optional float average_acceleration_z = 10;</code>
  *
  * <pre>
  * Average Z acceleration
  * </pre>
  */
 boolean hasAverageAccelerationZ();
 /**
  * <code>optional float average_acceleration_z = 10;</code>
  *
  * <pre>
  * Average Z acceleration
  * </pre>
  */
 float getAverageAccelerationZ();

 /**
  * <code>optional uint32 max_rpm = 11;</code>
  *
  * <pre>
  * Max RPM in revolutions per minute
  * </pre>
  */
 boolean hasMaxRpm();
 /**
  * <code>optional uint32 max_rpm = 11;</code>
  *
  * <pre>
  * Max RPM in revolutions per minute
  * </pre>
  */
 int getMaxRpm();

 /**
  * <code>optional float max_throttle_percentage = 12;</code>
  *
  * <pre>
  * Max throttle % (0.4% accuracy)
  * </pre>
  */
 boolean hasMaxThrottlePercentage();
 /**
  * <code>optional float max_throttle_percentage = 12;</code>
  *
  * <pre>
  * Max throttle % (0.4% accuracy)
  * </pre>
  */
 float getMaxThrottlePercentage();

 /**
  * <code>optional uint32 timestamp_milliseconds = 13;</code>
  *
  * <pre>
  * Timestamp in ms
  * </pre>
  */
 boolean hasTimestampMilliseconds();
 /**
  * <code>optional uint32 timestamp_milliseconds = 13;</code>
  *
  * <pre>
  * Timestamp in ms
  * </pre>
  */
 int getTimestampMilliseconds();

 /**
  * <code>optional float start_direction_degrees = 14;</code>
  *
  * <pre>
  * Start direction in degrees
  * </pre>
  */
 boolean hasStartDirectionDegrees();
 /**
  * <code>optional float start_direction_degrees = 14;</code>
  *
  * <pre>
  * Start direction in degrees
  * </pre>
  */
 float getStartDirectionDegrees();

 /**
  * <code>optional float impact_direction_degrees = 15;</code>
  *
  * <pre>
  * Impact direction in degrees
  * </pre>
  */
 boolean hasImpactDirectionDegrees();
 /**
  * <code>optional float impact_direction_degrees = 15;</code>
  *
  * <pre>
  * Impact direction in degrees
  * </pre>
  */
 float getImpactDirectionDegrees();
}
/**
* Protobuf type {@code AccidentAnalysisAuxiliaryPeakAboveThreshold}
*
* <pre>
* Accident Analysis - Accident Auxiliary Peak Above Threshold event is the same as Accident Peak Above Threshold, 
* but occurs after the first Accident Average Above Threshold or Accident Peak Above Threshold event.
* </pre>
*/
public static final class AccidentAnalysisAuxiliaryPeakAboveThreshold extends
   com.google.protobuf.GeneratedMessage implements
   // @@protoc_insertion_point(message_implements:AccidentAnalysisAuxiliaryPeakAboveThreshold)
   AccidentAnalysisAuxiliaryPeakAboveThresholdOrBuilder {
 // Use AccidentAnalysisAuxiliaryPeakAboveThreshold.newBuilder() to construct.
 private AccidentAnalysisAuxiliaryPeakAboveThreshold(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
   super(builder);
   this.unknownFields = builder.getUnknownFields();
 }
 private AccidentAnalysisAuxiliaryPeakAboveThreshold(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

 private static final AccidentAnalysisAuxiliaryPeakAboveThreshold defaultInstance;
 public static AccidentAnalysisAuxiliaryPeakAboveThreshold getDefaultInstance() {
   return defaultInstance;
 }

 public AccidentAnalysisAuxiliaryPeakAboveThreshold getDefaultInstanceForType() {
   return defaultInstance;
 }

 private final com.google.protobuf.UnknownFieldSet unknownFields;
 @java.lang.Override
 public final com.google.protobuf.UnknownFieldSet
     getUnknownFields() {
   return this.unknownFields;
 }
 private AccidentAnalysisAuxiliaryPeakAboveThreshold(
     com.google.protobuf.CodedInputStream input,
     com.google.protobuf.ExtensionRegistryLite extensionRegistry)
     throws com.google.protobuf.InvalidProtocolBufferException {
   initFields();
   int mutable_bitField0_ = 0;
   com.google.protobuf.UnknownFieldSet.Builder unknownFields =
       com.google.protobuf.UnknownFieldSet.newBuilder();
   try {
     boolean done = false;
     while (!done) {
       int tag = input.readTag();
       switch (tag) {
         case 0:
           done = true;
           break;
         default: {
           if (!parseUnknownField(input, unknownFields,
                                  extensionRegistry, tag)) {
             done = true;
           }
           break;
         }
         case 10: {
           EventHeaderProto.EventHeader.Builder subBuilder = null;
           if (((bitField0_ & 0x00000001) == 0x00000001)) {
             subBuilder = header_.toBuilder();
           }
           header_ = input.readMessage(EventHeaderProto.EventHeader.PARSER, extensionRegistry);
           if (subBuilder != null) {
             subBuilder.mergeFrom(header_);
             header_ = subBuilder.buildPartial();
           }
           bitField0_ |= 0x00000001;
           break;
         }
         case 16: {
           bitField0_ |= 0x00000002;
           eventDurationMillisceonds_ = input.readUInt32();
           break;
         }
         case 24: {
           bitField0_ |= 0x00000004;
           startSpeedKmh_ = input.readUInt32();
           break;
         }
         case 33: {
           bitField0_ |= 0x00000008;
           accidentLatitude_ = input.readDouble();
           break;
         }
         case 41: {
           bitField0_ |= 0x00000010;
           accidentLongitude_ = input.readDouble();
           break;
         }
         case 53: {
           bitField0_ |= 0x00000020;
           maxAccelerationR_ = input.readFloat();
           break;
         }
         case 61: {
           bitField0_ |= 0x00000040;
           averageAccelerationR_ = input.readFloat();
           break;
         }
         case 69: {
           bitField0_ |= 0x00000080;
           averageAccelerationX_ = input.readFloat();
           break;
         }
         case 77: {
           bitField0_ |= 0x00000100;
           averageAccelerationY_ = input.readFloat();
           break;
         }
         case 85: {
           bitField0_ |= 0x00000200;
           averageAccelerationZ_ = input.readFloat();
           break;
         }
         case 88: {
           bitField0_ |= 0x00000400;
           maxRpm_ = input.readUInt32();
           break;
         }
         case 101: {
           bitField0_ |= 0x00000800;
           maxThrottlePercentage_ = input.readFloat();
           break;
         }
         case 104: {
           bitField0_ |= 0x00001000;
           timestampMilliseconds_ = input.readUInt32();
           break;
         }
         case 117: {
           bitField0_ |= 0x00002000;
           startDirectionDegrees_ = input.readFloat();
           break;
         }
         case 125: {
           bitField0_ |= 0x00004000;
           impactDirectionDegrees_ = input.readFloat();
           break;
         }
       }
     }
   } catch (com.google.protobuf.InvalidProtocolBufferException e) {
     throw e.setUnfinishedMessage(this);
   } catch (java.io.IOException e) {
     throw new com.google.protobuf.InvalidProtocolBufferException(
         e.getMessage()).setUnfinishedMessage(this);
   } finally {
     this.unknownFields = unknownFields.build();
     makeExtensionsImmutable();
   }
 }
 public static final com.google.protobuf.Descriptors.Descriptor
     getDescriptor() {
   return AccidentAnalysisAuxiliaryPeakAboveThresholdProto.internal_static_AccidentAnalysisAuxiliaryPeakAboveThreshold_descriptor;
 }

 protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
     internalGetFieldAccessorTable() {
   return AccidentAnalysisAuxiliaryPeakAboveThresholdProto.internal_static_AccidentAnalysisAuxiliaryPeakAboveThreshold_fieldAccessorTable
       .ensureFieldAccessorsInitialized(
           AccidentAnalysisAuxiliaryPeakAboveThresholdProto.AccidentAnalysisAuxiliaryPeakAboveThreshold.class, AccidentAnalysisAuxiliaryPeakAboveThresholdProto.AccidentAnalysisAuxiliaryPeakAboveThreshold.Builder.class);
 }

 public static com.google.protobuf.Parser<AccidentAnalysisAuxiliaryPeakAboveThreshold> PARSER =
     new com.google.protobuf.AbstractParser<AccidentAnalysisAuxiliaryPeakAboveThreshold>() {
   public AccidentAnalysisAuxiliaryPeakAboveThreshold parsePartialFrom(
       com.google.protobuf.CodedInputStream input,
       com.google.protobuf.ExtensionRegistryLite extensionRegistry)
       throws com.google.protobuf.InvalidProtocolBufferException {
     return new AccidentAnalysisAuxiliaryPeakAboveThreshold(input, extensionRegistry);
   }
 };

 @java.lang.Override
 public com.google.protobuf.Parser<AccidentAnalysisAuxiliaryPeakAboveThreshold> getParserForType() {
   return PARSER;
 }

 private int bitField0_;
 public static final int HEADER_FIELD_NUMBER = 1;
 private EventHeaderProto.EventHeader header_;
 /**
  * <code>required .EventHeader header = 1;</code>
  */
 public boolean hasHeader() {
   return ((bitField0_ & 0x00000001) == 0x00000001);
 }
 /**
  * <code>required .EventHeader header = 1;</code>
  */
 public EventHeaderProto.EventHeader getHeader() {
   return header_;
 }
 /**
  * <code>required .EventHeader header = 1;</code>
  */
 public EventHeaderProto.EventHeaderOrBuilder getHeaderOrBuilder() {
   return header_;
 }

 public static final int EVENT_DURATION_MILLISCEONDS_FIELD_NUMBER = 2;
 private int eventDurationMillisceonds_;
 /**
  * <code>optional uint32 event_duration_millisceonds = 2;</code>
  *
  * <pre>
  * Event duration in milliseconds
  * </pre>
  */
 public boolean hasEventDurationMillisceonds() {
   return ((bitField0_ & 0x00000002) == 0x00000002);
 }
 /**
  * <code>optional uint32 event_duration_millisceonds = 2;</code>
  *
  * <pre>
  * Event duration in milliseconds
  * </pre>
  */
 public int getEventDurationMillisceonds() {
   return eventDurationMillisceonds_;
 }

 public static final int START_SPEED_KMH_FIELD_NUMBER = 3;
 private int startSpeedKmh_;
 /**
  * <code>optional uint32 start_speed_kmh = 3;</code>
  *
  * <pre>
  * Start speed in km/h
  * </pre>
  */
 public boolean hasStartSpeedKmh() {
   return ((bitField0_ & 0x00000004) == 0x00000004);
 }
 /**
  * <code>optional uint32 start_speed_kmh = 3;</code>
  *
  * <pre>
  * Start speed in km/h
  * </pre>
  */
 public int getStartSpeedKmh() {
   return startSpeedKmh_;
 }

 public static final int ACCIDENT_LATITUDE_FIELD_NUMBER = 4;
 private double accidentLatitude_;
 /**
  * <code>optional double accident_latitude = 4;</code>
  *
  * <pre>
  * Latitude
  * </pre>
  */
 public boolean hasAccidentLatitude() {
   return ((bitField0_ & 0x00000008) == 0x00000008);
 }
 /**
  * <code>optional double accident_latitude = 4;</code>
  *
  * <pre>
  * Latitude
  * </pre>
  */
 public double getAccidentLatitude() {
   return accidentLatitude_;
 }

 public static final int ACCIDENT_LONGITUDE_FIELD_NUMBER = 5;
 private double accidentLongitude_;
 /**
  * <code>optional double accident_longitude = 5;</code>
  *
  * <pre>
  * Longitude
  * </pre>
  */
 public boolean hasAccidentLongitude() {
   return ((bitField0_ & 0x00000010) == 0x00000010);
 }
 /**
  * <code>optional double accident_longitude = 5;</code>
  *
  * <pre>
  * Longitude
  * </pre>
  */
 public double getAccidentLongitude() {
   return accidentLongitude_;
 }

 public static final int MAX_ACCELERATION_R_FIELD_NUMBER = 6;
 private float maxAccelerationR_;
 /**
  * <code>optional float max_acceleration_r = 6;</code>
  *
  * <pre>
  * Max R acceleration in g units where g = 9.8 m/s2
  * </pre>
  */
 public boolean hasMaxAccelerationR() {
   return ((bitField0_ & 0x00000020) == 0x00000020);
 }
 /**
  * <code>optional float max_acceleration_r = 6;</code>
  *
  * <pre>
  * Max R acceleration in g units where g = 9.8 m/s2
  * </pre>
  */
 public float getMaxAccelerationR() {
   return maxAccelerationR_;
 }

 public static final int AVERAGE_ACCELERATION_R_FIELD_NUMBER = 7;
 private float averageAccelerationR_;
 /**
  * <code>optional float average_acceleration_r = 7;</code>
  *
  * <pre>
  * Average R acceleration
  * </pre>
  */
 public boolean hasAverageAccelerationR() {
   return ((bitField0_ & 0x00000040) == 0x00000040);
 }
 /**
  * <code>optional float average_acceleration_r = 7;</code>
  *
  * <pre>
  * Average R acceleration
  * </pre>
  */
 public float getAverageAccelerationR() {
   return averageAccelerationR_;
 }

 public static final int AVERAGE_ACCELERATION_X_FIELD_NUMBER = 8;
 private float averageAccelerationX_;
 /**
  * <code>optional float average_acceleration_x = 8;</code>
  *
  * <pre>
  * Average X acceleration
  * </pre>
  */
 public boolean hasAverageAccelerationX() {
   return ((bitField0_ & 0x00000080) == 0x00000080);
 }
 /**
  * <code>optional float average_acceleration_x = 8;</code>
  *
  * <pre>
  * Average X acceleration
  * </pre>
  */
 public float getAverageAccelerationX() {
   return averageAccelerationX_;
 }

 public static final int AVERAGE_ACCELERATION_Y_FIELD_NUMBER = 9;
 private float averageAccelerationY_;
 /**
  * <code>optional float average_acceleration_y = 9;</code>
  *
  * <pre>
  * Average Y acceleration
  * </pre>
  */
 public boolean hasAverageAccelerationY() {
   return ((bitField0_ & 0x00000100) == 0x00000100);
 }
 /**
  * <code>optional float average_acceleration_y = 9;</code>
  *
  * <pre>
  * Average Y acceleration
  * </pre>
  */
 public float getAverageAccelerationY() {
   return averageAccelerationY_;
 }

 public static final int AVERAGE_ACCELERATION_Z_FIELD_NUMBER = 10;
 private float averageAccelerationZ_;
 /**
  * <code>optional float average_acceleration_z = 10;</code>
  *
  * <pre>
  * Average Z acceleration
  * </pre>
  */
 public boolean hasAverageAccelerationZ() {
   return ((bitField0_ & 0x00000200) == 0x00000200);
 }
 /**
  * <code>optional float average_acceleration_z = 10;</code>
  *
  * <pre>
  * Average Z acceleration
  * </pre>
  */
 public float getAverageAccelerationZ() {
   return averageAccelerationZ_;
 }

 public static final int MAX_RPM_FIELD_NUMBER = 11;
 private int maxRpm_;
 /**
  * <code>optional uint32 max_rpm = 11;</code>
  *
  * <pre>
  * Max RPM in revolutions per minute
  * </pre>
  */
 public boolean hasMaxRpm() {
   return ((bitField0_ & 0x00000400) == 0x00000400);
 }
 /**
  * <code>optional uint32 max_rpm = 11;</code>
  *
  * <pre>
  * Max RPM in revolutions per minute
  * </pre>
  */
 public int getMaxRpm() {
   return maxRpm_;
 }

 public static final int MAX_THROTTLE_PERCENTAGE_FIELD_NUMBER = 12;
 private float maxThrottlePercentage_;
 /**
  * <code>optional float max_throttle_percentage = 12;</code>
  *
  * <pre>
  * Max throttle % (0.4% accuracy)
  * </pre>
  */
 public boolean hasMaxThrottlePercentage() {
   return ((bitField0_ & 0x00000800) == 0x00000800);
 }
 /**
  * <code>optional float max_throttle_percentage = 12;</code>
  *
  * <pre>
  * Max throttle % (0.4% accuracy)
  * </pre>
  */
 public float getMaxThrottlePercentage() {
   return maxThrottlePercentage_;
 }

 public static final int TIMESTAMP_MILLISECONDS_FIELD_NUMBER = 13;
 private int timestampMilliseconds_;
 /**
  * <code>optional uint32 timestamp_milliseconds = 13;</code>
  *
  * <pre>
  * Timestamp in ms
  * </pre>
  */
 public boolean hasTimestampMilliseconds() {
   return ((bitField0_ & 0x00001000) == 0x00001000);
 }
 /**
  * <code>optional uint32 timestamp_milliseconds = 13;</code>
  *
  * <pre>
  * Timestamp in ms
  * </pre>
  */
 public int getTimestampMilliseconds() {
   return timestampMilliseconds_;
 }

 public static final int START_DIRECTION_DEGREES_FIELD_NUMBER = 14;
 private float startDirectionDegrees_;
 /**
  * <code>optional float start_direction_degrees = 14;</code>
  *
  * <pre>
  * Start direction in degrees
  * </pre>
  */
 public boolean hasStartDirectionDegrees() {
   return ((bitField0_ & 0x00002000) == 0x00002000);
 }
 /**
  * <code>optional float start_direction_degrees = 14;</code>
  *
  * <pre>
  * Start direction in degrees
  * </pre>
  */
 public float getStartDirectionDegrees() {
   return startDirectionDegrees_;
 }

 public static final int IMPACT_DIRECTION_DEGREES_FIELD_NUMBER = 15;
 private float impactDirectionDegrees_;
 /**
  * <code>optional float impact_direction_degrees = 15;</code>
  *
  * <pre>
  * Impact direction in degrees
  * </pre>
  */
 public boolean hasImpactDirectionDegrees() {
   return ((bitField0_ & 0x00004000) == 0x00004000);
 }
 /**
  * <code>optional float impact_direction_degrees = 15;</code>
  *
  * <pre>
  * Impact direction in degrees
  * </pre>
  */
 public float getImpactDirectionDegrees() {
   return impactDirectionDegrees_;
 }

 private void initFields() {
   header_ = EventHeaderProto.EventHeader.getDefaultInstance();
   eventDurationMillisceonds_ = 0;
   startSpeedKmh_ = 0;
   accidentLatitude_ = 0D;
   accidentLongitude_ = 0D;
   maxAccelerationR_ = 0F;
   averageAccelerationR_ = 0F;
   averageAccelerationX_ = 0F;
   averageAccelerationY_ = 0F;
   averageAccelerationZ_ = 0F;
   maxRpm_ = 0;
   maxThrottlePercentage_ = 0F;
   timestampMilliseconds_ = 0;
   startDirectionDegrees_ = 0F;
   impactDirectionDegrees_ = 0F;
 }
 private byte memoizedIsInitialized = -1;
 public final boolean isInitialized() {
   byte isInitialized = memoizedIsInitialized;
   if (isInitialized == 1) return true;
   if (isInitialized == 0) return false;

   if (!hasHeader()) {
     memoizedIsInitialized = 0;
     return false;
   }
   if (!getHeader().isInitialized()) {
     memoizedIsInitialized = 0;
     return false;
   }
   memoizedIsInitialized = 1;
   return true;
 }

 public void writeTo(com.google.protobuf.CodedOutputStream output)
                     throws java.io.IOException {
   getSerializedSize();
   if (((bitField0_ & 0x00000001) == 0x00000001)) {
     output.writeMessage(1, header_);
   }
   if (((bitField0_ & 0x00000002) == 0x00000002)) {
     output.writeUInt32(2, eventDurationMillisceonds_);
   }
   if (((bitField0_ & 0x00000004) == 0x00000004)) {
     output.writeUInt32(3, startSpeedKmh_);
   }
   if (((bitField0_ & 0x00000008) == 0x00000008)) {
     output.writeDouble(4, accidentLatitude_);
   }
   if (((bitField0_ & 0x00000010) == 0x00000010)) {
     output.writeDouble(5, accidentLongitude_);
   }
   if (((bitField0_ & 0x00000020) == 0x00000020)) {
     output.writeFloat(6, maxAccelerationR_);
   }
   if (((bitField0_ & 0x00000040) == 0x00000040)) {
     output.writeFloat(7, averageAccelerationR_);
   }
   if (((bitField0_ & 0x00000080) == 0x00000080)) {
     output.writeFloat(8, averageAccelerationX_);
   }
   if (((bitField0_ & 0x00000100) == 0x00000100)) {
     output.writeFloat(9, averageAccelerationY_);
   }
   if (((bitField0_ & 0x00000200) == 0x00000200)) {
     output.writeFloat(10, averageAccelerationZ_);
   }
   if (((bitField0_ & 0x00000400) == 0x00000400)) {
     output.writeUInt32(11, maxRpm_);
   }
   if (((bitField0_ & 0x00000800) == 0x00000800)) {
     output.writeFloat(12, maxThrottlePercentage_);
   }
   if (((bitField0_ & 0x00001000) == 0x00001000)) {
     output.writeUInt32(13, timestampMilliseconds_);
   }
   if (((bitField0_ & 0x00002000) == 0x00002000)) {
     output.writeFloat(14, startDirectionDegrees_);
   }
   if (((bitField0_ & 0x00004000) == 0x00004000)) {
     output.writeFloat(15, impactDirectionDegrees_);
   }
   getUnknownFields().writeTo(output);
 }

 private int memoizedSerializedSize = -1;
 public int getSerializedSize() {
   int size = memoizedSerializedSize;
   if (size != -1) return size;

   size = 0;
   if (((bitField0_ & 0x00000001) == 0x00000001)) {
     size += com.google.protobuf.CodedOutputStream
       .computeMessageSize(1, header_);
   }
   if (((bitField0_ & 0x00000002) == 0x00000002)) {
     size += com.google.protobuf.CodedOutputStream
       .computeUInt32Size(2, eventDurationMillisceonds_);
   }
   if (((bitField0_ & 0x00000004) == 0x00000004)) {
     size += com.google.protobuf.CodedOutputStream
       .computeUInt32Size(3, startSpeedKmh_);
   }
   if (((bitField0_ & 0x00000008) == 0x00000008)) {
     size += com.google.protobuf.CodedOutputStream
       .computeDoubleSize(4, accidentLatitude_);
   }
   if (((bitField0_ & 0x00000010) == 0x00000010)) {
     size += com.google.protobuf.CodedOutputStream
       .computeDoubleSize(5, accidentLongitude_);
   }
   if (((bitField0_ & 0x00000020) == 0x00000020)) {
     size += com.google.protobuf.CodedOutputStream
       .computeFloatSize(6, maxAccelerationR_);
   }
   if (((bitField0_ & 0x00000040) == 0x00000040)) {
     size += com.google.protobuf.CodedOutputStream
       .computeFloatSize(7, averageAccelerationR_);
   }
   if (((bitField0_ & 0x00000080) == 0x00000080)) {
     size += com.google.protobuf.CodedOutputStream
       .computeFloatSize(8, averageAccelerationX_);
   }
   if (((bitField0_ & 0x00000100) == 0x00000100)) {
     size += com.google.protobuf.CodedOutputStream
       .computeFloatSize(9, averageAccelerationY_);
   }
   if (((bitField0_ & 0x00000200) == 0x00000200)) {
     size += com.google.protobuf.CodedOutputStream
       .computeFloatSize(10, averageAccelerationZ_);
   }
   if (((bitField0_ & 0x00000400) == 0x00000400)) {
     size += com.google.protobuf.CodedOutputStream
       .computeUInt32Size(11, maxRpm_);
   }
   if (((bitField0_ & 0x00000800) == 0x00000800)) {
     size += com.google.protobuf.CodedOutputStream
       .computeFloatSize(12, maxThrottlePercentage_);
   }
   if (((bitField0_ & 0x00001000) == 0x00001000)) {
     size += com.google.protobuf.CodedOutputStream
       .computeUInt32Size(13, timestampMilliseconds_);
   }
   if (((bitField0_ & 0x00002000) == 0x00002000)) {
     size += com.google.protobuf.CodedOutputStream
       .computeFloatSize(14, startDirectionDegrees_);
   }
   if (((bitField0_ & 0x00004000) == 0x00004000)) {
     size += com.google.protobuf.CodedOutputStream
       .computeFloatSize(15, impactDirectionDegrees_);
   }
   size += getUnknownFields().getSerializedSize();
   memoizedSerializedSize = size;
   return size;
 }

 private static final long serialVersionUID = 0L;
 @java.lang.Override
 protected java.lang.Object writeReplace()
     throws java.io.ObjectStreamException {
   return super.writeReplace();
 }

 public static AccidentAnalysisAuxiliaryPeakAboveThresholdProto.AccidentAnalysisAuxiliaryPeakAboveThreshold parseFrom(
     com.google.protobuf.ByteString data)
     throws com.google.protobuf.InvalidProtocolBufferException {
   return PARSER.parseFrom(data);
 }
 public static AccidentAnalysisAuxiliaryPeakAboveThresholdProto.AccidentAnalysisAuxiliaryPeakAboveThreshold parseFrom(
     com.google.protobuf.ByteString data,
     com.google.protobuf.ExtensionRegistryLite extensionRegistry)
     throws com.google.protobuf.InvalidProtocolBufferException {
   return PARSER.parseFrom(data, extensionRegistry);
 }
 public static AccidentAnalysisAuxiliaryPeakAboveThresholdProto.AccidentAnalysisAuxiliaryPeakAboveThreshold parseFrom(byte[] data)
     throws com.google.protobuf.InvalidProtocolBufferException {
   return PARSER.parseFrom(data);
 }
 public static AccidentAnalysisAuxiliaryPeakAboveThresholdProto.AccidentAnalysisAuxiliaryPeakAboveThreshold parseFrom(
     byte[] data,
     com.google.protobuf.ExtensionRegistryLite extensionRegistry)
     throws com.google.protobuf.InvalidProtocolBufferException {
   return PARSER.parseFrom(data, extensionRegistry);
 }
 public static AccidentAnalysisAuxiliaryPeakAboveThresholdProto.AccidentAnalysisAuxiliaryPeakAboveThreshold parseFrom(java.io.InputStream input)
     throws java.io.IOException {
   return PARSER.parseFrom(input);
 }
 public static AccidentAnalysisAuxiliaryPeakAboveThresholdProto.AccidentAnalysisAuxiliaryPeakAboveThreshold parseFrom(
     java.io.InputStream input,
     com.google.protobuf.ExtensionRegistryLite extensionRegistry)
     throws java.io.IOException {
   return PARSER.parseFrom(input, extensionRegistry);
 }
 public static AccidentAnalysisAuxiliaryPeakAboveThresholdProto.AccidentAnalysisAuxiliaryPeakAboveThreshold parseDelimitedFrom(java.io.InputStream input)
     throws java.io.IOException {
   return PARSER.parseDelimitedFrom(input);
 }
 public static AccidentAnalysisAuxiliaryPeakAboveThresholdProto.AccidentAnalysisAuxiliaryPeakAboveThreshold parseDelimitedFrom(
     java.io.InputStream input,
     com.google.protobuf.ExtensionRegistryLite extensionRegistry)
     throws java.io.IOException {
   return PARSER.parseDelimitedFrom(input, extensionRegistry);
 }
 public static AccidentAnalysisAuxiliaryPeakAboveThresholdProto.AccidentAnalysisAuxiliaryPeakAboveThreshold parseFrom(
     com.google.protobuf.CodedInputStream input)
     throws java.io.IOException {
   return PARSER.parseFrom(input);
 }
 public static AccidentAnalysisAuxiliaryPeakAboveThresholdProto.AccidentAnalysisAuxiliaryPeakAboveThreshold parseFrom(
     com.google.protobuf.CodedInputStream input,
     com.google.protobuf.ExtensionRegistryLite extensionRegistry)
     throws java.io.IOException {
   return PARSER.parseFrom(input, extensionRegistry);
 }

 public static Builder newBuilder() { return Builder.create(); }
 public Builder newBuilderForType() { return newBuilder(); }
 public static Builder newBuilder(AccidentAnalysisAuxiliaryPeakAboveThresholdProto.AccidentAnalysisAuxiliaryPeakAboveThreshold prototype) {
   return newBuilder().mergeFrom(prototype);
 }
 public Builder toBuilder() { return newBuilder(this); }

 @java.lang.Override
 protected Builder newBuilderForType(
     com.google.protobuf.GeneratedMessage.BuilderParent parent) {
   Builder builder = new Builder(parent);
   return builder;
 }
 /**
  * Protobuf type {@code AccidentAnalysisAuxiliaryPeakAboveThreshold}
  *
  * <pre>
  * Accident Analysis - Accident Auxiliary Peak Above Threshold event is the same as Accident Peak Above Threshold, 
  * but occurs after the first Accident Average Above Threshold or Accident Peak Above Threshold event.
  * </pre>
  */
 public static final class Builder extends
     com.google.protobuf.GeneratedMessage.Builder<Builder> implements
     // @@protoc_insertion_point(builder_implements:AccidentAnalysisAuxiliaryPeakAboveThreshold)
     AccidentAnalysisAuxiliaryPeakAboveThresholdProto.AccidentAnalysisAuxiliaryPeakAboveThresholdOrBuilder {
   public static final com.google.protobuf.Descriptors.Descriptor
       getDescriptor() {
     return AccidentAnalysisAuxiliaryPeakAboveThresholdProto.internal_static_AccidentAnalysisAuxiliaryPeakAboveThreshold_descriptor;
   }

   protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
       internalGetFieldAccessorTable() {
     return AccidentAnalysisAuxiliaryPeakAboveThresholdProto.internal_static_AccidentAnalysisAuxiliaryPeakAboveThreshold_fieldAccessorTable
         .ensureFieldAccessorsInitialized(
             AccidentAnalysisAuxiliaryPeakAboveThresholdProto.AccidentAnalysisAuxiliaryPeakAboveThreshold.class, AccidentAnalysisAuxiliaryPeakAboveThresholdProto.AccidentAnalysisAuxiliaryPeakAboveThreshold.Builder.class);
   }

   // Construct using AccidentAnalysisAuxiliaryPeakAboveThresholdProto.AccidentAnalysisAuxiliaryPeakAboveThreshold.newBuilder()
   private Builder() {
     maybeForceBuilderInitialization();
   }

   private Builder(
       com.google.protobuf.GeneratedMessage.BuilderParent parent) {
     super(parent);
     maybeForceBuilderInitialization();
   }
   private void maybeForceBuilderInitialization() {
     if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
       getHeaderFieldBuilder();
     }
   }
   private static Builder create() {
     return new Builder();
   }

   public Builder clear() {
     super.clear();
     if (headerBuilder_ == null) {
       header_ = EventHeaderProto.EventHeader.getDefaultInstance();
     } else {
       headerBuilder_.clear();
     }
     bitField0_ = (bitField0_ & ~0x00000001);
     eventDurationMillisceonds_ = 0;
     bitField0_ = (bitField0_ & ~0x00000002);
     startSpeedKmh_ = 0;
     bitField0_ = (bitField0_ & ~0x00000004);
     accidentLatitude_ = 0D;
     bitField0_ = (bitField0_ & ~0x00000008);
     accidentLongitude_ = 0D;
     bitField0_ = (bitField0_ & ~0x00000010);
     maxAccelerationR_ = 0F;
     bitField0_ = (bitField0_ & ~0x00000020);
     averageAccelerationR_ = 0F;
     bitField0_ = (bitField0_ & ~0x00000040);
     averageAccelerationX_ = 0F;
     bitField0_ = (bitField0_ & ~0x00000080);
     averageAccelerationY_ = 0F;
     bitField0_ = (bitField0_ & ~0x00000100);
     averageAccelerationZ_ = 0F;
     bitField0_ = (bitField0_ & ~0x00000200);
     maxRpm_ = 0;
     bitField0_ = (bitField0_ & ~0x00000400);
     maxThrottlePercentage_ = 0F;
     bitField0_ = (bitField0_ & ~0x00000800);
     timestampMilliseconds_ = 0;
     bitField0_ = (bitField0_ & ~0x00001000);
     startDirectionDegrees_ = 0F;
     bitField0_ = (bitField0_ & ~0x00002000);
     impactDirectionDegrees_ = 0F;
     bitField0_ = (bitField0_ & ~0x00004000);
     return this;
   }

   public Builder clone() {
     return create().mergeFrom(buildPartial());
   }

   public com.google.protobuf.Descriptors.Descriptor
       getDescriptorForType() {
     return AccidentAnalysisAuxiliaryPeakAboveThresholdProto.internal_static_AccidentAnalysisAuxiliaryPeakAboveThreshold_descriptor;
   }

   public AccidentAnalysisAuxiliaryPeakAboveThresholdProto.AccidentAnalysisAuxiliaryPeakAboveThreshold getDefaultInstanceForType() {
     return AccidentAnalysisAuxiliaryPeakAboveThresholdProto.AccidentAnalysisAuxiliaryPeakAboveThreshold.getDefaultInstance();
   }

   public AccidentAnalysisAuxiliaryPeakAboveThresholdProto.AccidentAnalysisAuxiliaryPeakAboveThreshold build() {
     AccidentAnalysisAuxiliaryPeakAboveThresholdProto.AccidentAnalysisAuxiliaryPeakAboveThreshold result = buildPartial();
     if (!result.isInitialized()) {
       throw newUninitializedMessageException(result);
     }
     return result;
   }

   public AccidentAnalysisAuxiliaryPeakAboveThresholdProto.AccidentAnalysisAuxiliaryPeakAboveThreshold buildPartial() {
     AccidentAnalysisAuxiliaryPeakAboveThresholdProto.AccidentAnalysisAuxiliaryPeakAboveThreshold result = new AccidentAnalysisAuxiliaryPeakAboveThresholdProto.AccidentAnalysisAuxiliaryPeakAboveThreshold(this);
     int from_bitField0_ = bitField0_;
     int to_bitField0_ = 0;
     if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
       to_bitField0_ |= 0x00000001;
     }
     if (headerBuilder_ == null) {
       result.header_ = header_;
     } else {
       result.header_ = headerBuilder_.build();
     }
     if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
       to_bitField0_ |= 0x00000002;
     }
     result.eventDurationMillisceonds_ = eventDurationMillisceonds_;
     if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
       to_bitField0_ |= 0x00000004;
     }
     result.startSpeedKmh_ = startSpeedKmh_;
     if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
       to_bitField0_ |= 0x00000008;
     }
     result.accidentLatitude_ = accidentLatitude_;
     if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
       to_bitField0_ |= 0x00000010;
     }
     result.accidentLongitude_ = accidentLongitude_;
     if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
       to_bitField0_ |= 0x00000020;
     }
     result.maxAccelerationR_ = maxAccelerationR_;
     if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
       to_bitField0_ |= 0x00000040;
     }
     result.averageAccelerationR_ = averageAccelerationR_;
     if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
       to_bitField0_ |= 0x00000080;
     }
     result.averageAccelerationX_ = averageAccelerationX_;
     if (((from_bitField0_ & 0x00000100) == 0x00000100)) {
       to_bitField0_ |= 0x00000100;
     }
     result.averageAccelerationY_ = averageAccelerationY_;
     if (((from_bitField0_ & 0x00000200) == 0x00000200)) {
       to_bitField0_ |= 0x00000200;
     }
     result.averageAccelerationZ_ = averageAccelerationZ_;
     if (((from_bitField0_ & 0x00000400) == 0x00000400)) {
       to_bitField0_ |= 0x00000400;
     }
     result.maxRpm_ = maxRpm_;
     if (((from_bitField0_ & 0x00000800) == 0x00000800)) {
       to_bitField0_ |= 0x00000800;
     }
     result.maxThrottlePercentage_ = maxThrottlePercentage_;
     if (((from_bitField0_ & 0x00001000) == 0x00001000)) {
       to_bitField0_ |= 0x00001000;
     }
     result.timestampMilliseconds_ = timestampMilliseconds_;
     if (((from_bitField0_ & 0x00002000) == 0x00002000)) {
       to_bitField0_ |= 0x00002000;
     }
     result.startDirectionDegrees_ = startDirectionDegrees_;
     if (((from_bitField0_ & 0x00004000) == 0x00004000)) {
       to_bitField0_ |= 0x00004000;
     }
     result.impactDirectionDegrees_ = impactDirectionDegrees_;
     result.bitField0_ = to_bitField0_;
     onBuilt();
     return result;
   }

   public Builder mergeFrom(com.google.protobuf.Message other) {
     if (other instanceof AccidentAnalysisAuxiliaryPeakAboveThresholdProto.AccidentAnalysisAuxiliaryPeakAboveThreshold) {
       return mergeFrom((AccidentAnalysisAuxiliaryPeakAboveThresholdProto.AccidentAnalysisAuxiliaryPeakAboveThreshold)other);
     } else {
       super.mergeFrom(other);
       return this;
     }
   }

   public Builder mergeFrom(AccidentAnalysisAuxiliaryPeakAboveThresholdProto.AccidentAnalysisAuxiliaryPeakAboveThreshold other) {
     if (other == AccidentAnalysisAuxiliaryPeakAboveThresholdProto.AccidentAnalysisAuxiliaryPeakAboveThreshold.getDefaultInstance()) return this;
     if (other.hasHeader()) {
       mergeHeader(other.getHeader());
     }
     if (other.hasEventDurationMillisceonds()) {
       setEventDurationMillisceonds(other.getEventDurationMillisceonds());
     }
     if (other.hasStartSpeedKmh()) {
       setStartSpeedKmh(other.getStartSpeedKmh());
     }
     if (other.hasAccidentLatitude()) {
       setAccidentLatitude(other.getAccidentLatitude());
     }
     if (other.hasAccidentLongitude()) {
       setAccidentLongitude(other.getAccidentLongitude());
     }
     if (other.hasMaxAccelerationR()) {
       setMaxAccelerationR(other.getMaxAccelerationR());
     }
     if (other.hasAverageAccelerationR()) {
       setAverageAccelerationR(other.getAverageAccelerationR());
     }
     if (other.hasAverageAccelerationX()) {
       setAverageAccelerationX(other.getAverageAccelerationX());
     }
     if (other.hasAverageAccelerationY()) {
       setAverageAccelerationY(other.getAverageAccelerationY());
     }
     if (other.hasAverageAccelerationZ()) {
       setAverageAccelerationZ(other.getAverageAccelerationZ());
     }
     if (other.hasMaxRpm()) {
       setMaxRpm(other.getMaxRpm());
     }
     if (other.hasMaxThrottlePercentage()) {
       setMaxThrottlePercentage(other.getMaxThrottlePercentage());
     }
     if (other.hasTimestampMilliseconds()) {
       setTimestampMilliseconds(other.getTimestampMilliseconds());
     }
     if (other.hasStartDirectionDegrees()) {
       setStartDirectionDegrees(other.getStartDirectionDegrees());
     }
     if (other.hasImpactDirectionDegrees()) {
       setImpactDirectionDegrees(other.getImpactDirectionDegrees());
     }
     this.mergeUnknownFields(other.getUnknownFields());
     return this;
   }

   public final boolean isInitialized() {
     if (!hasHeader()) {
       
       return false;
     }
     if (!getHeader().isInitialized()) {
       
       return false;
     }
     return true;
   }

   public Builder mergeFrom(
       com.google.protobuf.CodedInputStream input,
       com.google.protobuf.ExtensionRegistryLite extensionRegistry)
       throws java.io.IOException {
     AccidentAnalysisAuxiliaryPeakAboveThresholdProto.AccidentAnalysisAuxiliaryPeakAboveThreshold parsedMessage = null;
     try {
       parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
     } catch (com.google.protobuf.InvalidProtocolBufferException e) {
       parsedMessage = (AccidentAnalysisAuxiliaryPeakAboveThresholdProto.AccidentAnalysisAuxiliaryPeakAboveThreshold) e.getUnfinishedMessage();
       throw e;
     } finally {
       if (parsedMessage != null) {
         mergeFrom(parsedMessage);
       }
     }
     return this;
   }
   private int bitField0_;

   private EventHeaderProto.EventHeader header_ = EventHeaderProto.EventHeader.getDefaultInstance();
   private com.google.protobuf.SingleFieldBuilder<
       EventHeaderProto.EventHeader, EventHeaderProto.EventHeader.Builder, EventHeaderProto.EventHeaderOrBuilder> headerBuilder_;
   /**
    * <code>required .EventHeader header = 1;</code>
    */
   public boolean hasHeader() {
     return ((bitField0_ & 0x00000001) == 0x00000001);
   }
   /**
    * <code>required .EventHeader header = 1;</code>
    */
   public EventHeaderProto.EventHeader getHeader() {
     if (headerBuilder_ == null) {
       return header_;
     } else {
       return headerBuilder_.getMessage();
     }
   }
   /**
    * <code>required .EventHeader header = 1;</code>
    */
   public Builder setHeader(EventHeaderProto.EventHeader value) {
     if (headerBuilder_ == null) {
       if (value == null) {
         throw new NullPointerException();
       }
       header_ = value;
       onChanged();
     } else {
       headerBuilder_.setMessage(value);
     }
     bitField0_ |= 0x00000001;
     return this;
   }
   /**
    * <code>required .EventHeader header = 1;</code>
    */
   public Builder setHeader(
       EventHeaderProto.EventHeader.Builder builderForValue) {
     if (headerBuilder_ == null) {
       header_ = builderForValue.build();
       onChanged();
     } else {
       headerBuilder_.setMessage(builderForValue.build());
     }
     bitField0_ |= 0x00000001;
     return this;
   }
   /**
    * <code>required .EventHeader header = 1;</code>
    */
   public Builder mergeHeader(EventHeaderProto.EventHeader value) {
     if (headerBuilder_ == null) {
       if (((bitField0_ & 0x00000001) == 0x00000001) &&
           header_ != EventHeaderProto.EventHeader.getDefaultInstance()) {
         header_ =
           EventHeaderProto.EventHeader.newBuilder(header_).mergeFrom(value).buildPartial();
       } else {
         header_ = value;
       }
       onChanged();
     } else {
       headerBuilder_.mergeFrom(value);
     }
     bitField0_ |= 0x00000001;
     return this;
   }
   /**
    * <code>required .EventHeader header = 1;</code>
    */
   public Builder clearHeader() {
     if (headerBuilder_ == null) {
       header_ = EventHeaderProto.EventHeader.getDefaultInstance();
       onChanged();
     } else {
       headerBuilder_.clear();
     }
     bitField0_ = (bitField0_ & ~0x00000001);
     return this;
   }
   /**
    * <code>required .EventHeader header = 1;</code>
    */
   public EventHeaderProto.EventHeader.Builder getHeaderBuilder() {
     bitField0_ |= 0x00000001;
     onChanged();
     return getHeaderFieldBuilder().getBuilder();
   }
   /**
    * <code>required .EventHeader header = 1;</code>
    */
   public EventHeaderProto.EventHeaderOrBuilder getHeaderOrBuilder() {
     if (headerBuilder_ != null) {
       return headerBuilder_.getMessageOrBuilder();
     } else {
       return header_;
     }
   }
   /**
    * <code>required .EventHeader header = 1;</code>
    */
   private com.google.protobuf.SingleFieldBuilder<
       EventHeaderProto.EventHeader, EventHeaderProto.EventHeader.Builder, EventHeaderProto.EventHeaderOrBuilder> 
       getHeaderFieldBuilder() {
     if (headerBuilder_ == null) {
       headerBuilder_ = new com.google.protobuf.SingleFieldBuilder<
           EventHeaderProto.EventHeader, EventHeaderProto.EventHeader.Builder, EventHeaderProto.EventHeaderOrBuilder>(
               getHeader(),
               getParentForChildren(),
               isClean());
       header_ = null;
     }
     return headerBuilder_;
   }

   private int eventDurationMillisceonds_ ;
   /**
    * <code>optional uint32 event_duration_millisceonds = 2;</code>
    *
    * <pre>
    * Event duration in milliseconds
    * </pre>
    */
   public boolean hasEventDurationMillisceonds() {
     return ((bitField0_ & 0x00000002) == 0x00000002);
   }
   /**
    * <code>optional uint32 event_duration_millisceonds = 2;</code>
    *
    * <pre>
    * Event duration in milliseconds
    * </pre>
    */
   public int getEventDurationMillisceonds() {
     return eventDurationMillisceonds_;
   }
   /**
    * <code>optional uint32 event_duration_millisceonds = 2;</code>
    *
    * <pre>
    * Event duration in milliseconds
    * </pre>
    */
   public Builder setEventDurationMillisceonds(int value) {
     bitField0_ |= 0x00000002;
     eventDurationMillisceonds_ = value;
     onChanged();
     return this;
   }
   /**
    * <code>optional uint32 event_duration_millisceonds = 2;</code>
    *
    * <pre>
    * Event duration in milliseconds
    * </pre>
    */
   public Builder clearEventDurationMillisceonds() {
     bitField0_ = (bitField0_ & ~0x00000002);
     eventDurationMillisceonds_ = 0;
     onChanged();
     return this;
   }

   private int startSpeedKmh_ ;
   /**
    * <code>optional uint32 start_speed_kmh = 3;</code>
    *
    * <pre>
    * Start speed in km/h
    * </pre>
    */
   public boolean hasStartSpeedKmh() {
     return ((bitField0_ & 0x00000004) == 0x00000004);
   }
   /**
    * <code>optional uint32 start_speed_kmh = 3;</code>
    *
    * <pre>
    * Start speed in km/h
    * </pre>
    */
   public int getStartSpeedKmh() {
     return startSpeedKmh_;
   }
   /**
    * <code>optional uint32 start_speed_kmh = 3;</code>
    *
    * <pre>
    * Start speed in km/h
    * </pre>
    */
   public Builder setStartSpeedKmh(int value) {
     bitField0_ |= 0x00000004;
     startSpeedKmh_ = value;
     onChanged();
     return this;
   }
   /**
    * <code>optional uint32 start_speed_kmh = 3;</code>
    *
    * <pre>
    * Start speed in km/h
    * </pre>
    */
   public Builder clearStartSpeedKmh() {
     bitField0_ = (bitField0_ & ~0x00000004);
     startSpeedKmh_ = 0;
     onChanged();
     return this;
   }

   private double accidentLatitude_ ;
   /**
    * <code>optional double accident_latitude = 4;</code>
    *
    * <pre>
    * Latitude
    * </pre>
    */
   public boolean hasAccidentLatitude() {
     return ((bitField0_ & 0x00000008) == 0x00000008);
   }
   /**
    * <code>optional double accident_latitude = 4;</code>
    *
    * <pre>
    * Latitude
    * </pre>
    */
   public double getAccidentLatitude() {
     return accidentLatitude_;
   }
   /**
    * <code>optional double accident_latitude = 4;</code>
    *
    * <pre>
    * Latitude
    * </pre>
    */
   public Builder setAccidentLatitude(double value) {
     bitField0_ |= 0x00000008;
     accidentLatitude_ = value;
     onChanged();
     return this;
   }
   /**
    * <code>optional double accident_latitude = 4;</code>
    *
    * <pre>
    * Latitude
    * </pre>
    */
   public Builder clearAccidentLatitude() {
     bitField0_ = (bitField0_ & ~0x00000008);
     accidentLatitude_ = 0D;
     onChanged();
     return this;
   }

   private double accidentLongitude_ ;
   /**
    * <code>optional double accident_longitude = 5;</code>
    *
    * <pre>
    * Longitude
    * </pre>
    */
   public boolean hasAccidentLongitude() {
     return ((bitField0_ & 0x00000010) == 0x00000010);
   }
   /**
    * <code>optional double accident_longitude = 5;</code>
    *
    * <pre>
    * Longitude
    * </pre>
    */
   public double getAccidentLongitude() {
     return accidentLongitude_;
   }
   /**
    * <code>optional double accident_longitude = 5;</code>
    *
    * <pre>
    * Longitude
    * </pre>
    */
   public Builder setAccidentLongitude(double value) {
     bitField0_ |= 0x00000010;
     accidentLongitude_ = value;
     onChanged();
     return this;
   }
   /**
    * <code>optional double accident_longitude = 5;</code>
    *
    * <pre>
    * Longitude
    * </pre>
    */
   public Builder clearAccidentLongitude() {
     bitField0_ = (bitField0_ & ~0x00000010);
     accidentLongitude_ = 0D;
     onChanged();
     return this;
   }

   private float maxAccelerationR_ ;
   /**
    * <code>optional float max_acceleration_r = 6;</code>
    *
    * <pre>
    * Max R acceleration in g units where g = 9.8 m/s2
    * </pre>
    */
   public boolean hasMaxAccelerationR() {
     return ((bitField0_ & 0x00000020) == 0x00000020);
   }
   /**
    * <code>optional float max_acceleration_r = 6;</code>
    *
    * <pre>
    * Max R acceleration in g units where g = 9.8 m/s2
    * </pre>
    */
   public float getMaxAccelerationR() {
     return maxAccelerationR_;
   }
   /**
    * <code>optional float max_acceleration_r = 6;</code>
    *
    * <pre>
    * Max R acceleration in g units where g = 9.8 m/s2
    * </pre>
    */
   public Builder setMaxAccelerationR(float value) {
     bitField0_ |= 0x00000020;
     maxAccelerationR_ = value;
     onChanged();
     return this;
   }
   /**
    * <code>optional float max_acceleration_r = 6;</code>
    *
    * <pre>
    * Max R acceleration in g units where g = 9.8 m/s2
    * </pre>
    */
   public Builder clearMaxAccelerationR() {
     bitField0_ = (bitField0_ & ~0x00000020);
     maxAccelerationR_ = 0F;
     onChanged();
     return this;
   }

   private float averageAccelerationR_ ;
   /**
    * <code>optional float average_acceleration_r = 7;</code>
    *
    * <pre>
    * Average R acceleration
    * </pre>
    */
   public boolean hasAverageAccelerationR() {
     return ((bitField0_ & 0x00000040) == 0x00000040);
   }
   /**
    * <code>optional float average_acceleration_r = 7;</code>
    *
    * <pre>
    * Average R acceleration
    * </pre>
    */
   public float getAverageAccelerationR() {
     return averageAccelerationR_;
   }
   /**
    * <code>optional float average_acceleration_r = 7;</code>
    *
    * <pre>
    * Average R acceleration
    * </pre>
    */
   public Builder setAverageAccelerationR(float value) {
     bitField0_ |= 0x00000040;
     averageAccelerationR_ = value;
     onChanged();
     return this;
   }
   /**
    * <code>optional float average_acceleration_r = 7;</code>
    *
    * <pre>
    * Average R acceleration
    * </pre>
    */
   public Builder clearAverageAccelerationR() {
     bitField0_ = (bitField0_ & ~0x00000040);
     averageAccelerationR_ = 0F;
     onChanged();
     return this;
   }

   private float averageAccelerationX_ ;
   /**
    * <code>optional float average_acceleration_x = 8;</code>
    *
    * <pre>
    * Average X acceleration
    * </pre>
    */
   public boolean hasAverageAccelerationX() {
     return ((bitField0_ & 0x00000080) == 0x00000080);
   }
   /**
    * <code>optional float average_acceleration_x = 8;</code>
    *
    * <pre>
    * Average X acceleration
    * </pre>
    */
   public float getAverageAccelerationX() {
     return averageAccelerationX_;
   }
   /**
    * <code>optional float average_acceleration_x = 8;</code>
    *
    * <pre>
    * Average X acceleration
    * </pre>
    */
   public Builder setAverageAccelerationX(float value) {
     bitField0_ |= 0x00000080;
     averageAccelerationX_ = value;
     onChanged();
     return this;
   }
   /**
    * <code>optional float average_acceleration_x = 8;</code>
    *
    * <pre>
    * Average X acceleration
    * </pre>
    */
   public Builder clearAverageAccelerationX() {
     bitField0_ = (bitField0_ & ~0x00000080);
     averageAccelerationX_ = 0F;
     onChanged();
     return this;
   }

   private float averageAccelerationY_ ;
   /**
    * <code>optional float average_acceleration_y = 9;</code>
    *
    * <pre>
    * Average Y acceleration
    * </pre>
    */
   public boolean hasAverageAccelerationY() {
     return ((bitField0_ & 0x00000100) == 0x00000100);
   }
   /**
    * <code>optional float average_acceleration_y = 9;</code>
    *
    * <pre>
    * Average Y acceleration
    * </pre>
    */
   public float getAverageAccelerationY() {
     return averageAccelerationY_;
   }
   /**
    * <code>optional float average_acceleration_y = 9;</code>
    *
    * <pre>
    * Average Y acceleration
    * </pre>
    */
   public Builder setAverageAccelerationY(float value) {
     bitField0_ |= 0x00000100;
     averageAccelerationY_ = value;
     onChanged();
     return this;
   }
   /**
    * <code>optional float average_acceleration_y = 9;</code>
    *
    * <pre>
    * Average Y acceleration
    * </pre>
    */
   public Builder clearAverageAccelerationY() {
     bitField0_ = (bitField0_ & ~0x00000100);
     averageAccelerationY_ = 0F;
     onChanged();
     return this;
   }

   private float averageAccelerationZ_ ;
   /**
    * <code>optional float average_acceleration_z = 10;</code>
    *
    * <pre>
    * Average Z acceleration
    * </pre>
    */
   public boolean hasAverageAccelerationZ() {
     return ((bitField0_ & 0x00000200) == 0x00000200);
   }
   /**
    * <code>optional float average_acceleration_z = 10;</code>
    *
    * <pre>
    * Average Z acceleration
    * </pre>
    */
   public float getAverageAccelerationZ() {
     return averageAccelerationZ_;
   }
   /**
    * <code>optional float average_acceleration_z = 10;</code>
    *
    * <pre>
    * Average Z acceleration
    * </pre>
    */
   public Builder setAverageAccelerationZ(float value) {
     bitField0_ |= 0x00000200;
     averageAccelerationZ_ = value;
     onChanged();
     return this;
   }
   /**
    * <code>optional float average_acceleration_z = 10;</code>
    *
    * <pre>
    * Average Z acceleration
    * </pre>
    */
   public Builder clearAverageAccelerationZ() {
     bitField0_ = (bitField0_ & ~0x00000200);
     averageAccelerationZ_ = 0F;
     onChanged();
     return this;
   }

   private int maxRpm_ ;
   /**
    * <code>optional uint32 max_rpm = 11;</code>
    *
    * <pre>
    * Max RPM in revolutions per minute
    * </pre>
    */
   public boolean hasMaxRpm() {
     return ((bitField0_ & 0x00000400) == 0x00000400);
   }
   /**
    * <code>optional uint32 max_rpm = 11;</code>
    *
    * <pre>
    * Max RPM in revolutions per minute
    * </pre>
    */
   public int getMaxRpm() {
     return maxRpm_;
   }
   /**
    * <code>optional uint32 max_rpm = 11;</code>
    *
    * <pre>
    * Max RPM in revolutions per minute
    * </pre>
    */
   public Builder setMaxRpm(int value) {
     bitField0_ |= 0x00000400;
     maxRpm_ = value;
     onChanged();
     return this;
   }
   /**
    * <code>optional uint32 max_rpm = 11;</code>
    *
    * <pre>
    * Max RPM in revolutions per minute
    * </pre>
    */
   public Builder clearMaxRpm() {
     bitField0_ = (bitField0_ & ~0x00000400);
     maxRpm_ = 0;
     onChanged();
     return this;
   }

   private float maxThrottlePercentage_ ;
   /**
    * <code>optional float max_throttle_percentage = 12;</code>
    *
    * <pre>
    * Max throttle % (0.4% accuracy)
    * </pre>
    */
   public boolean hasMaxThrottlePercentage() {
     return ((bitField0_ & 0x00000800) == 0x00000800);
   }
   /**
    * <code>optional float max_throttle_percentage = 12;</code>
    *
    * <pre>
    * Max throttle % (0.4% accuracy)
    * </pre>
    */
   public float getMaxThrottlePercentage() {
     return maxThrottlePercentage_;
   }
   /**
    * <code>optional float max_throttle_percentage = 12;</code>
    *
    * <pre>
    * Max throttle % (0.4% accuracy)
    * </pre>
    */
   public Builder setMaxThrottlePercentage(float value) {
     bitField0_ |= 0x00000800;
     maxThrottlePercentage_ = value;
     onChanged();
     return this;
   }
   /**
    * <code>optional float max_throttle_percentage = 12;</code>
    *
    * <pre>
    * Max throttle % (0.4% accuracy)
    * </pre>
    */
   public Builder clearMaxThrottlePercentage() {
     bitField0_ = (bitField0_ & ~0x00000800);
     maxThrottlePercentage_ = 0F;
     onChanged();
     return this;
   }

   private int timestampMilliseconds_ ;
   /**
    * <code>optional uint32 timestamp_milliseconds = 13;</code>
    *
    * <pre>
    * Timestamp in ms
    * </pre>
    */
   public boolean hasTimestampMilliseconds() {
     return ((bitField0_ & 0x00001000) == 0x00001000);
   }
   /**
    * <code>optional uint32 timestamp_milliseconds = 13;</code>
    *
    * <pre>
    * Timestamp in ms
    * </pre>
    */
   public int getTimestampMilliseconds() {
     return timestampMilliseconds_;
   }
   /**
    * <code>optional uint32 timestamp_milliseconds = 13;</code>
    *
    * <pre>
    * Timestamp in ms
    * </pre>
    */
   public Builder setTimestampMilliseconds(int value) {
     bitField0_ |= 0x00001000;
     timestampMilliseconds_ = value;
     onChanged();
     return this;
   }
   /**
    * <code>optional uint32 timestamp_milliseconds = 13;</code>
    *
    * <pre>
    * Timestamp in ms
    * </pre>
    */
   public Builder clearTimestampMilliseconds() {
     bitField0_ = (bitField0_ & ~0x00001000);
     timestampMilliseconds_ = 0;
     onChanged();
     return this;
   }

   private float startDirectionDegrees_ ;
   /**
    * <code>optional float start_direction_degrees = 14;</code>
    *
    * <pre>
    * Start direction in degrees
    * </pre>
    */
   public boolean hasStartDirectionDegrees() {
     return ((bitField0_ & 0x00002000) == 0x00002000);
   }
   /**
    * <code>optional float start_direction_degrees = 14;</code>
    *
    * <pre>
    * Start direction in degrees
    * </pre>
    */
   public float getStartDirectionDegrees() {
     return startDirectionDegrees_;
   }
   /**
    * <code>optional float start_direction_degrees = 14;</code>
    *
    * <pre>
    * Start direction in degrees
    * </pre>
    */
   public Builder setStartDirectionDegrees(float value) {
     bitField0_ |= 0x00002000;
     startDirectionDegrees_ = value;
     onChanged();
     return this;
   }
   /**
    * <code>optional float start_direction_degrees = 14;</code>
    *
    * <pre>
    * Start direction in degrees
    * </pre>
    */
   public Builder clearStartDirectionDegrees() {
     bitField0_ = (bitField0_ & ~0x00002000);
     startDirectionDegrees_ = 0F;
     onChanged();
     return this;
   }

   private float impactDirectionDegrees_ ;
   /**
    * <code>optional float impact_direction_degrees = 15;</code>
    *
    * <pre>
    * Impact direction in degrees
    * </pre>
    */
   public boolean hasImpactDirectionDegrees() {
     return ((bitField0_ & 0x00004000) == 0x00004000);
   }
   /**
    * <code>optional float impact_direction_degrees = 15;</code>
    *
    * <pre>
    * Impact direction in degrees
    * </pre>
    */
   public float getImpactDirectionDegrees() {
     return impactDirectionDegrees_;
   }
   /**
    * <code>optional float impact_direction_degrees = 15;</code>
    *
    * <pre>
    * Impact direction in degrees
    * </pre>
    */
   public Builder setImpactDirectionDegrees(float value) {
     bitField0_ |= 0x00004000;
     impactDirectionDegrees_ = value;
     onChanged();
     return this;
   }
   /**
    * <code>optional float impact_direction_degrees = 15;</code>
    *
    * <pre>
    * Impact direction in degrees
    * </pre>
    */
   public Builder clearImpactDirectionDegrees() {
     bitField0_ = (bitField0_ & ~0x00004000);
     impactDirectionDegrees_ = 0F;
     onChanged();
     return this;
   }

   // @@protoc_insertion_point(builder_scope:AccidentAnalysisAuxiliaryPeakAboveThreshold)
 }

 static {
   defaultInstance = new AccidentAnalysisAuxiliaryPeakAboveThreshold(true);
   defaultInstance.initFields();
 }

 // @@protoc_insertion_point(class_scope:AccidentAnalysisAuxiliaryPeakAboveThreshold)
}

private static final com.google.protobuf.Descriptors.Descriptor
 internal_static_AccidentAnalysisAuxiliaryPeakAboveThreshold_descriptor;
private static
 com.google.protobuf.GeneratedMessage.FieldAccessorTable
   internal_static_AccidentAnalysisAuxiliaryPeakAboveThreshold_fieldAccessorTable;

public static com.google.protobuf.Descriptors.FileDescriptor
   getDescriptor() {
 return descriptor;
}
private static com.google.protobuf.Descriptors.FileDescriptor
   descriptor;
static {
 java.lang.String[] descriptorData = {
   "\n6AccidentAnalysisAuxiliaryPeakAboveThre" +
   "sholdProto.proto\032\026EventHeaderProto.proto" +
   "\"\361\003\n+AccidentAnalysisAuxiliaryPeakAboveT" +
   "hreshold\022\034\n\006header\030\001 \002(\0132\014.EventHeader\022#" +
   "\n\033event_duration_millisceonds\030\002 \001(\r\022\027\n\017s" +
   "tart_speed_kmh\030\003 \001(\r\022\031\n\021accident_latitud" +
   "e\030\004 \001(\001\022\032\n\022accident_longitude\030\005 \001(\001\022\032\n\022m" +
   "ax_acceleration_r\030\006 \001(\002\022\036\n\026average_accel" +
   "eration_r\030\007 \001(\002\022\036\n\026average_acceleration_" +
   "x\030\010 \001(\002\022\036\n\026average_acceleration_y\030\t \001(\002\022",
   "\036\n\026average_acceleration_z\030\n \001(\002\022\017\n\007max_r" +
   "pm\030\013 \001(\r\022\037\n\027max_throttle_percentage\030\014 \001(" +
   "\002\022\036\n\026timestamp_milliseconds\030\r \001(\r\022\037\n\027sta" +
   "rt_direction_degrees\030\016 \001(\002\022 \n\030impact_dir" +
   "ection_degrees\030\017 \001(\002"
 };
 com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
     new com.google.protobuf.Descriptors.FileDescriptor.    InternalDescriptorAssigner() {
       public com.google.protobuf.ExtensionRegistry assignDescriptors(
           com.google.protobuf.Descriptors.FileDescriptor root) {
         descriptor = root;
         return null;
       }
     };
 com.google.protobuf.Descriptors.FileDescriptor
   .internalBuildGeneratedFileFrom(descriptorData,
     new com.google.protobuf.Descriptors.FileDescriptor[] {
       EventHeaderProto.getDescriptor(),
     }, assigner);
 internal_static_AccidentAnalysisAuxiliaryPeakAboveThreshold_descriptor =
   getDescriptor().getMessageTypes().get(0);
 internal_static_AccidentAnalysisAuxiliaryPeakAboveThreshold_fieldAccessorTable = new
   com.google.protobuf.GeneratedMessage.FieldAccessorTable(
     internal_static_AccidentAnalysisAuxiliaryPeakAboveThreshold_descriptor,
     new java.lang.String[] { "Header", "EventDurationMillisceonds", "StartSpeedKmh", "AccidentLatitude", "AccidentLongitude", "MaxAccelerationR", "AverageAccelerationR", "AverageAccelerationX", "AverageAccelerationY", "AverageAccelerationZ", "MaxRpm", "MaxThrottlePercentage", "TimestampMilliseconds", "StartDirectionDegrees", "ImpactDirectionDegrees", });
 EventHeaderProto.getDescriptor();
}

// @@protoc_insertion_point(outer_class_scope)
}
