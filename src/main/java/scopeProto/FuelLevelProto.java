package scopeProto;

//Generated by the protocol buffer compiler.  DO NOT EDIT!
//source: FuelLevelProto.proto

public final class FuelLevelProto {
private FuelLevelProto() {}
public static void registerAllExtensions(
   com.google.protobuf.ExtensionRegistry registry) {
}
public interface FuelLevelOrBuilder extends
   // @@protoc_insertion_point(interface_extends:FuelLevel)
   com.google.protobuf.MessageOrBuilder {

 /**
  * <code>required .EventHeader header = 1;</code>
  */
 boolean hasHeader();
 /**
  * <code>required .EventHeader header = 1;</code>
  */
 EventHeaderProto.EventHeader getHeader();
 /**
  * <code>required .EventHeader header = 1;</code>
  */
 EventHeaderProto.EventHeaderOrBuilder getHeaderOrBuilder();

 /**
  * <code>optional uint32 mil_status = 2;</code>
  *
  * <pre>
  * Malfunction indicator lamp (MIL) status (0..255)
  * </pre>
  */
 boolean hasMilStatus();
 /**
  * <code>optional uint32 mil_status = 2;</code>
  *
  * <pre>
  * Malfunction indicator lamp (MIL) status (0..255)
  * </pre>
  */
 int getMilStatus();

 /**
  * <code>optional uint32 rpm = 3;</code>
  *
  * <pre>
  * Engine revolutions per minute (RPM) value (0..25500)
  * </pre>
  */
 boolean hasRpm();
 /**
  * <code>optional uint32 rpm = 3;</code>
  *
  * <pre>
  * Engine revolutions per minute (RPM) value (0..25500)
  * </pre>
  */
 int getRpm();

 /**
  * <code>optional uint32 throttle_position = 4;</code>
  *
  * <pre>
  * Percentage (0..100) of the throttle position
  * </pre>
  */
 boolean hasThrottlePosition();
 /**
  * <code>optional uint32 throttle_position = 4;</code>
  *
  * <pre>
  * Percentage (0..100) of the throttle position
  * </pre>
  */
 int getThrottlePosition();

 /**
  * <code>optional uint32 engine_load_value = 5;</code>
  *
  * <pre>
  * Percentage (0..100) of the engine load value
  * </pre>
  */
 boolean hasEngineLoadValue();
 /**
  * <code>optional uint32 engine_load_value = 5;</code>
  *
  * <pre>
  * Percentage (0..100) of the engine load value
  * </pre>
  */
 int getEngineLoadValue();

 /**
  * <code>optional uint32 engine_load_limit = 6;</code>
  *
  * <pre>
  * Value limit of the engine load (0..100)
  * </pre>
  */
 boolean hasEngineLoadLimit();
 /**
  * <code>optional uint32 engine_load_limit = 6;</code>
  *
  * <pre>
  * Value limit of the engine load (0..100)
  * </pre>
  */
 int getEngineLoadLimit();

 /**
  * <code>optional uint32 engine_load_time_limit = 7;</code>
  *
  * <pre>
  * Time limit of the engine load (0..65535)
  * </pre>
  */
 boolean hasEngineLoadTimeLimit();
 /**
  * <code>optional uint32 engine_load_time_limit = 7;</code>
  *
  * <pre>
  * Time limit of the engine load (0..65535)
  * </pre>
  */
 int getEngineLoadTimeLimit();

 /**
  * <code>optional sint32 engine_coolant_temperature = 8;</code>
  *
  * <pre>
  * Value of the engine coolant temperature in Celsius (-40..215)
  * </pre>
  */
 boolean hasEngineCoolantTemperature();
 /**
  * <code>optional sint32 engine_coolant_temperature = 8;</code>
  *
  * <pre>
  * Value of the engine coolant temperature in Celsius (-40..215)
  * </pre>
  */
 int getEngineCoolantTemperature();

 /**
  * <code>optional uint32 engine_coolant_temperature_limit = 9;</code>
  *
  * <pre>
  * Temperature limit of the coolant temperature (0..255)
  * </pre>
  */
 boolean hasEngineCoolantTemperatureLimit();
 /**
  * <code>optional uint32 engine_coolant_temperature_limit = 9;</code>
  *
  * <pre>
  * Temperature limit of the coolant temperature (0..255)
  * </pre>
  */
 int getEngineCoolantTemperatureLimit();

 /**
  * <code>optional uint32 fuel_level_value = 10;</code>
  *
  * <pre>
  * Percentage (0..100) of the fuel level 
  * </pre>
  */
 boolean hasFuelLevelValue();
 /**
  * <code>optional uint32 fuel_level_value = 10;</code>
  *
  * <pre>
  * Percentage (0..100) of the fuel level 
  * </pre>
  */
 int getFuelLevelValue();

 /**
  * <code>optional uint32 fuel_level_low_limit = 11;</code>
  *
  * <pre>
  * Lowest limit of the fuel level (0..100)
  * </pre>
  */
 boolean hasFuelLevelLowLimit();
 /**
  * <code>optional uint32 fuel_level_low_limit = 11;</code>
  *
  * <pre>
  * Lowest limit of the fuel level (0..100)
  * </pre>
  */
 int getFuelLevelLowLimit();

 /**
  * <code>optional uint32 instantaneous_fuel_economy = 12;</code>
  *
  * <pre>
  * Instantaneous fuel economy in km/L (0..255)
  * </pre>
  */
 boolean hasInstantaneousFuelEconomy();
 /**
  * <code>optional uint32 instantaneous_fuel_economy = 12;</code>
  *
  * <pre>
  * Instantaneous fuel economy in km/L (0..255)
  * </pre>
  */
 int getInstantaneousFuelEconomy();
}
/**
* Protobuf type {@code FuelLevel}
*
* <pre>
* Fuel level event generated when limit is reached
* </pre>
*/
public static final class FuelLevel extends
   com.google.protobuf.GeneratedMessage implements
   // @@protoc_insertion_point(message_implements:FuelLevel)
   FuelLevelOrBuilder {
 // Use FuelLevel.newBuilder() to construct.
 private FuelLevel(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
   super(builder);
   this.unknownFields = builder.getUnknownFields();
 }
 private FuelLevel(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

 private static final FuelLevel defaultInstance;
 public static FuelLevel getDefaultInstance() {
   return defaultInstance;
 }

 public FuelLevel getDefaultInstanceForType() {
   return defaultInstance;
 }

 private final com.google.protobuf.UnknownFieldSet unknownFields;
 @java.lang.Override
 public final com.google.protobuf.UnknownFieldSet
     getUnknownFields() {
   return this.unknownFields;
 }
 private FuelLevel(
     com.google.protobuf.CodedInputStream input,
     com.google.protobuf.ExtensionRegistryLite extensionRegistry)
     throws com.google.protobuf.InvalidProtocolBufferException {
   initFields();
   int mutable_bitField0_ = 0;
   com.google.protobuf.UnknownFieldSet.Builder unknownFields =
       com.google.protobuf.UnknownFieldSet.newBuilder();
   try {
     boolean done = false;
     while (!done) {
       int tag = input.readTag();
       switch (tag) {
         case 0:
           done = true;
           break;
         default: {
           if (!parseUnknownField(input, unknownFields,
                                  extensionRegistry, tag)) {
             done = true;
           }
           break;
         }
         case 10: {
           EventHeaderProto.EventHeader.Builder subBuilder = null;
           if (((bitField0_ & 0x00000001) == 0x00000001)) {
             subBuilder = header_.toBuilder();
           }
           header_ = input.readMessage(EventHeaderProto.EventHeader.PARSER, extensionRegistry);
           if (subBuilder != null) {
             subBuilder.mergeFrom(header_);
             header_ = subBuilder.buildPartial();
           }
           bitField0_ |= 0x00000001;
           break;
         }
         case 16: {
           bitField0_ |= 0x00000002;
           milStatus_ = input.readUInt32();
           break;
         }
         case 24: {
           bitField0_ |= 0x00000004;
           rpm_ = input.readUInt32();
           break;
         }
         case 32: {
           bitField0_ |= 0x00000008;
           throttlePosition_ = input.readUInt32();
           break;
         }
         case 40: {
           bitField0_ |= 0x00000010;
           engineLoadValue_ = input.readUInt32();
           break;
         }
         case 48: {
           bitField0_ |= 0x00000020;
           engineLoadLimit_ = input.readUInt32();
           break;
         }
         case 56: {
           bitField0_ |= 0x00000040;
           engineLoadTimeLimit_ = input.readUInt32();
           break;
         }
         case 64: {
           bitField0_ |= 0x00000080;
           engineCoolantTemperature_ = input.readSInt32();
           break;
         }
         case 72: {
           bitField0_ |= 0x00000100;
           engineCoolantTemperatureLimit_ = input.readUInt32();
           break;
         }
         case 80: {
           bitField0_ |= 0x00000200;
           fuelLevelValue_ = input.readUInt32();
           break;
         }
         case 88: {
           bitField0_ |= 0x00000400;
           fuelLevelLowLimit_ = input.readUInt32();
           break;
         }
         case 96: {
           bitField0_ |= 0x00000800;
           instantaneousFuelEconomy_ = input.readUInt32();
           break;
         }
       }
     }
   } catch (com.google.protobuf.InvalidProtocolBufferException e) {
     throw e.setUnfinishedMessage(this);
   } catch (java.io.IOException e) {
     throw new com.google.protobuf.InvalidProtocolBufferException(
         e.getMessage()).setUnfinishedMessage(this);
   } finally {
     this.unknownFields = unknownFields.build();
     makeExtensionsImmutable();
   }
 }
 public static final com.google.protobuf.Descriptors.Descriptor
     getDescriptor() {
   return FuelLevelProto.internal_static_FuelLevel_descriptor;
 }

 protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
     internalGetFieldAccessorTable() {
   return FuelLevelProto.internal_static_FuelLevel_fieldAccessorTable
       .ensureFieldAccessorsInitialized(
           FuelLevelProto.FuelLevel.class, FuelLevelProto.FuelLevel.Builder.class);
 }

 public static com.google.protobuf.Parser<FuelLevel> PARSER =
     new com.google.protobuf.AbstractParser<FuelLevel>() {
   public FuelLevel parsePartialFrom(
       com.google.protobuf.CodedInputStream input,
       com.google.protobuf.ExtensionRegistryLite extensionRegistry)
       throws com.google.protobuf.InvalidProtocolBufferException {
     return new FuelLevel(input, extensionRegistry);
   }
 };

 @java.lang.Override
 public com.google.protobuf.Parser<FuelLevel> getParserForType() {
   return PARSER;
 }

 private int bitField0_;
 public static final int HEADER_FIELD_NUMBER = 1;
 private EventHeaderProto.EventHeader header_;
 /**
  * <code>required .EventHeader header = 1;</code>
  */
 public boolean hasHeader() {
   return ((bitField0_ & 0x00000001) == 0x00000001);
 }
 /**
  * <code>required .EventHeader header = 1;</code>
  */
 public EventHeaderProto.EventHeader getHeader() {
   return header_;
 }
 /**
  * <code>required .EventHeader header = 1;</code>
  */
 public EventHeaderProto.EventHeaderOrBuilder getHeaderOrBuilder() {
   return header_;
 }

 public static final int MIL_STATUS_FIELD_NUMBER = 2;
 private int milStatus_;
 /**
  * <code>optional uint32 mil_status = 2;</code>
  *
  * <pre>
  * Malfunction indicator lamp (MIL) status (0..255)
  * </pre>
  */
 public boolean hasMilStatus() {
   return ((bitField0_ & 0x00000002) == 0x00000002);
 }
 /**
  * <code>optional uint32 mil_status = 2;</code>
  *
  * <pre>
  * Malfunction indicator lamp (MIL) status (0..255)
  * </pre>
  */
 public int getMilStatus() {
   return milStatus_;
 }

 public static final int RPM_FIELD_NUMBER = 3;
 private int rpm_;
 /**
  * <code>optional uint32 rpm = 3;</code>
  *
  * <pre>
  * Engine revolutions per minute (RPM) value (0..25500)
  * </pre>
  */
 public boolean hasRpm() {
   return ((bitField0_ & 0x00000004) == 0x00000004);
 }
 /**
  * <code>optional uint32 rpm = 3;</code>
  *
  * <pre>
  * Engine revolutions per minute (RPM) value (0..25500)
  * </pre>
  */
 public int getRpm() {
   return rpm_;
 }

 public static final int THROTTLE_POSITION_FIELD_NUMBER = 4;
 private int throttlePosition_;
 /**
  * <code>optional uint32 throttle_position = 4;</code>
  *
  * <pre>
  * Percentage (0..100) of the throttle position
  * </pre>
  */
 public boolean hasThrottlePosition() {
   return ((bitField0_ & 0x00000008) == 0x00000008);
 }
 /**
  * <code>optional uint32 throttle_position = 4;</code>
  *
  * <pre>
  * Percentage (0..100) of the throttle position
  * </pre>
  */
 public int getThrottlePosition() {
   return throttlePosition_;
 }

 public static final int ENGINE_LOAD_VALUE_FIELD_NUMBER = 5;
 private int engineLoadValue_;
 /**
  * <code>optional uint32 engine_load_value = 5;</code>
  *
  * <pre>
  * Percentage (0..100) of the engine load value
  * </pre>
  */
 public boolean hasEngineLoadValue() {
   return ((bitField0_ & 0x00000010) == 0x00000010);
 }
 /**
  * <code>optional uint32 engine_load_value = 5;</code>
  *
  * <pre>
  * Percentage (0..100) of the engine load value
  * </pre>
  */
 public int getEngineLoadValue() {
   return engineLoadValue_;
 }

 public static final int ENGINE_LOAD_LIMIT_FIELD_NUMBER = 6;
 private int engineLoadLimit_;
 /**
  * <code>optional uint32 engine_load_limit = 6;</code>
  *
  * <pre>
  * Value limit of the engine load (0..100)
  * </pre>
  */
 public boolean hasEngineLoadLimit() {
   return ((bitField0_ & 0x00000020) == 0x00000020);
 }
 /**
  * <code>optional uint32 engine_load_limit = 6;</code>
  *
  * <pre>
  * Value limit of the engine load (0..100)
  * </pre>
  */
 public int getEngineLoadLimit() {
   return engineLoadLimit_;
 }

 public static final int ENGINE_LOAD_TIME_LIMIT_FIELD_NUMBER = 7;
 private int engineLoadTimeLimit_;
 /**
  * <code>optional uint32 engine_load_time_limit = 7;</code>
  *
  * <pre>
  * Time limit of the engine load (0..65535)
  * </pre>
  */
 public boolean hasEngineLoadTimeLimit() {
   return ((bitField0_ & 0x00000040) == 0x00000040);
 }
 /**
  * <code>optional uint32 engine_load_time_limit = 7;</code>
  *
  * <pre>
  * Time limit of the engine load (0..65535)
  * </pre>
  */
 public int getEngineLoadTimeLimit() {
   return engineLoadTimeLimit_;
 }

 public static final int ENGINE_COOLANT_TEMPERATURE_FIELD_NUMBER = 8;
 private int engineCoolantTemperature_;
 /**
  * <code>optional sint32 engine_coolant_temperature = 8;</code>
  *
  * <pre>
  * Value of the engine coolant temperature in Celsius (-40..215)
  * </pre>
  */
 public boolean hasEngineCoolantTemperature() {
   return ((bitField0_ & 0x00000080) == 0x00000080);
 }
 /**
  * <code>optional sint32 engine_coolant_temperature = 8;</code>
  *
  * <pre>
  * Value of the engine coolant temperature in Celsius (-40..215)
  * </pre>
  */
 public int getEngineCoolantTemperature() {
   return engineCoolantTemperature_;
 }

 public static final int ENGINE_COOLANT_TEMPERATURE_LIMIT_FIELD_NUMBER = 9;
 private int engineCoolantTemperatureLimit_;
 /**
  * <code>optional uint32 engine_coolant_temperature_limit = 9;</code>
  *
  * <pre>
  * Temperature limit of the coolant temperature (0..255)
  * </pre>
  */
 public boolean hasEngineCoolantTemperatureLimit() {
   return ((bitField0_ & 0x00000100) == 0x00000100);
 }
 /**
  * <code>optional uint32 engine_coolant_temperature_limit = 9;</code>
  *
  * <pre>
  * Temperature limit of the coolant temperature (0..255)
  * </pre>
  */
 public int getEngineCoolantTemperatureLimit() {
   return engineCoolantTemperatureLimit_;
 }

 public static final int FUEL_LEVEL_VALUE_FIELD_NUMBER = 10;
 private int fuelLevelValue_;
 /**
  * <code>optional uint32 fuel_level_value = 10;</code>
  *
  * <pre>
  * Percentage (0..100) of the fuel level 
  * </pre>
  */
 public boolean hasFuelLevelValue() {
   return ((bitField0_ & 0x00000200) == 0x00000200);
 }
 /**
  * <code>optional uint32 fuel_level_value = 10;</code>
  *
  * <pre>
  * Percentage (0..100) of the fuel level 
  * </pre>
  */
 public int getFuelLevelValue() {
   return fuelLevelValue_;
 }

 public static final int FUEL_LEVEL_LOW_LIMIT_FIELD_NUMBER = 11;
 private int fuelLevelLowLimit_;
 /**
  * <code>optional uint32 fuel_level_low_limit = 11;</code>
  *
  * <pre>
  * Lowest limit of the fuel level (0..100)
  * </pre>
  */
 public boolean hasFuelLevelLowLimit() {
   return ((bitField0_ & 0x00000400) == 0x00000400);
 }
 /**
  * <code>optional uint32 fuel_level_low_limit = 11;</code>
  *
  * <pre>
  * Lowest limit of the fuel level (0..100)
  * </pre>
  */
 public int getFuelLevelLowLimit() {
   return fuelLevelLowLimit_;
 }

 public static final int INSTANTANEOUS_FUEL_ECONOMY_FIELD_NUMBER = 12;
 private int instantaneousFuelEconomy_;
 /**
  * <code>optional uint32 instantaneous_fuel_economy = 12;</code>
  *
  * <pre>
  * Instantaneous fuel economy in km/L (0..255)
  * </pre>
  */
 public boolean hasInstantaneousFuelEconomy() {
   return ((bitField0_ & 0x00000800) == 0x00000800);
 }
 /**
  * <code>optional uint32 instantaneous_fuel_economy = 12;</code>
  *
  * <pre>
  * Instantaneous fuel economy in km/L (0..255)
  * </pre>
  */
 public int getInstantaneousFuelEconomy() {
   return instantaneousFuelEconomy_;
 }

 private void initFields() {
   header_ = EventHeaderProto.EventHeader.getDefaultInstance();
   milStatus_ = 0;
   rpm_ = 0;
   throttlePosition_ = 0;
   engineLoadValue_ = 0;
   engineLoadLimit_ = 0;
   engineLoadTimeLimit_ = 0;
   engineCoolantTemperature_ = 0;
   engineCoolantTemperatureLimit_ = 0;
   fuelLevelValue_ = 0;
   fuelLevelLowLimit_ = 0;
   instantaneousFuelEconomy_ = 0;
 }
 private byte memoizedIsInitialized = -1;
 public final boolean isInitialized() {
   byte isInitialized = memoizedIsInitialized;
   if (isInitialized == 1) return true;
   if (isInitialized == 0) return false;

   if (!hasHeader()) {
     memoizedIsInitialized = 0;
     return false;
   }
   if (!getHeader().isInitialized()) {
     memoizedIsInitialized = 0;
     return false;
   }
   memoizedIsInitialized = 1;
   return true;
 }

 public void writeTo(com.google.protobuf.CodedOutputStream output)
                     throws java.io.IOException {
   getSerializedSize();
   if (((bitField0_ & 0x00000001) == 0x00000001)) {
     output.writeMessage(1, header_);
   }
   if (((bitField0_ & 0x00000002) == 0x00000002)) {
     output.writeUInt32(2, milStatus_);
   }
   if (((bitField0_ & 0x00000004) == 0x00000004)) {
     output.writeUInt32(3, rpm_);
   }
   if (((bitField0_ & 0x00000008) == 0x00000008)) {
     output.writeUInt32(4, throttlePosition_);
   }
   if (((bitField0_ & 0x00000010) == 0x00000010)) {
     output.writeUInt32(5, engineLoadValue_);
   }
   if (((bitField0_ & 0x00000020) == 0x00000020)) {
     output.writeUInt32(6, engineLoadLimit_);
   }
   if (((bitField0_ & 0x00000040) == 0x00000040)) {
     output.writeUInt32(7, engineLoadTimeLimit_);
   }
   if (((bitField0_ & 0x00000080) == 0x00000080)) {
     output.writeSInt32(8, engineCoolantTemperature_);
   }
   if (((bitField0_ & 0x00000100) == 0x00000100)) {
     output.writeUInt32(9, engineCoolantTemperatureLimit_);
   }
   if (((bitField0_ & 0x00000200) == 0x00000200)) {
     output.writeUInt32(10, fuelLevelValue_);
   }
   if (((bitField0_ & 0x00000400) == 0x00000400)) {
     output.writeUInt32(11, fuelLevelLowLimit_);
   }
   if (((bitField0_ & 0x00000800) == 0x00000800)) {
     output.writeUInt32(12, instantaneousFuelEconomy_);
   }
   getUnknownFields().writeTo(output);
 }

 private int memoizedSerializedSize = -1;
 public int getSerializedSize() {
   int size = memoizedSerializedSize;
   if (size != -1) return size;

   size = 0;
   if (((bitField0_ & 0x00000001) == 0x00000001)) {
     size += com.google.protobuf.CodedOutputStream
       .computeMessageSize(1, header_);
   }
   if (((bitField0_ & 0x00000002) == 0x00000002)) {
     size += com.google.protobuf.CodedOutputStream
       .computeUInt32Size(2, milStatus_);
   }
   if (((bitField0_ & 0x00000004) == 0x00000004)) {
     size += com.google.protobuf.CodedOutputStream
       .computeUInt32Size(3, rpm_);
   }
   if (((bitField0_ & 0x00000008) == 0x00000008)) {
     size += com.google.protobuf.CodedOutputStream
       .computeUInt32Size(4, throttlePosition_);
   }
   if (((bitField0_ & 0x00000010) == 0x00000010)) {
     size += com.google.protobuf.CodedOutputStream
       .computeUInt32Size(5, engineLoadValue_);
   }
   if (((bitField0_ & 0x00000020) == 0x00000020)) {
     size += com.google.protobuf.CodedOutputStream
       .computeUInt32Size(6, engineLoadLimit_);
   }
   if (((bitField0_ & 0x00000040) == 0x00000040)) {
     size += com.google.protobuf.CodedOutputStream
       .computeUInt32Size(7, engineLoadTimeLimit_);
   }
   if (((bitField0_ & 0x00000080) == 0x00000080)) {
     size += com.google.protobuf.CodedOutputStream
       .computeSInt32Size(8, engineCoolantTemperature_);
   }
   if (((bitField0_ & 0x00000100) == 0x00000100)) {
     size += com.google.protobuf.CodedOutputStream
       .computeUInt32Size(9, engineCoolantTemperatureLimit_);
   }
   if (((bitField0_ & 0x00000200) == 0x00000200)) {
     size += com.google.protobuf.CodedOutputStream
       .computeUInt32Size(10, fuelLevelValue_);
   }
   if (((bitField0_ & 0x00000400) == 0x00000400)) {
     size += com.google.protobuf.CodedOutputStream
       .computeUInt32Size(11, fuelLevelLowLimit_);
   }
   if (((bitField0_ & 0x00000800) == 0x00000800)) {
     size += com.google.protobuf.CodedOutputStream
       .computeUInt32Size(12, instantaneousFuelEconomy_);
   }
   size += getUnknownFields().getSerializedSize();
   memoizedSerializedSize = size;
   return size;
 }

 private static final long serialVersionUID = 0L;
 @java.lang.Override
 protected java.lang.Object writeReplace()
     throws java.io.ObjectStreamException {
   return super.writeReplace();
 }

 public static FuelLevelProto.FuelLevel parseFrom(
     com.google.protobuf.ByteString data)
     throws com.google.protobuf.InvalidProtocolBufferException {
   return PARSER.parseFrom(data);
 }
 public static FuelLevelProto.FuelLevel parseFrom(
     com.google.protobuf.ByteString data,
     com.google.protobuf.ExtensionRegistryLite extensionRegistry)
     throws com.google.protobuf.InvalidProtocolBufferException {
   return PARSER.parseFrom(data, extensionRegistry);
 }
 public static FuelLevelProto.FuelLevel parseFrom(byte[] data)
     throws com.google.protobuf.InvalidProtocolBufferException {
   return PARSER.parseFrom(data);
 }
 public static FuelLevelProto.FuelLevel parseFrom(
     byte[] data,
     com.google.protobuf.ExtensionRegistryLite extensionRegistry)
     throws com.google.protobuf.InvalidProtocolBufferException {
   return PARSER.parseFrom(data, extensionRegistry);
 }
 public static FuelLevelProto.FuelLevel parseFrom(java.io.InputStream input)
     throws java.io.IOException {
   return PARSER.parseFrom(input);
 }
 public static FuelLevelProto.FuelLevel parseFrom(
     java.io.InputStream input,
     com.google.protobuf.ExtensionRegistryLite extensionRegistry)
     throws java.io.IOException {
   return PARSER.parseFrom(input, extensionRegistry);
 }
 public static FuelLevelProto.FuelLevel parseDelimitedFrom(java.io.InputStream input)
     throws java.io.IOException {
   return PARSER.parseDelimitedFrom(input);
 }
 public static FuelLevelProto.FuelLevel parseDelimitedFrom(
     java.io.InputStream input,
     com.google.protobuf.ExtensionRegistryLite extensionRegistry)
     throws java.io.IOException {
   return PARSER.parseDelimitedFrom(input, extensionRegistry);
 }
 public static FuelLevelProto.FuelLevel parseFrom(
     com.google.protobuf.CodedInputStream input)
     throws java.io.IOException {
   return PARSER.parseFrom(input);
 }
 public static FuelLevelProto.FuelLevel parseFrom(
     com.google.protobuf.CodedInputStream input,
     com.google.protobuf.ExtensionRegistryLite extensionRegistry)
     throws java.io.IOException {
   return PARSER.parseFrom(input, extensionRegistry);
 }

 public static Builder newBuilder() { return Builder.create(); }
 public Builder newBuilderForType() { return newBuilder(); }
 public static Builder newBuilder(FuelLevelProto.FuelLevel prototype) {
   return newBuilder().mergeFrom(prototype);
 }
 public Builder toBuilder() { return newBuilder(this); }

 @java.lang.Override
 protected Builder newBuilderForType(
     com.google.protobuf.GeneratedMessage.BuilderParent parent) {
   Builder builder = new Builder(parent);
   return builder;
 }
 /**
  * Protobuf type {@code FuelLevel}
  *
  * <pre>
  * Fuel level event generated when limit is reached
  * </pre>
  */
 public static final class Builder extends
     com.google.protobuf.GeneratedMessage.Builder<Builder> implements
     // @@protoc_insertion_point(builder_implements:FuelLevel)
     FuelLevelProto.FuelLevelOrBuilder {
   public static final com.google.protobuf.Descriptors.Descriptor
       getDescriptor() {
     return FuelLevelProto.internal_static_FuelLevel_descriptor;
   }

   protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
       internalGetFieldAccessorTable() {
     return FuelLevelProto.internal_static_FuelLevel_fieldAccessorTable
         .ensureFieldAccessorsInitialized(
             FuelLevelProto.FuelLevel.class, FuelLevelProto.FuelLevel.Builder.class);
   }

   // Construct using FuelLevelProto.FuelLevel.newBuilder()
   private Builder() {
     maybeForceBuilderInitialization();
   }

   private Builder(
       com.google.protobuf.GeneratedMessage.BuilderParent parent) {
     super(parent);
     maybeForceBuilderInitialization();
   }
   private void maybeForceBuilderInitialization() {
     if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
       getHeaderFieldBuilder();
     }
   }
   private static Builder create() {
     return new Builder();
   }

   public Builder clear() {
     super.clear();
     if (headerBuilder_ == null) {
       header_ = EventHeaderProto.EventHeader.getDefaultInstance();
     } else {
       headerBuilder_.clear();
     }
     bitField0_ = (bitField0_ & ~0x00000001);
     milStatus_ = 0;
     bitField0_ = (bitField0_ & ~0x00000002);
     rpm_ = 0;
     bitField0_ = (bitField0_ & ~0x00000004);
     throttlePosition_ = 0;
     bitField0_ = (bitField0_ & ~0x00000008);
     engineLoadValue_ = 0;
     bitField0_ = (bitField0_ & ~0x00000010);
     engineLoadLimit_ = 0;
     bitField0_ = (bitField0_ & ~0x00000020);
     engineLoadTimeLimit_ = 0;
     bitField0_ = (bitField0_ & ~0x00000040);
     engineCoolantTemperature_ = 0;
     bitField0_ = (bitField0_ & ~0x00000080);
     engineCoolantTemperatureLimit_ = 0;
     bitField0_ = (bitField0_ & ~0x00000100);
     fuelLevelValue_ = 0;
     bitField0_ = (bitField0_ & ~0x00000200);
     fuelLevelLowLimit_ = 0;
     bitField0_ = (bitField0_ & ~0x00000400);
     instantaneousFuelEconomy_ = 0;
     bitField0_ = (bitField0_ & ~0x00000800);
     return this;
   }

   public Builder clone() {
     return create().mergeFrom(buildPartial());
   }

   public com.google.protobuf.Descriptors.Descriptor
       getDescriptorForType() {
     return FuelLevelProto.internal_static_FuelLevel_descriptor;
   }

   public FuelLevelProto.FuelLevel getDefaultInstanceForType() {
     return FuelLevelProto.FuelLevel.getDefaultInstance();
   }

   public FuelLevelProto.FuelLevel build() {
     FuelLevelProto.FuelLevel result = buildPartial();
     if (!result.isInitialized()) {
       throw newUninitializedMessageException(result);
     }
     return result;
   }

   public FuelLevelProto.FuelLevel buildPartial() {
     FuelLevelProto.FuelLevel result = new FuelLevelProto.FuelLevel(this);
     int from_bitField0_ = bitField0_;
     int to_bitField0_ = 0;
     if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
       to_bitField0_ |= 0x00000001;
     }
     if (headerBuilder_ == null) {
       result.header_ = header_;
     } else {
       result.header_ = headerBuilder_.build();
     }
     if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
       to_bitField0_ |= 0x00000002;
     }
     result.milStatus_ = milStatus_;
     if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
       to_bitField0_ |= 0x00000004;
     }
     result.rpm_ = rpm_;
     if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
       to_bitField0_ |= 0x00000008;
     }
     result.throttlePosition_ = throttlePosition_;
     if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
       to_bitField0_ |= 0x00000010;
     }
     result.engineLoadValue_ = engineLoadValue_;
     if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
       to_bitField0_ |= 0x00000020;
     }
     result.engineLoadLimit_ = engineLoadLimit_;
     if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
       to_bitField0_ |= 0x00000040;
     }
     result.engineLoadTimeLimit_ = engineLoadTimeLimit_;
     if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
       to_bitField0_ |= 0x00000080;
     }
     result.engineCoolantTemperature_ = engineCoolantTemperature_;
     if (((from_bitField0_ & 0x00000100) == 0x00000100)) {
       to_bitField0_ |= 0x00000100;
     }
     result.engineCoolantTemperatureLimit_ = engineCoolantTemperatureLimit_;
     if (((from_bitField0_ & 0x00000200) == 0x00000200)) {
       to_bitField0_ |= 0x00000200;
     }
     result.fuelLevelValue_ = fuelLevelValue_;
     if (((from_bitField0_ & 0x00000400) == 0x00000400)) {
       to_bitField0_ |= 0x00000400;
     }
     result.fuelLevelLowLimit_ = fuelLevelLowLimit_;
     if (((from_bitField0_ & 0x00000800) == 0x00000800)) {
       to_bitField0_ |= 0x00000800;
     }
     result.instantaneousFuelEconomy_ = instantaneousFuelEconomy_;
     result.bitField0_ = to_bitField0_;
     onBuilt();
     return result;
   }

   public Builder mergeFrom(com.google.protobuf.Message other) {
     if (other instanceof FuelLevelProto.FuelLevel) {
       return mergeFrom((FuelLevelProto.FuelLevel)other);
     } else {
       super.mergeFrom(other);
       return this;
     }
   }

   public Builder mergeFrom(FuelLevelProto.FuelLevel other) {
     if (other == FuelLevelProto.FuelLevel.getDefaultInstance()) return this;
     if (other.hasHeader()) {
       mergeHeader(other.getHeader());
     }
     if (other.hasMilStatus()) {
       setMilStatus(other.getMilStatus());
     }
     if (other.hasRpm()) {
       setRpm(other.getRpm());
     }
     if (other.hasThrottlePosition()) {
       setThrottlePosition(other.getThrottlePosition());
     }
     if (other.hasEngineLoadValue()) {
       setEngineLoadValue(other.getEngineLoadValue());
     }
     if (other.hasEngineLoadLimit()) {
       setEngineLoadLimit(other.getEngineLoadLimit());
     }
     if (other.hasEngineLoadTimeLimit()) {
       setEngineLoadTimeLimit(other.getEngineLoadTimeLimit());
     }
     if (other.hasEngineCoolantTemperature()) {
       setEngineCoolantTemperature(other.getEngineCoolantTemperature());
     }
     if (other.hasEngineCoolantTemperatureLimit()) {
       setEngineCoolantTemperatureLimit(other.getEngineCoolantTemperatureLimit());
     }
     if (other.hasFuelLevelValue()) {
       setFuelLevelValue(other.getFuelLevelValue());
     }
     if (other.hasFuelLevelLowLimit()) {
       setFuelLevelLowLimit(other.getFuelLevelLowLimit());
     }
     if (other.hasInstantaneousFuelEconomy()) {
       setInstantaneousFuelEconomy(other.getInstantaneousFuelEconomy());
     }
     this.mergeUnknownFields(other.getUnknownFields());
     return this;
   }

   public final boolean isInitialized() {
     if (!hasHeader()) {
       
       return false;
     }
     if (!getHeader().isInitialized()) {
       
       return false;
     }
     return true;
   }

   public Builder mergeFrom(
       com.google.protobuf.CodedInputStream input,
       com.google.protobuf.ExtensionRegistryLite extensionRegistry)
       throws java.io.IOException {
     FuelLevelProto.FuelLevel parsedMessage = null;
     try {
       parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
     } catch (com.google.protobuf.InvalidProtocolBufferException e) {
       parsedMessage = (FuelLevelProto.FuelLevel) e.getUnfinishedMessage();
       throw e;
     } finally {
       if (parsedMessage != null) {
         mergeFrom(parsedMessage);
       }
     }
     return this;
   }
   private int bitField0_;

   private EventHeaderProto.EventHeader header_ = EventHeaderProto.EventHeader.getDefaultInstance();
   private com.google.protobuf.SingleFieldBuilder<
       EventHeaderProto.EventHeader, EventHeaderProto.EventHeader.Builder, EventHeaderProto.EventHeaderOrBuilder> headerBuilder_;
   /**
    * <code>required .EventHeader header = 1;</code>
    */
   public boolean hasHeader() {
     return ((bitField0_ & 0x00000001) == 0x00000001);
   }
   /**
    * <code>required .EventHeader header = 1;</code>
    */
   public EventHeaderProto.EventHeader getHeader() {
     if (headerBuilder_ == null) {
       return header_;
     } else {
       return headerBuilder_.getMessage();
     }
   }
   /**
    * <code>required .EventHeader header = 1;</code>
    */
   public Builder setHeader(EventHeaderProto.EventHeader value) {
     if (headerBuilder_ == null) {
       if (value == null) {
         throw new NullPointerException();
       }
       header_ = value;
       onChanged();
     } else {
       headerBuilder_.setMessage(value);
     }
     bitField0_ |= 0x00000001;
     return this;
   }
   /**
    * <code>required .EventHeader header = 1;</code>
    */
   public Builder setHeader(
       EventHeaderProto.EventHeader.Builder builderForValue) {
     if (headerBuilder_ == null) {
       header_ = builderForValue.build();
       onChanged();
     } else {
       headerBuilder_.setMessage(builderForValue.build());
     }
     bitField0_ |= 0x00000001;
     return this;
   }
   /**
    * <code>required .EventHeader header = 1;</code>
    */
   public Builder mergeHeader(EventHeaderProto.EventHeader value) {
     if (headerBuilder_ == null) {
       if (((bitField0_ & 0x00000001) == 0x00000001) &&
           header_ != EventHeaderProto.EventHeader.getDefaultInstance()) {
         header_ =
           EventHeaderProto.EventHeader.newBuilder(header_).mergeFrom(value).buildPartial();
       } else {
         header_ = value;
       }
       onChanged();
     } else {
       headerBuilder_.mergeFrom(value);
     }
     bitField0_ |= 0x00000001;
     return this;
   }
   /**
    * <code>required .EventHeader header = 1;</code>
    */
   public Builder clearHeader() {
     if (headerBuilder_ == null) {
       header_ = EventHeaderProto.EventHeader.getDefaultInstance();
       onChanged();
     } else {
       headerBuilder_.clear();
     }
     bitField0_ = (bitField0_ & ~0x00000001);
     return this;
   }
   /**
    * <code>required .EventHeader header = 1;</code>
    */
   public EventHeaderProto.EventHeader.Builder getHeaderBuilder() {
     bitField0_ |= 0x00000001;
     onChanged();
     return getHeaderFieldBuilder().getBuilder();
   }
   /**
    * <code>required .EventHeader header = 1;</code>
    */
   public EventHeaderProto.EventHeaderOrBuilder getHeaderOrBuilder() {
     if (headerBuilder_ != null) {
       return headerBuilder_.getMessageOrBuilder();
     } else {
       return header_;
     }
   }
   /**
    * <code>required .EventHeader header = 1;</code>
    */
   private com.google.protobuf.SingleFieldBuilder<
       EventHeaderProto.EventHeader, EventHeaderProto.EventHeader.Builder, EventHeaderProto.EventHeaderOrBuilder> 
       getHeaderFieldBuilder() {
     if (headerBuilder_ == null) {
       headerBuilder_ = new com.google.protobuf.SingleFieldBuilder<
           EventHeaderProto.EventHeader, EventHeaderProto.EventHeader.Builder, EventHeaderProto.EventHeaderOrBuilder>(
               getHeader(),
               getParentForChildren(),
               isClean());
       header_ = null;
     }
     return headerBuilder_;
   }

   private int milStatus_ ;
   /**
    * <code>optional uint32 mil_status = 2;</code>
    *
    * <pre>
    * Malfunction indicator lamp (MIL) status (0..255)
    * </pre>
    */
   public boolean hasMilStatus() {
     return ((bitField0_ & 0x00000002) == 0x00000002);
   }
   /**
    * <code>optional uint32 mil_status = 2;</code>
    *
    * <pre>
    * Malfunction indicator lamp (MIL) status (0..255)
    * </pre>
    */
   public int getMilStatus() {
     return milStatus_;
   }
   /**
    * <code>optional uint32 mil_status = 2;</code>
    *
    * <pre>
    * Malfunction indicator lamp (MIL) status (0..255)
    * </pre>
    */
   public Builder setMilStatus(int value) {
     bitField0_ |= 0x00000002;
     milStatus_ = value;
     onChanged();
     return this;
   }
   /**
    * <code>optional uint32 mil_status = 2;</code>
    *
    * <pre>
    * Malfunction indicator lamp (MIL) status (0..255)
    * </pre>
    */
   public Builder clearMilStatus() {
     bitField0_ = (bitField0_ & ~0x00000002);
     milStatus_ = 0;
     onChanged();
     return this;
   }

   private int rpm_ ;
   /**
    * <code>optional uint32 rpm = 3;</code>
    *
    * <pre>
    * Engine revolutions per minute (RPM) value (0..25500)
    * </pre>
    */
   public boolean hasRpm() {
     return ((bitField0_ & 0x00000004) == 0x00000004);
   }
   /**
    * <code>optional uint32 rpm = 3;</code>
    *
    * <pre>
    * Engine revolutions per minute (RPM) value (0..25500)
    * </pre>
    */
   public int getRpm() {
     return rpm_;
   }
   /**
    * <code>optional uint32 rpm = 3;</code>
    *
    * <pre>
    * Engine revolutions per minute (RPM) value (0..25500)
    * </pre>
    */
   public Builder setRpm(int value) {
     bitField0_ |= 0x00000004;
     rpm_ = value;
     onChanged();
     return this;
   }
   /**
    * <code>optional uint32 rpm = 3;</code>
    *
    * <pre>
    * Engine revolutions per minute (RPM) value (0..25500)
    * </pre>
    */
   public Builder clearRpm() {
     bitField0_ = (bitField0_ & ~0x00000004);
     rpm_ = 0;
     onChanged();
     return this;
   }

   private int throttlePosition_ ;
   /**
    * <code>optional uint32 throttle_position = 4;</code>
    *
    * <pre>
    * Percentage (0..100) of the throttle position
    * </pre>
    */
   public boolean hasThrottlePosition() {
     return ((bitField0_ & 0x00000008) == 0x00000008);
   }
   /**
    * <code>optional uint32 throttle_position = 4;</code>
    *
    * <pre>
    * Percentage (0..100) of the throttle position
    * </pre>
    */
   public int getThrottlePosition() {
     return throttlePosition_;
   }
   /**
    * <code>optional uint32 throttle_position = 4;</code>
    *
    * <pre>
    * Percentage (0..100) of the throttle position
    * </pre>
    */
   public Builder setThrottlePosition(int value) {
     bitField0_ |= 0x00000008;
     throttlePosition_ = value;
     onChanged();
     return this;
   }
   /**
    * <code>optional uint32 throttle_position = 4;</code>
    *
    * <pre>
    * Percentage (0..100) of the throttle position
    * </pre>
    */
   public Builder clearThrottlePosition() {
     bitField0_ = (bitField0_ & ~0x00000008);
     throttlePosition_ = 0;
     onChanged();
     return this;
   }

   private int engineLoadValue_ ;
   /**
    * <code>optional uint32 engine_load_value = 5;</code>
    *
    * <pre>
    * Percentage (0..100) of the engine load value
    * </pre>
    */
   public boolean hasEngineLoadValue() {
     return ((bitField0_ & 0x00000010) == 0x00000010);
   }
   /**
    * <code>optional uint32 engine_load_value = 5;</code>
    *
    * <pre>
    * Percentage (0..100) of the engine load value
    * </pre>
    */
   public int getEngineLoadValue() {
     return engineLoadValue_;
   }
   /**
    * <code>optional uint32 engine_load_value = 5;</code>
    *
    * <pre>
    * Percentage (0..100) of the engine load value
    * </pre>
    */
   public Builder setEngineLoadValue(int value) {
     bitField0_ |= 0x00000010;
     engineLoadValue_ = value;
     onChanged();
     return this;
   }
   /**
    * <code>optional uint32 engine_load_value = 5;</code>
    *
    * <pre>
    * Percentage (0..100) of the engine load value
    * </pre>
    */
   public Builder clearEngineLoadValue() {
     bitField0_ = (bitField0_ & ~0x00000010);
     engineLoadValue_ = 0;
     onChanged();
     return this;
   }

   private int engineLoadLimit_ ;
   /**
    * <code>optional uint32 engine_load_limit = 6;</code>
    *
    * <pre>
    * Value limit of the engine load (0..100)
    * </pre>
    */
   public boolean hasEngineLoadLimit() {
     return ((bitField0_ & 0x00000020) == 0x00000020);
   }
   /**
    * <code>optional uint32 engine_load_limit = 6;</code>
    *
    * <pre>
    * Value limit of the engine load (0..100)
    * </pre>
    */
   public int getEngineLoadLimit() {
     return engineLoadLimit_;
   }
   /**
    * <code>optional uint32 engine_load_limit = 6;</code>
    *
    * <pre>
    * Value limit of the engine load (0..100)
    * </pre>
    */
   public Builder setEngineLoadLimit(int value) {
     bitField0_ |= 0x00000020;
     engineLoadLimit_ = value;
     onChanged();
     return this;
   }
   /**
    * <code>optional uint32 engine_load_limit = 6;</code>
    *
    * <pre>
    * Value limit of the engine load (0..100)
    * </pre>
    */
   public Builder clearEngineLoadLimit() {
     bitField0_ = (bitField0_ & ~0x00000020);
     engineLoadLimit_ = 0;
     onChanged();
     return this;
   }

   private int engineLoadTimeLimit_ ;
   /**
    * <code>optional uint32 engine_load_time_limit = 7;</code>
    *
    * <pre>
    * Time limit of the engine load (0..65535)
    * </pre>
    */
   public boolean hasEngineLoadTimeLimit() {
     return ((bitField0_ & 0x00000040) == 0x00000040);
   }
   /**
    * <code>optional uint32 engine_load_time_limit = 7;</code>
    *
    * <pre>
    * Time limit of the engine load (0..65535)
    * </pre>
    */
   public int getEngineLoadTimeLimit() {
     return engineLoadTimeLimit_;
   }
   /**
    * <code>optional uint32 engine_load_time_limit = 7;</code>
    *
    * <pre>
    * Time limit of the engine load (0..65535)
    * </pre>
    */
   public Builder setEngineLoadTimeLimit(int value) {
     bitField0_ |= 0x00000040;
     engineLoadTimeLimit_ = value;
     onChanged();
     return this;
   }
   /**
    * <code>optional uint32 engine_load_time_limit = 7;</code>
    *
    * <pre>
    * Time limit of the engine load (0..65535)
    * </pre>
    */
   public Builder clearEngineLoadTimeLimit() {
     bitField0_ = (bitField0_ & ~0x00000040);
     engineLoadTimeLimit_ = 0;
     onChanged();
     return this;
   }

   private int engineCoolantTemperature_ ;
   /**
    * <code>optional sint32 engine_coolant_temperature = 8;</code>
    *
    * <pre>
    * Value of the engine coolant temperature in Celsius (-40..215)
    * </pre>
    */
   public boolean hasEngineCoolantTemperature() {
     return ((bitField0_ & 0x00000080) == 0x00000080);
   }
   /**
    * <code>optional sint32 engine_coolant_temperature = 8;</code>
    *
    * <pre>
    * Value of the engine coolant temperature in Celsius (-40..215)
    * </pre>
    */
   public int getEngineCoolantTemperature() {
     return engineCoolantTemperature_;
   }
   /**
    * <code>optional sint32 engine_coolant_temperature = 8;</code>
    *
    * <pre>
    * Value of the engine coolant temperature in Celsius (-40..215)
    * </pre>
    */
   public Builder setEngineCoolantTemperature(int value) {
     bitField0_ |= 0x00000080;
     engineCoolantTemperature_ = value;
     onChanged();
     return this;
   }
   /**
    * <code>optional sint32 engine_coolant_temperature = 8;</code>
    *
    * <pre>
    * Value of the engine coolant temperature in Celsius (-40..215)
    * </pre>
    */
   public Builder clearEngineCoolantTemperature() {
     bitField0_ = (bitField0_ & ~0x00000080);
     engineCoolantTemperature_ = 0;
     onChanged();
     return this;
   }

   private int engineCoolantTemperatureLimit_ ;
   /**
    * <code>optional uint32 engine_coolant_temperature_limit = 9;</code>
    *
    * <pre>
    * Temperature limit of the coolant temperature (0..255)
    * </pre>
    */
   public boolean hasEngineCoolantTemperatureLimit() {
     return ((bitField0_ & 0x00000100) == 0x00000100);
   }
   /**
    * <code>optional uint32 engine_coolant_temperature_limit = 9;</code>
    *
    * <pre>
    * Temperature limit of the coolant temperature (0..255)
    * </pre>
    */
   public int getEngineCoolantTemperatureLimit() {
     return engineCoolantTemperatureLimit_;
   }
   /**
    * <code>optional uint32 engine_coolant_temperature_limit = 9;</code>
    *
    * <pre>
    * Temperature limit of the coolant temperature (0..255)
    * </pre>
    */
   public Builder setEngineCoolantTemperatureLimit(int value) {
     bitField0_ |= 0x00000100;
     engineCoolantTemperatureLimit_ = value;
     onChanged();
     return this;
   }
   /**
    * <code>optional uint32 engine_coolant_temperature_limit = 9;</code>
    *
    * <pre>
    * Temperature limit of the coolant temperature (0..255)
    * </pre>
    */
   public Builder clearEngineCoolantTemperatureLimit() {
     bitField0_ = (bitField0_ & ~0x00000100);
     engineCoolantTemperatureLimit_ = 0;
     onChanged();
     return this;
   }

   private int fuelLevelValue_ ;
   /**
    * <code>optional uint32 fuel_level_value = 10;</code>
    *
    * <pre>
    * Percentage (0..100) of the fuel level 
    * </pre>
    */
   public boolean hasFuelLevelValue() {
     return ((bitField0_ & 0x00000200) == 0x00000200);
   }
   /**
    * <code>optional uint32 fuel_level_value = 10;</code>
    *
    * <pre>
    * Percentage (0..100) of the fuel level 
    * </pre>
    */
   public int getFuelLevelValue() {
     return fuelLevelValue_;
   }
   /**
    * <code>optional uint32 fuel_level_value = 10;</code>
    *
    * <pre>
    * Percentage (0..100) of the fuel level 
    * </pre>
    */
   public Builder setFuelLevelValue(int value) {
     bitField0_ |= 0x00000200;
     fuelLevelValue_ = value;
     onChanged();
     return this;
   }
   /**
    * <code>optional uint32 fuel_level_value = 10;</code>
    *
    * <pre>
    * Percentage (0..100) of the fuel level 
    * </pre>
    */
   public Builder clearFuelLevelValue() {
     bitField0_ = (bitField0_ & ~0x00000200);
     fuelLevelValue_ = 0;
     onChanged();
     return this;
   }

   private int fuelLevelLowLimit_ ;
   /**
    * <code>optional uint32 fuel_level_low_limit = 11;</code>
    *
    * <pre>
    * Lowest limit of the fuel level (0..100)
    * </pre>
    */
   public boolean hasFuelLevelLowLimit() {
     return ((bitField0_ & 0x00000400) == 0x00000400);
   }
   /**
    * <code>optional uint32 fuel_level_low_limit = 11;</code>
    *
    * <pre>
    * Lowest limit of the fuel level (0..100)
    * </pre>
    */
   public int getFuelLevelLowLimit() {
     return fuelLevelLowLimit_;
   }
   /**
    * <code>optional uint32 fuel_level_low_limit = 11;</code>
    *
    * <pre>
    * Lowest limit of the fuel level (0..100)
    * </pre>
    */
   public Builder setFuelLevelLowLimit(int value) {
     bitField0_ |= 0x00000400;
     fuelLevelLowLimit_ = value;
     onChanged();
     return this;
   }
   /**
    * <code>optional uint32 fuel_level_low_limit = 11;</code>
    *
    * <pre>
    * Lowest limit of the fuel level (0..100)
    * </pre>
    */
   public Builder clearFuelLevelLowLimit() {
     bitField0_ = (bitField0_ & ~0x00000400);
     fuelLevelLowLimit_ = 0;
     onChanged();
     return this;
   }

   private int instantaneousFuelEconomy_ ;
   /**
    * <code>optional uint32 instantaneous_fuel_economy = 12;</code>
    *
    * <pre>
    * Instantaneous fuel economy in km/L (0..255)
    * </pre>
    */
   public boolean hasInstantaneousFuelEconomy() {
     return ((bitField0_ & 0x00000800) == 0x00000800);
   }
   /**
    * <code>optional uint32 instantaneous_fuel_economy = 12;</code>
    *
    * <pre>
    * Instantaneous fuel economy in km/L (0..255)
    * </pre>
    */
   public int getInstantaneousFuelEconomy() {
     return instantaneousFuelEconomy_;
   }
   /**
    * <code>optional uint32 instantaneous_fuel_economy = 12;</code>
    *
    * <pre>
    * Instantaneous fuel economy in km/L (0..255)
    * </pre>
    */
   public Builder setInstantaneousFuelEconomy(int value) {
     bitField0_ |= 0x00000800;
     instantaneousFuelEconomy_ = value;
     onChanged();
     return this;
   }
   /**
    * <code>optional uint32 instantaneous_fuel_economy = 12;</code>
    *
    * <pre>
    * Instantaneous fuel economy in km/L (0..255)
    * </pre>
    */
   public Builder clearInstantaneousFuelEconomy() {
     bitField0_ = (bitField0_ & ~0x00000800);
     instantaneousFuelEconomy_ = 0;
     onChanged();
     return this;
   }

   // @@protoc_insertion_point(builder_scope:FuelLevel)
 }

 static {
   defaultInstance = new FuelLevel(true);
   defaultInstance.initFields();
 }

 // @@protoc_insertion_point(class_scope:FuelLevel)
}

private static final com.google.protobuf.Descriptors.Descriptor
 internal_static_FuelLevel_descriptor;
private static
 com.google.protobuf.GeneratedMessage.FieldAccessorTable
   internal_static_FuelLevel_fieldAccessorTable;

public static com.google.protobuf.Descriptors.FileDescriptor
   getDescriptor() {
 return descriptor;
}
private static com.google.protobuf.Descriptors.FileDescriptor
   descriptor;
static {
 java.lang.String[] descriptorData = {
   "\n\024FuelLevelProto.proto\032\026EventHeaderProto" +
   ".proto\"\345\002\n\tFuelLevel\022\034\n\006header\030\001 \002(\0132\014.E" +
   "ventHeader\022\022\n\nmil_status\030\002 \001(\r\022\013\n\003rpm\030\003 " +
   "\001(\r\022\031\n\021throttle_position\030\004 \001(\r\022\031\n\021engine" +
   "_load_value\030\005 \001(\r\022\031\n\021engine_load_limit\030\006" +
   " \001(\r\022\036\n\026engine_load_time_limit\030\007 \001(\r\022\"\n\032" +
   "engine_coolant_temperature\030\010 \001(\021\022(\n engi" +
   "ne_coolant_temperature_limit\030\t \001(\r\022\030\n\020fu" +
   "el_level_value\030\n \001(\r\022\034\n\024fuel_level_low_l" +
   "imit\030\013 \001(\r\022\"\n\032instantaneous_fuel_economy",
   "\030\014 \001(\r"
 };
 com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
     new com.google.protobuf.Descriptors.FileDescriptor.    InternalDescriptorAssigner() {
       public com.google.protobuf.ExtensionRegistry assignDescriptors(
           com.google.protobuf.Descriptors.FileDescriptor root) {
         descriptor = root;
         return null;
       }
     };
 com.google.protobuf.Descriptors.FileDescriptor
   .internalBuildGeneratedFileFrom(descriptorData,
     new com.google.protobuf.Descriptors.FileDescriptor[] {
       EventHeaderProto.getDescriptor(),
     }, assigner);
 internal_static_FuelLevel_descriptor =
   getDescriptor().getMessageTypes().get(0);
 internal_static_FuelLevel_fieldAccessorTable = new
   com.google.protobuf.GeneratedMessage.FieldAccessorTable(
     internal_static_FuelLevel_descriptor,
     new java.lang.String[] { "Header", "MilStatus", "Rpm", "ThrottlePosition", "EngineLoadValue", "EngineLoadLimit", "EngineLoadTimeLimit", "EngineCoolantTemperature", "EngineCoolantTemperatureLimit", "FuelLevelValue", "FuelLevelLowLimit", "InstantaneousFuelEconomy", });
 EventHeaderProto.getDescriptor();
}

// @@protoc_insertion_point(outer_class_scope)
}
