package scopeProto;

//Generated by the protocol buffer compiler.  DO NOT EDIT!
//source: FuelConsumptionSourceTypeProto.proto

public final class FuelConsumptionSourceTypeProto {
private FuelConsumptionSourceTypeProto() {}
public static void registerAllExtensions(
   com.google.protobuf.ExtensionRegistry registry) {
}
/**
* Protobuf enum {@code FuelConsumptionSourceType}
*
* <pre>
* The source of fuel consumption data
* </pre>
*/
public enum FuelConsumptionSourceType
   implements com.google.protobuf.ProtocolMessageEnum {
 /**
  * <code>FUEL_CONSUMPTION_SOURCE_TYPE_ANALOG_INPUT = 0;</code>
  *
  * <pre>
  * Analog input
  * </pre>
  */
 FUEL_CONSUMPTION_SOURCE_TYPE_ANALOG_INPUT(0, 0),
 /**
  * <code>FUEL_CONSUMPTION_SOURCE_TYPE_VEHICLE_NETWORK = 1;</code>
  *
  * <pre>
  * Vehicle network
  * </pre>
  */
 FUEL_CONSUMPTION_SOURCE_TYPE_VEHICLE_NETWORK(1, 1),
 /**
  * <code>FUEL_CONSUMPTION_SOURCE_TYPE_FUEL_PROBE = 2;</code>
  *
  * <pre>
  * Fuel probe
  * </pre>
  */
 FUEL_CONSUMPTION_SOURCE_TYPE_FUEL_PROBE(2, 2),
 /**
  * <code>FUEL_CONSUMPTION_SOURCE_TYPE_CO2_MODEL = 3;</code>
  *
  * <pre>
  * CO2 model
  * </pre>
  */
 FUEL_CONSUMPTION_SOURCE_TYPE_CO2_MODEL(3, 3),
 /**
  * <code>FUEL_CONSUMPTION_SOURCE_TYPE_MASS_AIRFLOW = 4;</code>
  *
  * <pre>
  * Mass airflow
  * </pre>
  */
 FUEL_CONSUMPTION_SOURCE_TYPE_MASS_AIRFLOW(4, 4),
 /**
  * <code>FUEL_CONSUMPTION_SOURCE_TYPE_FUEL_FLOW_METER = 5;</code>
  *
  * <pre>
  * Fuel flow meter
  * </pre>
  */
 FUEL_CONSUMPTION_SOURCE_TYPE_FUEL_FLOW_METER(5, 5),
 ;

 /**
  * <code>FUEL_CONSUMPTION_SOURCE_TYPE_ANALOG_INPUT = 0;</code>
  *
  * <pre>
  * Analog input
  * </pre>
  */
 public static final int FUEL_CONSUMPTION_SOURCE_TYPE_ANALOG_INPUT_VALUE = 0;
 /**
  * <code>FUEL_CONSUMPTION_SOURCE_TYPE_VEHICLE_NETWORK = 1;</code>
  *
  * <pre>
  * Vehicle network
  * </pre>
  */
 public static final int FUEL_CONSUMPTION_SOURCE_TYPE_VEHICLE_NETWORK_VALUE = 1;
 /**
  * <code>FUEL_CONSUMPTION_SOURCE_TYPE_FUEL_PROBE = 2;</code>
  *
  * <pre>
  * Fuel probe
  * </pre>
  */
 public static final int FUEL_CONSUMPTION_SOURCE_TYPE_FUEL_PROBE_VALUE = 2;
 /**
  * <code>FUEL_CONSUMPTION_SOURCE_TYPE_CO2_MODEL = 3;</code>
  *
  * <pre>
  * CO2 model
  * </pre>
  */
 public static final int FUEL_CONSUMPTION_SOURCE_TYPE_CO2_MODEL_VALUE = 3;
 /**
  * <code>FUEL_CONSUMPTION_SOURCE_TYPE_MASS_AIRFLOW = 4;</code>
  *
  * <pre>
  * Mass airflow
  * </pre>
  */
 public static final int FUEL_CONSUMPTION_SOURCE_TYPE_MASS_AIRFLOW_VALUE = 4;
 /**
  * <code>FUEL_CONSUMPTION_SOURCE_TYPE_FUEL_FLOW_METER = 5;</code>
  *
  * <pre>
  * Fuel flow meter
  * </pre>
  */
 public static final int FUEL_CONSUMPTION_SOURCE_TYPE_FUEL_FLOW_METER_VALUE = 5;


 public final int getNumber() { return value; }

 public static FuelConsumptionSourceType valueOf(int value) {
   switch (value) {
     case 0: return FUEL_CONSUMPTION_SOURCE_TYPE_ANALOG_INPUT;
     case 1: return FUEL_CONSUMPTION_SOURCE_TYPE_VEHICLE_NETWORK;
     case 2: return FUEL_CONSUMPTION_SOURCE_TYPE_FUEL_PROBE;
     case 3: return FUEL_CONSUMPTION_SOURCE_TYPE_CO2_MODEL;
     case 4: return FUEL_CONSUMPTION_SOURCE_TYPE_MASS_AIRFLOW;
     case 5: return FUEL_CONSUMPTION_SOURCE_TYPE_FUEL_FLOW_METER;
     default: return null;
   }
 }

 public static com.google.protobuf.Internal.EnumLiteMap<FuelConsumptionSourceType>
     internalGetValueMap() {
   return internalValueMap;
 }
 private static com.google.protobuf.Internal.EnumLiteMap<FuelConsumptionSourceType>
     internalValueMap =
       new com.google.protobuf.Internal.EnumLiteMap<FuelConsumptionSourceType>() {
         public FuelConsumptionSourceType findValueByNumber(int number) {
           return FuelConsumptionSourceType.valueOf(number);
         }
       };

 public final com.google.protobuf.Descriptors.EnumValueDescriptor
     getValueDescriptor() {
   return getDescriptor().getValues().get(index);
 }
 public final com.google.protobuf.Descriptors.EnumDescriptor
     getDescriptorForType() {
   return getDescriptor();
 }
 public static final com.google.protobuf.Descriptors.EnumDescriptor
     getDescriptor() {
   return FuelConsumptionSourceTypeProto.getDescriptor().getEnumTypes().get(0);
 }

 private static final FuelConsumptionSourceType[] VALUES = values();

 public static FuelConsumptionSourceType valueOf(
     com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
   if (desc.getType() != getDescriptor()) {
     throw new java.lang.IllegalArgumentException(
       "EnumValueDescriptor is not for this type.");
   }
   return VALUES[desc.getIndex()];
 }

 private final int index;
 private final int value;

 private FuelConsumptionSourceType(int index, int value) {
   this.index = index;
   this.value = value;
 }

 // @@protoc_insertion_point(enum_scope:FuelConsumptionSourceType)
}


public static com.google.protobuf.Descriptors.FileDescriptor
   getDescriptor() {
 return descriptor;
}
private static com.google.protobuf.Descriptors.FileDescriptor
   descriptor;
static {
 java.lang.String[] descriptorData = {
   "\n$FuelConsumptionSourceTypeProto.proto*\266" +
   "\002\n\031FuelConsumptionSourceType\022-\n)FUEL_CON" +
   "SUMPTION_SOURCE_TYPE_ANALOG_INPUT\020\000\0220\n,F" +
   "UEL_CONSUMPTION_SOURCE_TYPE_VEHICLE_NETW" +
   "ORK\020\001\022+\n\'FUEL_CONSUMPTION_SOURCE_TYPE_FU" +
   "EL_PROBE\020\002\022*\n&FUEL_CONSUMPTION_SOURCE_TY" +
   "PE_CO2_MODEL\020\003\022-\n)FUEL_CONSUMPTION_SOURC" +
   "E_TYPE_MASS_AIRFLOW\020\004\0220\n,FUEL_CONSUMPTIO" +
   "N_SOURCE_TYPE_FUEL_FLOW_METER\020\005"
 };
 com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
     new com.google.protobuf.Descriptors.FileDescriptor.    InternalDescriptorAssigner() {
       public com.google.protobuf.ExtensionRegistry assignDescriptors(
           com.google.protobuf.Descriptors.FileDescriptor root) {
         descriptor = root;
         return null;
       }
     };
 com.google.protobuf.Descriptors.FileDescriptor
   .internalBuildGeneratedFileFrom(descriptorData,
     new com.google.protobuf.Descriptors.FileDescriptor[] {
     }, assigner);
}

// @@protoc_insertion_point(outer_class_scope)
}
