package scopeProto;

//Generated by the protocol buffer compiler.  DO NOT EDIT!
//source: ConsolidatedFuelDataProto.proto

public final class ConsolidatedFuelDataProto {
private ConsolidatedFuelDataProto() {}
public static void registerAllExtensions(
   com.google.protobuf.ExtensionRegistry registry) {
}
public interface ConsolidatedFuelDataOrBuilder extends
   // @@protoc_insertion_point(interface_extends:ConsolidatedFuelData)
   com.google.protobuf.MessageOrBuilder {

 /**
  * <code>required .EventHeader header = 1;</code>
  */
 boolean hasHeader();
 /**
  * <code>required .EventHeader header = 1;</code>
  */
 EventHeaderProto.EventHeader getHeader();
 /**
  * <code>required .EventHeader header = 1;</code>
  */
 EventHeaderProto.EventHeaderOrBuilder getHeaderOrBuilder();

 /**
  * <code>optional .ConsolidatedFuelReasonType reason = 2 [default = CONSOLIDATED_FUEL_REASON_PERIODIC];</code>
  *
  * <pre>
  * Reason for event being sent
  * </pre>
  */
 boolean hasReason();
 /**
  * <code>optional .ConsolidatedFuelReasonType reason = 2 [default = CONSOLIDATED_FUEL_REASON_PERIODIC];</code>
  *
  * <pre>
  * Reason for event being sent
  * </pre>
  */
 ConsolidatedFuelReasonTypeProto.ConsolidatedFuelReasonType getReason();

 /**
  * <code>optional .FuelLevelSourceType fuel_level_source = 3 [default = FUEL_LEVEL_SOURCE_TYPE_ANALOG_INPUT];</code>
  *
  * <pre>
  * Fuel level source
  * </pre>
  */
 boolean hasFuelLevelSource();
 /**
  * <code>optional .FuelLevelSourceType fuel_level_source = 3 [default = FUEL_LEVEL_SOURCE_TYPE_ANALOG_INPUT];</code>
  *
  * <pre>
  * Fuel level source
  * </pre>
  */
 FuelLevelSourceTypeProto.FuelLevelSourceType getFuelLevelSource();

 /**
  * <code>optional .FuelLevelUnitOfMeasureType fuel_level_unit_of_measure = 4 [default = FUEL_LEVEL_UNIT_OF_MEASURE_PERCENTAGE];</code>
  *
  * <pre>
  * Unit of measurement of the fuel level
  * </pre>
  */
 boolean hasFuelLevelUnitOfMeasure();
 /**
  * <code>optional .FuelLevelUnitOfMeasureType fuel_level_unit_of_measure = 4 [default = FUEL_LEVEL_UNIT_OF_MEASURE_PERCENTAGE];</code>
  *
  * <pre>
  * Unit of measurement of the fuel level
  * </pre>
  */
 FuelLevelUnitOfMeasureTypeProto.FuelLevelUnitOfMeasureType getFuelLevelUnitOfMeasure();

 /**
  * <code>optional .FuelConsumptionSourceType current_fuel_consumption_source = 5 [default = FUEL_CONSUMPTION_SOURCE_TYPE_ANALOG_INPUT];</code>
  *
  * <pre>
  * Current fuel consumption source
  * </pre>
  */
 boolean hasCurrentFuelConsumptionSource();
 /**
  * <code>optional .FuelConsumptionSourceType current_fuel_consumption_source = 5 [default = FUEL_CONSUMPTION_SOURCE_TYPE_ANALOG_INPUT];</code>
  *
  * <pre>
  * Current fuel consumption source
  * </pre>
  */
 FuelConsumptionSourceTypeProto.FuelConsumptionSourceType getCurrentFuelConsumptionSource();

 /**
  * <code>optional .FuelConsumptionUnitOfMeasureType current_fuel_consumption_unit_of_measure = 6 [default = FUEL_CONSUMPTION_UNIT_OF_MEASURE_LITERS_PER_100_KM];</code>
  *
  * <pre>
  * Unit of measurement of the current fuel consumption
  * </pre>
  */
 boolean hasCurrentFuelConsumptionUnitOfMeasure();
 /**
  * <code>optional .FuelConsumptionUnitOfMeasureType current_fuel_consumption_unit_of_measure = 6 [default = FUEL_CONSUMPTION_UNIT_OF_MEASURE_LITERS_PER_100_KM];</code>
  *
  * <pre>
  * Unit of measurement of the current fuel consumption
  * </pre>
  */
 FuelConsumptionUnitOfMeasureTypeProto.FuelConsumptionUnitOfMeasureType getCurrentFuelConsumptionUnitOfMeasure();

 /**
  * <code>optional .FuelConsumptionSourceType average_fuel_consumption_source = 7 [default = FUEL_CONSUMPTION_SOURCE_TYPE_ANALOG_INPUT];</code>
  *
  * <pre>
  * Average fuel consumption source
  * </pre>
  */
 boolean hasAverageFuelConsumptionSource();
 /**
  * <code>optional .FuelConsumptionSourceType average_fuel_consumption_source = 7 [default = FUEL_CONSUMPTION_SOURCE_TYPE_ANALOG_INPUT];</code>
  *
  * <pre>
  * Average fuel consumption source
  * </pre>
  */
 FuelConsumptionSourceTypeProto.FuelConsumptionSourceType getAverageFuelConsumptionSource();

 /**
  * <code>optional .FuelConsumptionUnitOfMeasureType average_fuel_consumption_unit_of_measure = 8 [default = FUEL_CONSUMPTION_UNIT_OF_MEASURE_LITERS_PER_100_KM];</code>
  *
  * <pre>
  * Unit of measurement of the average fuel consumption
  * </pre>
  */
 boolean hasAverageFuelConsumptionUnitOfMeasure();
 /**
  * <code>optional .FuelConsumptionUnitOfMeasureType average_fuel_consumption_unit_of_measure = 8 [default = FUEL_CONSUMPTION_UNIT_OF_MEASURE_LITERS_PER_100_KM];</code>
  *
  * <pre>
  * Unit of measurement of the average fuel consumption
  * </pre>
  */
 FuelConsumptionUnitOfMeasureTypeProto.FuelConsumptionUnitOfMeasureType getAverageFuelConsumptionUnitOfMeasure();

 /**
  * <code>optional float fuel_level = 9;</code>
  *
  * <pre>
  * Remaining fuel level indicator. Precision according to fuel_level_unit_of_measure.
  * </pre>
  */
 boolean hasFuelLevel();
 /**
  * <code>optional float fuel_level = 9;</code>
  *
  * <pre>
  * Remaining fuel level indicator. Precision according to fuel_level_unit_of_measure.
  * </pre>
  */
 float getFuelLevel();

 /**
  * <code>optional float current_fuel_consumption = 10;</code>
  *
  * <pre>
  * Current fuel consumption. Precision according to current_fuel_consumption_unit_of_measure.
  * </pre>
  */
 boolean hasCurrentFuelConsumption();
 /**
  * <code>optional float current_fuel_consumption = 10;</code>
  *
  * <pre>
  * Current fuel consumption. Precision according to current_fuel_consumption_unit_of_measure.
  * </pre>
  */
 float getCurrentFuelConsumption();

 /**
  * <code>optional float average_fuel_consumption = 11;</code>
  *
  * <pre>
  * Average fuel consumption. Precision according to average_fuel_consumption_unit_of_measure.
  * </pre>
  */
 boolean hasAverageFuelConsumption();
 /**
  * <code>optional float average_fuel_consumption = 11;</code>
  *
  * <pre>
  * Average fuel consumption. Precision according to average_fuel_consumption_unit_of_measure.
  * </pre>
  */
 float getAverageFuelConsumption();

 /**
  * <code>optional sint32 ambient_temperature = 12;</code>
  *
  * <pre>
  * Ambient (external) temperature (in degrees Celsius). -40..215. Precision: 1
  * </pre>
  */
 boolean hasAmbientTemperature();
 /**
  * <code>optional sint32 ambient_temperature = 12;</code>
  *
  * <pre>
  * Ambient (external) temperature (in degrees Celsius). -40..215. Precision: 1
  * </pre>
  */
 int getAmbientTemperature();

 /**
  * <code>optional int32 altitude_meters = 13;</code>
  *
  * <pre>
  * Altitude in meters. -32768..32767. Precision: 1
  * </pre>
  */
 boolean hasAltitudeMeters();
 /**
  * <code>optional int32 altitude_meters = 13;</code>
  *
  * <pre>
  * Altitude in meters. -32768..32767. Precision: 1
  * </pre>
  */
 int getAltitudeMeters();

 /**
  * <code>optional uint32 trip_distance_meters = 14;</code>
  *
  * <pre>
  * Trip distance in meters. Precision: 1
  * </pre>
  */
 boolean hasTripDistanceMeters();
 /**
  * <code>optional uint32 trip_distance_meters = 14;</code>
  *
  * <pre>
  * Trip distance in meters. Precision: 1
  * </pre>
  */
 int getTripDistanceMeters();

 /**
  * <code>optional uint32 trip_duration_seconds = 15;</code>
  *
  * <pre>
  * Trip duration in seconds. Precision: 1
  * </pre>
  */
 boolean hasTripDurationSeconds();
 /**
  * <code>optional uint32 trip_duration_seconds = 15;</code>
  *
  * <pre>
  * Trip duration in seconds. Precision: 1
  * </pre>
  */
 int getTripDurationSeconds();

 /**
  * <code>optional uint32 accuracy_percentage = 16;</code>
  *
  * <pre>
  * Accuracy of fuel level reading. 0..100. Precision: 1
  * </pre>
  */
 boolean hasAccuracyPercentage();
 /**
  * <code>optional uint32 accuracy_percentage = 16;</code>
  *
  * <pre>
  * Accuracy of fuel level reading. 0..100. Precision: 1
  * </pre>
  */
 int getAccuracyPercentage();
}
/**
* Protobuf type {@code ConsolidatedFuelData}
*
* <pre>
* Consolidated fuel data
* </pre>
*/
public static final class ConsolidatedFuelData extends
   com.google.protobuf.GeneratedMessage implements
   // @@protoc_insertion_point(message_implements:ConsolidatedFuelData)
   ConsolidatedFuelDataOrBuilder {
 // Use ConsolidatedFuelData.newBuilder() to construct.
 private ConsolidatedFuelData(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
   super(builder);
   this.unknownFields = builder.getUnknownFields();
 }
 private ConsolidatedFuelData(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

 private static final ConsolidatedFuelData defaultInstance;
 public static ConsolidatedFuelData getDefaultInstance() {
   return defaultInstance;
 }

 public ConsolidatedFuelData getDefaultInstanceForType() {
   return defaultInstance;
 }

 private final com.google.protobuf.UnknownFieldSet unknownFields;
 @java.lang.Override
 public final com.google.protobuf.UnknownFieldSet
     getUnknownFields() {
   return this.unknownFields;
 }
 private ConsolidatedFuelData(
     com.google.protobuf.CodedInputStream input,
     com.google.protobuf.ExtensionRegistryLite extensionRegistry)
     throws com.google.protobuf.InvalidProtocolBufferException {
   initFields();
   int mutable_bitField0_ = 0;
   com.google.protobuf.UnknownFieldSet.Builder unknownFields =
       com.google.protobuf.UnknownFieldSet.newBuilder();
   try {
     boolean done = false;
     while (!done) {
       int tag = input.readTag();
       switch (tag) {
         case 0:
           done = true;
           break;
         default: {
           if (!parseUnknownField(input, unknownFields,
                                  extensionRegistry, tag)) {
             done = true;
           }
           break;
         }
         case 10: {
           EventHeaderProto.EventHeader.Builder subBuilder = null;
           if (((bitField0_ & 0x00000001) == 0x00000001)) {
             subBuilder = header_.toBuilder();
           }
           header_ = input.readMessage(EventHeaderProto.EventHeader.PARSER, extensionRegistry);
           if (subBuilder != null) {
             subBuilder.mergeFrom(header_);
             header_ = subBuilder.buildPartial();
           }
           bitField0_ |= 0x00000001;
           break;
         }
         case 16: {
           int rawValue = input.readEnum();
           ConsolidatedFuelReasonTypeProto.ConsolidatedFuelReasonType value = ConsolidatedFuelReasonTypeProto.ConsolidatedFuelReasonType.valueOf(rawValue);
           if (value == null) {
             unknownFields.mergeVarintField(2, rawValue);
           } else {
             bitField0_ |= 0x00000002;
             reason_ = value;
           }
           break;
         }
         case 24: {
           int rawValue = input.readEnum();
           FuelLevelSourceTypeProto.FuelLevelSourceType value = FuelLevelSourceTypeProto.FuelLevelSourceType.valueOf(rawValue);
           if (value == null) {
             unknownFields.mergeVarintField(3, rawValue);
           } else {
             bitField0_ |= 0x00000004;
             fuelLevelSource_ = value;
           }
           break;
         }
         case 32: {
           int rawValue = input.readEnum();
           FuelLevelUnitOfMeasureTypeProto.FuelLevelUnitOfMeasureType value = FuelLevelUnitOfMeasureTypeProto.FuelLevelUnitOfMeasureType.valueOf(rawValue);
           if (value == null) {
             unknownFields.mergeVarintField(4, rawValue);
           } else {
             bitField0_ |= 0x00000008;
             fuelLevelUnitOfMeasure_ = value;
           }
           break;
         }
         case 40: {
           int rawValue = input.readEnum();
           FuelConsumptionSourceTypeProto.FuelConsumptionSourceType value = FuelConsumptionSourceTypeProto.FuelConsumptionSourceType.valueOf(rawValue);
           if (value == null) {
             unknownFields.mergeVarintField(5, rawValue);
           } else {
             bitField0_ |= 0x00000010;
             currentFuelConsumptionSource_ = value;
           }
           break;
         }
         case 48: {
           int rawValue = input.readEnum();
           FuelConsumptionUnitOfMeasureTypeProto.FuelConsumptionUnitOfMeasureType value = FuelConsumptionUnitOfMeasureTypeProto.FuelConsumptionUnitOfMeasureType.valueOf(rawValue);
           if (value == null) {
             unknownFields.mergeVarintField(6, rawValue);
           } else {
             bitField0_ |= 0x00000020;
             currentFuelConsumptionUnitOfMeasure_ = value;
           }
           break;
         }
         case 56: {
           int rawValue = input.readEnum();
           FuelConsumptionSourceTypeProto.FuelConsumptionSourceType value = FuelConsumptionSourceTypeProto.FuelConsumptionSourceType.valueOf(rawValue);
           if (value == null) {
             unknownFields.mergeVarintField(7, rawValue);
           } else {
             bitField0_ |= 0x00000040;
             averageFuelConsumptionSource_ = value;
           }
           break;
         }
         case 64: {
           int rawValue = input.readEnum();
           FuelConsumptionUnitOfMeasureTypeProto.FuelConsumptionUnitOfMeasureType value = FuelConsumptionUnitOfMeasureTypeProto.FuelConsumptionUnitOfMeasureType.valueOf(rawValue);
           if (value == null) {
             unknownFields.mergeVarintField(8, rawValue);
           } else {
             bitField0_ |= 0x00000080;
             averageFuelConsumptionUnitOfMeasure_ = value;
           }
           break;
         }
         case 77: {
           bitField0_ |= 0x00000100;
           fuelLevel_ = input.readFloat();
           break;
         }
         case 85: {
           bitField0_ |= 0x00000200;
           currentFuelConsumption_ = input.readFloat();
           break;
         }
         case 93: {
           bitField0_ |= 0x00000400;
           averageFuelConsumption_ = input.readFloat();
           break;
         }
         case 96: {
           bitField0_ |= 0x00000800;
           ambientTemperature_ = input.readSInt32();
           break;
         }
         case 104: {
           bitField0_ |= 0x00001000;
           altitudeMeters_ = input.readInt32();
           break;
         }
         case 112: {
           bitField0_ |= 0x00002000;
           tripDistanceMeters_ = input.readUInt32();
           break;
         }
         case 120: {
           bitField0_ |= 0x00004000;
           tripDurationSeconds_ = input.readUInt32();
           break;
         }
         case 128: {
           bitField0_ |= 0x00008000;
           accuracyPercentage_ = input.readUInt32();
           break;
         }
       }
     }
   } catch (com.google.protobuf.InvalidProtocolBufferException e) {
     throw e.setUnfinishedMessage(this);
   } catch (java.io.IOException e) {
     throw new com.google.protobuf.InvalidProtocolBufferException(
         e.getMessage()).setUnfinishedMessage(this);
   } finally {
     this.unknownFields = unknownFields.build();
     makeExtensionsImmutable();
   }
 }
 public static final com.google.protobuf.Descriptors.Descriptor
     getDescriptor() {
   return ConsolidatedFuelDataProto.internal_static_ConsolidatedFuelData_descriptor;
 }

 protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
     internalGetFieldAccessorTable() {
   return ConsolidatedFuelDataProto.internal_static_ConsolidatedFuelData_fieldAccessorTable
       .ensureFieldAccessorsInitialized(
           ConsolidatedFuelDataProto.ConsolidatedFuelData.class, ConsolidatedFuelDataProto.ConsolidatedFuelData.Builder.class);
 }

 public static com.google.protobuf.Parser<ConsolidatedFuelData> PARSER =
     new com.google.protobuf.AbstractParser<ConsolidatedFuelData>() {
   public ConsolidatedFuelData parsePartialFrom(
       com.google.protobuf.CodedInputStream input,
       com.google.protobuf.ExtensionRegistryLite extensionRegistry)
       throws com.google.protobuf.InvalidProtocolBufferException {
     return new ConsolidatedFuelData(input, extensionRegistry);
   }
 };

 @java.lang.Override
 public com.google.protobuf.Parser<ConsolidatedFuelData> getParserForType() {
   return PARSER;
 }

 private int bitField0_;
 public static final int HEADER_FIELD_NUMBER = 1;
 private EventHeaderProto.EventHeader header_;
 /**
  * <code>required .EventHeader header = 1;</code>
  */
 public boolean hasHeader() {
   return ((bitField0_ & 0x00000001) == 0x00000001);
 }
 /**
  * <code>required .EventHeader header = 1;</code>
  */
 public EventHeaderProto.EventHeader getHeader() {
   return header_;
 }
 /**
  * <code>required .EventHeader header = 1;</code>
  */
 public EventHeaderProto.EventHeaderOrBuilder getHeaderOrBuilder() {
   return header_;
 }

 public static final int REASON_FIELD_NUMBER = 2;
 private ConsolidatedFuelReasonTypeProto.ConsolidatedFuelReasonType reason_;
 /**
  * <code>optional .ConsolidatedFuelReasonType reason = 2 [default = CONSOLIDATED_FUEL_REASON_PERIODIC];</code>
  *
  * <pre>
  * Reason for event being sent
  * </pre>
  */
 public boolean hasReason() {
   return ((bitField0_ & 0x00000002) == 0x00000002);
 }
 /**
  * <code>optional .ConsolidatedFuelReasonType reason = 2 [default = CONSOLIDATED_FUEL_REASON_PERIODIC];</code>
  *
  * <pre>
  * Reason for event being sent
  * </pre>
  */
 public ConsolidatedFuelReasonTypeProto.ConsolidatedFuelReasonType getReason() {
   return reason_;
 }

 public static final int FUEL_LEVEL_SOURCE_FIELD_NUMBER = 3;
 private FuelLevelSourceTypeProto.FuelLevelSourceType fuelLevelSource_;
 /**
  * <code>optional .FuelLevelSourceType fuel_level_source = 3 [default = FUEL_LEVEL_SOURCE_TYPE_ANALOG_INPUT];</code>
  *
  * <pre>
  * Fuel level source
  * </pre>
  */
 public boolean hasFuelLevelSource() {
   return ((bitField0_ & 0x00000004) == 0x00000004);
 }
 /**
  * <code>optional .FuelLevelSourceType fuel_level_source = 3 [default = FUEL_LEVEL_SOURCE_TYPE_ANALOG_INPUT];</code>
  *
  * <pre>
  * Fuel level source
  * </pre>
  */
 public FuelLevelSourceTypeProto.FuelLevelSourceType getFuelLevelSource() {
   return fuelLevelSource_;
 }

 public static final int FUEL_LEVEL_UNIT_OF_MEASURE_FIELD_NUMBER = 4;
 private FuelLevelUnitOfMeasureTypeProto.FuelLevelUnitOfMeasureType fuelLevelUnitOfMeasure_;
 /**
  * <code>optional .FuelLevelUnitOfMeasureType fuel_level_unit_of_measure = 4 [default = FUEL_LEVEL_UNIT_OF_MEASURE_PERCENTAGE];</code>
  *
  * <pre>
  * Unit of measurement of the fuel level
  * </pre>
  */
 public boolean hasFuelLevelUnitOfMeasure() {
   return ((bitField0_ & 0x00000008) == 0x00000008);
 }
 /**
  * <code>optional .FuelLevelUnitOfMeasureType fuel_level_unit_of_measure = 4 [default = FUEL_LEVEL_UNIT_OF_MEASURE_PERCENTAGE];</code>
  *
  * <pre>
  * Unit of measurement of the fuel level
  * </pre>
  */
 public FuelLevelUnitOfMeasureTypeProto.FuelLevelUnitOfMeasureType getFuelLevelUnitOfMeasure() {
   return fuelLevelUnitOfMeasure_;
 }

 public static final int CURRENT_FUEL_CONSUMPTION_SOURCE_FIELD_NUMBER = 5;
 private FuelConsumptionSourceTypeProto.FuelConsumptionSourceType currentFuelConsumptionSource_;
 /**
  * <code>optional .FuelConsumptionSourceType current_fuel_consumption_source = 5 [default = FUEL_CONSUMPTION_SOURCE_TYPE_ANALOG_INPUT];</code>
  *
  * <pre>
  * Current fuel consumption source
  * </pre>
  */
 public boolean hasCurrentFuelConsumptionSource() {
   return ((bitField0_ & 0x00000010) == 0x00000010);
 }
 /**
  * <code>optional .FuelConsumptionSourceType current_fuel_consumption_source = 5 [default = FUEL_CONSUMPTION_SOURCE_TYPE_ANALOG_INPUT];</code>
  *
  * <pre>
  * Current fuel consumption source
  * </pre>
  */
 public FuelConsumptionSourceTypeProto.FuelConsumptionSourceType getCurrentFuelConsumptionSource() {
   return currentFuelConsumptionSource_;
 }

 public static final int CURRENT_FUEL_CONSUMPTION_UNIT_OF_MEASURE_FIELD_NUMBER = 6;
 private FuelConsumptionUnitOfMeasureTypeProto.FuelConsumptionUnitOfMeasureType currentFuelConsumptionUnitOfMeasure_;
 /**
  * <code>optional .FuelConsumptionUnitOfMeasureType current_fuel_consumption_unit_of_measure = 6 [default = FUEL_CONSUMPTION_UNIT_OF_MEASURE_LITERS_PER_100_KM];</code>
  *
  * <pre>
  * Unit of measurement of the current fuel consumption
  * </pre>
  */
 public boolean hasCurrentFuelConsumptionUnitOfMeasure() {
   return ((bitField0_ & 0x00000020) == 0x00000020);
 }
 /**
  * <code>optional .FuelConsumptionUnitOfMeasureType current_fuel_consumption_unit_of_measure = 6 [default = FUEL_CONSUMPTION_UNIT_OF_MEASURE_LITERS_PER_100_KM];</code>
  *
  * <pre>
  * Unit of measurement of the current fuel consumption
  * </pre>
  */
 public FuelConsumptionUnitOfMeasureTypeProto.FuelConsumptionUnitOfMeasureType getCurrentFuelConsumptionUnitOfMeasure() {
   return currentFuelConsumptionUnitOfMeasure_;
 }

 public static final int AVERAGE_FUEL_CONSUMPTION_SOURCE_FIELD_NUMBER = 7;
 private FuelConsumptionSourceTypeProto.FuelConsumptionSourceType averageFuelConsumptionSource_;
 /**
  * <code>optional .FuelConsumptionSourceType average_fuel_consumption_source = 7 [default = FUEL_CONSUMPTION_SOURCE_TYPE_ANALOG_INPUT];</code>
  *
  * <pre>
  * Average fuel consumption source
  * </pre>
  */
 public boolean hasAverageFuelConsumptionSource() {
   return ((bitField0_ & 0x00000040) == 0x00000040);
 }
 /**
  * <code>optional .FuelConsumptionSourceType average_fuel_consumption_source = 7 [default = FUEL_CONSUMPTION_SOURCE_TYPE_ANALOG_INPUT];</code>
  *
  * <pre>
  * Average fuel consumption source
  * </pre>
  */
 public FuelConsumptionSourceTypeProto.FuelConsumptionSourceType getAverageFuelConsumptionSource() {
   return averageFuelConsumptionSource_;
 }

 public static final int AVERAGE_FUEL_CONSUMPTION_UNIT_OF_MEASURE_FIELD_NUMBER = 8;
 private FuelConsumptionUnitOfMeasureTypeProto.FuelConsumptionUnitOfMeasureType averageFuelConsumptionUnitOfMeasure_;
 /**
  * <code>optional .FuelConsumptionUnitOfMeasureType average_fuel_consumption_unit_of_measure = 8 [default = FUEL_CONSUMPTION_UNIT_OF_MEASURE_LITERS_PER_100_KM];</code>
  *
  * <pre>
  * Unit of measurement of the average fuel consumption
  * </pre>
  */
 public boolean hasAverageFuelConsumptionUnitOfMeasure() {
   return ((bitField0_ & 0x00000080) == 0x00000080);
 }
 /**
  * <code>optional .FuelConsumptionUnitOfMeasureType average_fuel_consumption_unit_of_measure = 8 [default = FUEL_CONSUMPTION_UNIT_OF_MEASURE_LITERS_PER_100_KM];</code>
  *
  * <pre>
  * Unit of measurement of the average fuel consumption
  * </pre>
  */
 public FuelConsumptionUnitOfMeasureTypeProto.FuelConsumptionUnitOfMeasureType getAverageFuelConsumptionUnitOfMeasure() {
   return averageFuelConsumptionUnitOfMeasure_;
 }

 public static final int FUEL_LEVEL_FIELD_NUMBER = 9;
 private float fuelLevel_;
 /**
  * <code>optional float fuel_level = 9;</code>
  *
  * <pre>
  * Remaining fuel level indicator. Precision according to fuel_level_unit_of_measure.
  * </pre>
  */
 public boolean hasFuelLevel() {
   return ((bitField0_ & 0x00000100) == 0x00000100);
 }
 /**
  * <code>optional float fuel_level = 9;</code>
  *
  * <pre>
  * Remaining fuel level indicator. Precision according to fuel_level_unit_of_measure.
  * </pre>
  */
 public float getFuelLevel() {
   return fuelLevel_;
 }

 public static final int CURRENT_FUEL_CONSUMPTION_FIELD_NUMBER = 10;
 private float currentFuelConsumption_;
 /**
  * <code>optional float current_fuel_consumption = 10;</code>
  *
  * <pre>
  * Current fuel consumption. Precision according to current_fuel_consumption_unit_of_measure.
  * </pre>
  */
 public boolean hasCurrentFuelConsumption() {
   return ((bitField0_ & 0x00000200) == 0x00000200);
 }
 /**
  * <code>optional float current_fuel_consumption = 10;</code>
  *
  * <pre>
  * Current fuel consumption. Precision according to current_fuel_consumption_unit_of_measure.
  * </pre>
  */
 public float getCurrentFuelConsumption() {
   return currentFuelConsumption_;
 }

 public static final int AVERAGE_FUEL_CONSUMPTION_FIELD_NUMBER = 11;
 private float averageFuelConsumption_;
 /**
  * <code>optional float average_fuel_consumption = 11;</code>
  *
  * <pre>
  * Average fuel consumption. Precision according to average_fuel_consumption_unit_of_measure.
  * </pre>
  */
 public boolean hasAverageFuelConsumption() {
   return ((bitField0_ & 0x00000400) == 0x00000400);
 }
 /**
  * <code>optional float average_fuel_consumption = 11;</code>
  *
  * <pre>
  * Average fuel consumption. Precision according to average_fuel_consumption_unit_of_measure.
  * </pre>
  */
 public float getAverageFuelConsumption() {
   return averageFuelConsumption_;
 }

 public static final int AMBIENT_TEMPERATURE_FIELD_NUMBER = 12;
 private int ambientTemperature_;
 /**
  * <code>optional sint32 ambient_temperature = 12;</code>
  *
  * <pre>
  * Ambient (external) temperature (in degrees Celsius). -40..215. Precision: 1
  * </pre>
  */
 public boolean hasAmbientTemperature() {
   return ((bitField0_ & 0x00000800) == 0x00000800);
 }
 /**
  * <code>optional sint32 ambient_temperature = 12;</code>
  *
  * <pre>
  * Ambient (external) temperature (in degrees Celsius). -40..215. Precision: 1
  * </pre>
  */
 public int getAmbientTemperature() {
   return ambientTemperature_;
 }

 public static final int ALTITUDE_METERS_FIELD_NUMBER = 13;
 private int altitudeMeters_;
 /**
  * <code>optional int32 altitude_meters = 13;</code>
  *
  * <pre>
  * Altitude in meters. -32768..32767. Precision: 1
  * </pre>
  */
 public boolean hasAltitudeMeters() {
   return ((bitField0_ & 0x00001000) == 0x00001000);
 }
 /**
  * <code>optional int32 altitude_meters = 13;</code>
  *
  * <pre>
  * Altitude in meters. -32768..32767. Precision: 1
  * </pre>
  */
 public int getAltitudeMeters() {
   return altitudeMeters_;
 }

 public static final int TRIP_DISTANCE_METERS_FIELD_NUMBER = 14;
 private int tripDistanceMeters_;
 /**
  * <code>optional uint32 trip_distance_meters = 14;</code>
  *
  * <pre>
  * Trip distance in meters. Precision: 1
  * </pre>
  */
 public boolean hasTripDistanceMeters() {
   return ((bitField0_ & 0x00002000) == 0x00002000);
 }
 /**
  * <code>optional uint32 trip_distance_meters = 14;</code>
  *
  * <pre>
  * Trip distance in meters. Precision: 1
  * </pre>
  */
 public int getTripDistanceMeters() {
   return tripDistanceMeters_;
 }

 public static final int TRIP_DURATION_SECONDS_FIELD_NUMBER = 15;
 private int tripDurationSeconds_;
 /**
  * <code>optional uint32 trip_duration_seconds = 15;</code>
  *
  * <pre>
  * Trip duration in seconds. Precision: 1
  * </pre>
  */
 public boolean hasTripDurationSeconds() {
   return ((bitField0_ & 0x00004000) == 0x00004000);
 }
 /**
  * <code>optional uint32 trip_duration_seconds = 15;</code>
  *
  * <pre>
  * Trip duration in seconds. Precision: 1
  * </pre>
  */
 public int getTripDurationSeconds() {
   return tripDurationSeconds_;
 }

 public static final int ACCURACY_PERCENTAGE_FIELD_NUMBER = 16;
 private int accuracyPercentage_;
 /**
  * <code>optional uint32 accuracy_percentage = 16;</code>
  *
  * <pre>
  * Accuracy of fuel level reading. 0..100. Precision: 1
  * </pre>
  */
 public boolean hasAccuracyPercentage() {
   return ((bitField0_ & 0x00008000) == 0x00008000);
 }
 /**
  * <code>optional uint32 accuracy_percentage = 16;</code>
  *
  * <pre>
  * Accuracy of fuel level reading. 0..100. Precision: 1
  * </pre>
  */
 public int getAccuracyPercentage() {
   return accuracyPercentage_;
 }

 private void initFields() {
   header_ = EventHeaderProto.EventHeader.getDefaultInstance();
   reason_ = ConsolidatedFuelReasonTypeProto.ConsolidatedFuelReasonType.CONSOLIDATED_FUEL_REASON_PERIODIC;
   fuelLevelSource_ = FuelLevelSourceTypeProto.FuelLevelSourceType.FUEL_LEVEL_SOURCE_TYPE_ANALOG_INPUT;
   fuelLevelUnitOfMeasure_ = FuelLevelUnitOfMeasureTypeProto.FuelLevelUnitOfMeasureType.FUEL_LEVEL_UNIT_OF_MEASURE_PERCENTAGE;
   currentFuelConsumptionSource_ = FuelConsumptionSourceTypeProto.FuelConsumptionSourceType.FUEL_CONSUMPTION_SOURCE_TYPE_ANALOG_INPUT;
   currentFuelConsumptionUnitOfMeasure_ = FuelConsumptionUnitOfMeasureTypeProto.FuelConsumptionUnitOfMeasureType.FUEL_CONSUMPTION_UNIT_OF_MEASURE_LITERS_PER_100_KM;
   averageFuelConsumptionSource_ = FuelConsumptionSourceTypeProto.FuelConsumptionSourceType.FUEL_CONSUMPTION_SOURCE_TYPE_ANALOG_INPUT;
   averageFuelConsumptionUnitOfMeasure_ = FuelConsumptionUnitOfMeasureTypeProto.FuelConsumptionUnitOfMeasureType.FUEL_CONSUMPTION_UNIT_OF_MEASURE_LITERS_PER_100_KM;
   fuelLevel_ = 0F;
   currentFuelConsumption_ = 0F;
   averageFuelConsumption_ = 0F;
   ambientTemperature_ = 0;
   altitudeMeters_ = 0;
   tripDistanceMeters_ = 0;
   tripDurationSeconds_ = 0;
   accuracyPercentage_ = 0;
 }
 private byte memoizedIsInitialized = -1;
 public final boolean isInitialized() {
   byte isInitialized = memoizedIsInitialized;
   if (isInitialized == 1) return true;
   if (isInitialized == 0) return false;

   if (!hasHeader()) {
     memoizedIsInitialized = 0;
     return false;
   }
   if (!getHeader().isInitialized()) {
     memoizedIsInitialized = 0;
     return false;
   }
   memoizedIsInitialized = 1;
   return true;
 }

 public void writeTo(com.google.protobuf.CodedOutputStream output)
                     throws java.io.IOException {
   getSerializedSize();
   if (((bitField0_ & 0x00000001) == 0x00000001)) {
     output.writeMessage(1, header_);
   }
   if (((bitField0_ & 0x00000002) == 0x00000002)) {
     output.writeEnum(2, reason_.getNumber());
   }
   if (((bitField0_ & 0x00000004) == 0x00000004)) {
     output.writeEnum(3, fuelLevelSource_.getNumber());
   }
   if (((bitField0_ & 0x00000008) == 0x00000008)) {
     output.writeEnum(4, fuelLevelUnitOfMeasure_.getNumber());
   }
   if (((bitField0_ & 0x00000010) == 0x00000010)) {
     output.writeEnum(5, currentFuelConsumptionSource_.getNumber());
   }
   if (((bitField0_ & 0x00000020) == 0x00000020)) {
     output.writeEnum(6, currentFuelConsumptionUnitOfMeasure_.getNumber());
   }
   if (((bitField0_ & 0x00000040) == 0x00000040)) {
     output.writeEnum(7, averageFuelConsumptionSource_.getNumber());
   }
   if (((bitField0_ & 0x00000080) == 0x00000080)) {
     output.writeEnum(8, averageFuelConsumptionUnitOfMeasure_.getNumber());
   }
   if (((bitField0_ & 0x00000100) == 0x00000100)) {
     output.writeFloat(9, fuelLevel_);
   }
   if (((bitField0_ & 0x00000200) == 0x00000200)) {
     output.writeFloat(10, currentFuelConsumption_);
   }
   if (((bitField0_ & 0x00000400) == 0x00000400)) {
     output.writeFloat(11, averageFuelConsumption_);
   }
   if (((bitField0_ & 0x00000800) == 0x00000800)) {
     output.writeSInt32(12, ambientTemperature_);
   }
   if (((bitField0_ & 0x00001000) == 0x00001000)) {
     output.writeInt32(13, altitudeMeters_);
   }
   if (((bitField0_ & 0x00002000) == 0x00002000)) {
     output.writeUInt32(14, tripDistanceMeters_);
   }
   if (((bitField0_ & 0x00004000) == 0x00004000)) {
     output.writeUInt32(15, tripDurationSeconds_);
   }
   if (((bitField0_ & 0x00008000) == 0x00008000)) {
     output.writeUInt32(16, accuracyPercentage_);
   }
   getUnknownFields().writeTo(output);
 }

 private int memoizedSerializedSize = -1;
 public int getSerializedSize() {
   int size = memoizedSerializedSize;
   if (size != -1) return size;

   size = 0;
   if (((bitField0_ & 0x00000001) == 0x00000001)) {
     size += com.google.protobuf.CodedOutputStream
       .computeMessageSize(1, header_);
   }
   if (((bitField0_ & 0x00000002) == 0x00000002)) {
     size += com.google.protobuf.CodedOutputStream
       .computeEnumSize(2, reason_.getNumber());
   }
   if (((bitField0_ & 0x00000004) == 0x00000004)) {
     size += com.google.protobuf.CodedOutputStream
       .computeEnumSize(3, fuelLevelSource_.getNumber());
   }
   if (((bitField0_ & 0x00000008) == 0x00000008)) {
     size += com.google.protobuf.CodedOutputStream
       .computeEnumSize(4, fuelLevelUnitOfMeasure_.getNumber());
   }
   if (((bitField0_ & 0x00000010) == 0x00000010)) {
     size += com.google.protobuf.CodedOutputStream
       .computeEnumSize(5, currentFuelConsumptionSource_.getNumber());
   }
   if (((bitField0_ & 0x00000020) == 0x00000020)) {
     size += com.google.protobuf.CodedOutputStream
       .computeEnumSize(6, currentFuelConsumptionUnitOfMeasure_.getNumber());
   }
   if (((bitField0_ & 0x00000040) == 0x00000040)) {
     size += com.google.protobuf.CodedOutputStream
       .computeEnumSize(7, averageFuelConsumptionSource_.getNumber());
   }
   if (((bitField0_ & 0x00000080) == 0x00000080)) {
     size += com.google.protobuf.CodedOutputStream
       .computeEnumSize(8, averageFuelConsumptionUnitOfMeasure_.getNumber());
   }
   if (((bitField0_ & 0x00000100) == 0x00000100)) {
     size += com.google.protobuf.CodedOutputStream
       .computeFloatSize(9, fuelLevel_);
   }
   if (((bitField0_ & 0x00000200) == 0x00000200)) {
     size += com.google.protobuf.CodedOutputStream
       .computeFloatSize(10, currentFuelConsumption_);
   }
   if (((bitField0_ & 0x00000400) == 0x00000400)) {
     size += com.google.protobuf.CodedOutputStream
       .computeFloatSize(11, averageFuelConsumption_);
   }
   if (((bitField0_ & 0x00000800) == 0x00000800)) {
     size += com.google.protobuf.CodedOutputStream
       .computeSInt32Size(12, ambientTemperature_);
   }
   if (((bitField0_ & 0x00001000) == 0x00001000)) {
     size += com.google.protobuf.CodedOutputStream
       .computeInt32Size(13, altitudeMeters_);
   }
   if (((bitField0_ & 0x00002000) == 0x00002000)) {
     size += com.google.protobuf.CodedOutputStream
       .computeUInt32Size(14, tripDistanceMeters_);
   }
   if (((bitField0_ & 0x00004000) == 0x00004000)) {
     size += com.google.protobuf.CodedOutputStream
       .computeUInt32Size(15, tripDurationSeconds_);
   }
   if (((bitField0_ & 0x00008000) == 0x00008000)) {
     size += com.google.protobuf.CodedOutputStream
       .computeUInt32Size(16, accuracyPercentage_);
   }
   size += getUnknownFields().getSerializedSize();
   memoizedSerializedSize = size;
   return size;
 }

 private static final long serialVersionUID = 0L;
 @java.lang.Override
 protected java.lang.Object writeReplace()
     throws java.io.ObjectStreamException {
   return super.writeReplace();
 }

 public static ConsolidatedFuelDataProto.ConsolidatedFuelData parseFrom(
     com.google.protobuf.ByteString data)
     throws com.google.protobuf.InvalidProtocolBufferException {
   return PARSER.parseFrom(data);
 }
 public static ConsolidatedFuelDataProto.ConsolidatedFuelData parseFrom(
     com.google.protobuf.ByteString data,
     com.google.protobuf.ExtensionRegistryLite extensionRegistry)
     throws com.google.protobuf.InvalidProtocolBufferException {
   return PARSER.parseFrom(data, extensionRegistry);
 }
 public static ConsolidatedFuelDataProto.ConsolidatedFuelData parseFrom(byte[] data)
     throws com.google.protobuf.InvalidProtocolBufferException {
   return PARSER.parseFrom(data);
 }
 public static ConsolidatedFuelDataProto.ConsolidatedFuelData parseFrom(
     byte[] data,
     com.google.protobuf.ExtensionRegistryLite extensionRegistry)
     throws com.google.protobuf.InvalidProtocolBufferException {
   return PARSER.parseFrom(data, extensionRegistry);
 }
 public static ConsolidatedFuelDataProto.ConsolidatedFuelData parseFrom(java.io.InputStream input)
     throws java.io.IOException {
   return PARSER.parseFrom(input);
 }
 public static ConsolidatedFuelDataProto.ConsolidatedFuelData parseFrom(
     java.io.InputStream input,
     com.google.protobuf.ExtensionRegistryLite extensionRegistry)
     throws java.io.IOException {
   return PARSER.parseFrom(input, extensionRegistry);
 }
 public static ConsolidatedFuelDataProto.ConsolidatedFuelData parseDelimitedFrom(java.io.InputStream input)
     throws java.io.IOException {
   return PARSER.parseDelimitedFrom(input);
 }
 public static ConsolidatedFuelDataProto.ConsolidatedFuelData parseDelimitedFrom(
     java.io.InputStream input,
     com.google.protobuf.ExtensionRegistryLite extensionRegistry)
     throws java.io.IOException {
   return PARSER.parseDelimitedFrom(input, extensionRegistry);
 }
 public static ConsolidatedFuelDataProto.ConsolidatedFuelData parseFrom(
     com.google.protobuf.CodedInputStream input)
     throws java.io.IOException {
   return PARSER.parseFrom(input);
 }
 public static ConsolidatedFuelDataProto.ConsolidatedFuelData parseFrom(
     com.google.protobuf.CodedInputStream input,
     com.google.protobuf.ExtensionRegistryLite extensionRegistry)
     throws java.io.IOException {
   return PARSER.parseFrom(input, extensionRegistry);
 }

 public static Builder newBuilder() { return Builder.create(); }
 public Builder newBuilderForType() { return newBuilder(); }
 public static Builder newBuilder(ConsolidatedFuelDataProto.ConsolidatedFuelData prototype) {
   return newBuilder().mergeFrom(prototype);
 }
 public Builder toBuilder() { return newBuilder(this); }

 @java.lang.Override
 protected Builder newBuilderForType(
     com.google.protobuf.GeneratedMessage.BuilderParent parent) {
   Builder builder = new Builder(parent);
   return builder;
 }
 /**
  * Protobuf type {@code ConsolidatedFuelData}
  *
  * <pre>
  * Consolidated fuel data
  * </pre>
  */
 public static final class Builder extends
     com.google.protobuf.GeneratedMessage.Builder<Builder> implements
     // @@protoc_insertion_point(builder_implements:ConsolidatedFuelData)
     ConsolidatedFuelDataProto.ConsolidatedFuelDataOrBuilder {
   public static final com.google.protobuf.Descriptors.Descriptor
       getDescriptor() {
     return ConsolidatedFuelDataProto.internal_static_ConsolidatedFuelData_descriptor;
   }

   protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
       internalGetFieldAccessorTable() {
     return ConsolidatedFuelDataProto.internal_static_ConsolidatedFuelData_fieldAccessorTable
         .ensureFieldAccessorsInitialized(
             ConsolidatedFuelDataProto.ConsolidatedFuelData.class, ConsolidatedFuelDataProto.ConsolidatedFuelData.Builder.class);
   }

   // Construct using ConsolidatedFuelDataProto.ConsolidatedFuelData.newBuilder()
   private Builder() {
     maybeForceBuilderInitialization();
   }

   private Builder(
       com.google.protobuf.GeneratedMessage.BuilderParent parent) {
     super(parent);
     maybeForceBuilderInitialization();
   }
   private void maybeForceBuilderInitialization() {
     if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
       getHeaderFieldBuilder();
     }
   }
   private static Builder create() {
     return new Builder();
   }

   public Builder clear() {
     super.clear();
     if (headerBuilder_ == null) {
       header_ = EventHeaderProto.EventHeader.getDefaultInstance();
     } else {
       headerBuilder_.clear();
     }
     bitField0_ = (bitField0_ & ~0x00000001);
     reason_ = ConsolidatedFuelReasonTypeProto.ConsolidatedFuelReasonType.CONSOLIDATED_FUEL_REASON_PERIODIC;
     bitField0_ = (bitField0_ & ~0x00000002);
     fuelLevelSource_ = FuelLevelSourceTypeProto.FuelLevelSourceType.FUEL_LEVEL_SOURCE_TYPE_ANALOG_INPUT;
     bitField0_ = (bitField0_ & ~0x00000004);
     fuelLevelUnitOfMeasure_ = FuelLevelUnitOfMeasureTypeProto.FuelLevelUnitOfMeasureType.FUEL_LEVEL_UNIT_OF_MEASURE_PERCENTAGE;
     bitField0_ = (bitField0_ & ~0x00000008);
     currentFuelConsumptionSource_ = FuelConsumptionSourceTypeProto.FuelConsumptionSourceType.FUEL_CONSUMPTION_SOURCE_TYPE_ANALOG_INPUT;
     bitField0_ = (bitField0_ & ~0x00000010);
     currentFuelConsumptionUnitOfMeasure_ = FuelConsumptionUnitOfMeasureTypeProto.FuelConsumptionUnitOfMeasureType.FUEL_CONSUMPTION_UNIT_OF_MEASURE_LITERS_PER_100_KM;
     bitField0_ = (bitField0_ & ~0x00000020);
     averageFuelConsumptionSource_ = FuelConsumptionSourceTypeProto.FuelConsumptionSourceType.FUEL_CONSUMPTION_SOURCE_TYPE_ANALOG_INPUT;
     bitField0_ = (bitField0_ & ~0x00000040);
     averageFuelConsumptionUnitOfMeasure_ = FuelConsumptionUnitOfMeasureTypeProto.FuelConsumptionUnitOfMeasureType.FUEL_CONSUMPTION_UNIT_OF_MEASURE_LITERS_PER_100_KM;
     bitField0_ = (bitField0_ & ~0x00000080);
     fuelLevel_ = 0F;
     bitField0_ = (bitField0_ & ~0x00000100);
     currentFuelConsumption_ = 0F;
     bitField0_ = (bitField0_ & ~0x00000200);
     averageFuelConsumption_ = 0F;
     bitField0_ = (bitField0_ & ~0x00000400);
     ambientTemperature_ = 0;
     bitField0_ = (bitField0_ & ~0x00000800);
     altitudeMeters_ = 0;
     bitField0_ = (bitField0_ & ~0x00001000);
     tripDistanceMeters_ = 0;
     bitField0_ = (bitField0_ & ~0x00002000);
     tripDurationSeconds_ = 0;
     bitField0_ = (bitField0_ & ~0x00004000);
     accuracyPercentage_ = 0;
     bitField0_ = (bitField0_ & ~0x00008000);
     return this;
   }

   public Builder clone() {
     return create().mergeFrom(buildPartial());
   }

   public com.google.protobuf.Descriptors.Descriptor
       getDescriptorForType() {
     return ConsolidatedFuelDataProto.internal_static_ConsolidatedFuelData_descriptor;
   }

   public ConsolidatedFuelDataProto.ConsolidatedFuelData getDefaultInstanceForType() {
     return ConsolidatedFuelDataProto.ConsolidatedFuelData.getDefaultInstance();
   }

   public ConsolidatedFuelDataProto.ConsolidatedFuelData build() {
     ConsolidatedFuelDataProto.ConsolidatedFuelData result = buildPartial();
     if (!result.isInitialized()) {
       throw newUninitializedMessageException(result);
     }
     return result;
   }

   public ConsolidatedFuelDataProto.ConsolidatedFuelData buildPartial() {
     ConsolidatedFuelDataProto.ConsolidatedFuelData result = new ConsolidatedFuelDataProto.ConsolidatedFuelData(this);
     int from_bitField0_ = bitField0_;
     int to_bitField0_ = 0;
     if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
       to_bitField0_ |= 0x00000001;
     }
     if (headerBuilder_ == null) {
       result.header_ = header_;
     } else {
       result.header_ = headerBuilder_.build();
     }
     if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
       to_bitField0_ |= 0x00000002;
     }
     result.reason_ = reason_;
     if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
       to_bitField0_ |= 0x00000004;
     }
     result.fuelLevelSource_ = fuelLevelSource_;
     if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
       to_bitField0_ |= 0x00000008;
     }
     result.fuelLevelUnitOfMeasure_ = fuelLevelUnitOfMeasure_;
     if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
       to_bitField0_ |= 0x00000010;
     }
     result.currentFuelConsumptionSource_ = currentFuelConsumptionSource_;
     if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
       to_bitField0_ |= 0x00000020;
     }
     result.currentFuelConsumptionUnitOfMeasure_ = currentFuelConsumptionUnitOfMeasure_;
     if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
       to_bitField0_ |= 0x00000040;
     }
     result.averageFuelConsumptionSource_ = averageFuelConsumptionSource_;
     if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
       to_bitField0_ |= 0x00000080;
     }
     result.averageFuelConsumptionUnitOfMeasure_ = averageFuelConsumptionUnitOfMeasure_;
     if (((from_bitField0_ & 0x00000100) == 0x00000100)) {
       to_bitField0_ |= 0x00000100;
     }
     result.fuelLevel_ = fuelLevel_;
     if (((from_bitField0_ & 0x00000200) == 0x00000200)) {
       to_bitField0_ |= 0x00000200;
     }
     result.currentFuelConsumption_ = currentFuelConsumption_;
     if (((from_bitField0_ & 0x00000400) == 0x00000400)) {
       to_bitField0_ |= 0x00000400;
     }
     result.averageFuelConsumption_ = averageFuelConsumption_;
     if (((from_bitField0_ & 0x00000800) == 0x00000800)) {
       to_bitField0_ |= 0x00000800;
     }
     result.ambientTemperature_ = ambientTemperature_;
     if (((from_bitField0_ & 0x00001000) == 0x00001000)) {
       to_bitField0_ |= 0x00001000;
     }
     result.altitudeMeters_ = altitudeMeters_;
     if (((from_bitField0_ & 0x00002000) == 0x00002000)) {
       to_bitField0_ |= 0x00002000;
     }
     result.tripDistanceMeters_ = tripDistanceMeters_;
     if (((from_bitField0_ & 0x00004000) == 0x00004000)) {
       to_bitField0_ |= 0x00004000;
     }
     result.tripDurationSeconds_ = tripDurationSeconds_;
     if (((from_bitField0_ & 0x00008000) == 0x00008000)) {
       to_bitField0_ |= 0x00008000;
     }
     result.accuracyPercentage_ = accuracyPercentage_;
     result.bitField0_ = to_bitField0_;
     onBuilt();
     return result;
   }

   public Builder mergeFrom(com.google.protobuf.Message other) {
     if (other instanceof ConsolidatedFuelDataProto.ConsolidatedFuelData) {
       return mergeFrom((ConsolidatedFuelDataProto.ConsolidatedFuelData)other);
     } else {
       super.mergeFrom(other);
       return this;
     }
   }

   public Builder mergeFrom(ConsolidatedFuelDataProto.ConsolidatedFuelData other) {
     if (other == ConsolidatedFuelDataProto.ConsolidatedFuelData.getDefaultInstance()) return this;
     if (other.hasHeader()) {
       mergeHeader(other.getHeader());
     }
     if (other.hasReason()) {
       setReason(other.getReason());
     }
     if (other.hasFuelLevelSource()) {
       setFuelLevelSource(other.getFuelLevelSource());
     }
     if (other.hasFuelLevelUnitOfMeasure()) {
       setFuelLevelUnitOfMeasure(other.getFuelLevelUnitOfMeasure());
     }
     if (other.hasCurrentFuelConsumptionSource()) {
       setCurrentFuelConsumptionSource(other.getCurrentFuelConsumptionSource());
     }
     if (other.hasCurrentFuelConsumptionUnitOfMeasure()) {
       setCurrentFuelConsumptionUnitOfMeasure(other.getCurrentFuelConsumptionUnitOfMeasure());
     }
     if (other.hasAverageFuelConsumptionSource()) {
       setAverageFuelConsumptionSource(other.getAverageFuelConsumptionSource());
     }
     if (other.hasAverageFuelConsumptionUnitOfMeasure()) {
       setAverageFuelConsumptionUnitOfMeasure(other.getAverageFuelConsumptionUnitOfMeasure());
     }
     if (other.hasFuelLevel()) {
       setFuelLevel(other.getFuelLevel());
     }
     if (other.hasCurrentFuelConsumption()) {
       setCurrentFuelConsumption(other.getCurrentFuelConsumption());
     }
     if (other.hasAverageFuelConsumption()) {
       setAverageFuelConsumption(other.getAverageFuelConsumption());
     }
     if (other.hasAmbientTemperature()) {
       setAmbientTemperature(other.getAmbientTemperature());
     }
     if (other.hasAltitudeMeters()) {
       setAltitudeMeters(other.getAltitudeMeters());
     }
     if (other.hasTripDistanceMeters()) {
       setTripDistanceMeters(other.getTripDistanceMeters());
     }
     if (other.hasTripDurationSeconds()) {
       setTripDurationSeconds(other.getTripDurationSeconds());
     }
     if (other.hasAccuracyPercentage()) {
       setAccuracyPercentage(other.getAccuracyPercentage());
     }
     this.mergeUnknownFields(other.getUnknownFields());
     return this;
   }

   public final boolean isInitialized() {
     if (!hasHeader()) {
       
       return false;
     }
     if (!getHeader().isInitialized()) {
       
       return false;
     }
     return true;
   }

   public Builder mergeFrom(
       com.google.protobuf.CodedInputStream input,
       com.google.protobuf.ExtensionRegistryLite extensionRegistry)
       throws java.io.IOException {
     ConsolidatedFuelDataProto.ConsolidatedFuelData parsedMessage = null;
     try {
       parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
     } catch (com.google.protobuf.InvalidProtocolBufferException e) {
       parsedMessage = (ConsolidatedFuelDataProto.ConsolidatedFuelData) e.getUnfinishedMessage();
       throw e;
     } finally {
       if (parsedMessage != null) {
         mergeFrom(parsedMessage);
       }
     }
     return this;
   }
   private int bitField0_;

   private EventHeaderProto.EventHeader header_ = EventHeaderProto.EventHeader.getDefaultInstance();
   private com.google.protobuf.SingleFieldBuilder<
       EventHeaderProto.EventHeader, EventHeaderProto.EventHeader.Builder, EventHeaderProto.EventHeaderOrBuilder> headerBuilder_;
   /**
    * <code>required .EventHeader header = 1;</code>
    */
   public boolean hasHeader() {
     return ((bitField0_ & 0x00000001) == 0x00000001);
   }
   /**
    * <code>required .EventHeader header = 1;</code>
    */
   public EventHeaderProto.EventHeader getHeader() {
     if (headerBuilder_ == null) {
       return header_;
     } else {
       return headerBuilder_.getMessage();
     }
   }
   /**
    * <code>required .EventHeader header = 1;</code>
    */
   public Builder setHeader(EventHeaderProto.EventHeader value) {
     if (headerBuilder_ == null) {
       if (value == null) {
         throw new NullPointerException();
       }
       header_ = value;
       onChanged();
     } else {
       headerBuilder_.setMessage(value);
     }
     bitField0_ |= 0x00000001;
     return this;
   }
   /**
    * <code>required .EventHeader header = 1;</code>
    */
   public Builder setHeader(
       EventHeaderProto.EventHeader.Builder builderForValue) {
     if (headerBuilder_ == null) {
       header_ = builderForValue.build();
       onChanged();
     } else {
       headerBuilder_.setMessage(builderForValue.build());
     }
     bitField0_ |= 0x00000001;
     return this;
   }
   /**
    * <code>required .EventHeader header = 1;</code>
    */
   public Builder mergeHeader(EventHeaderProto.EventHeader value) {
     if (headerBuilder_ == null) {
       if (((bitField0_ & 0x00000001) == 0x00000001) &&
           header_ != EventHeaderProto.EventHeader.getDefaultInstance()) {
         header_ =
           EventHeaderProto.EventHeader.newBuilder(header_).mergeFrom(value).buildPartial();
       } else {
         header_ = value;
       }
       onChanged();
     } else {
       headerBuilder_.mergeFrom(value);
     }
     bitField0_ |= 0x00000001;
     return this;
   }
   /**
    * <code>required .EventHeader header = 1;</code>
    */
   public Builder clearHeader() {
     if (headerBuilder_ == null) {
       header_ = EventHeaderProto.EventHeader.getDefaultInstance();
       onChanged();
     } else {
       headerBuilder_.clear();
     }
     bitField0_ = (bitField0_ & ~0x00000001);
     return this;
   }
   /**
    * <code>required .EventHeader header = 1;</code>
    */
   public EventHeaderProto.EventHeader.Builder getHeaderBuilder() {
     bitField0_ |= 0x00000001;
     onChanged();
     return getHeaderFieldBuilder().getBuilder();
   }
   /**
    * <code>required .EventHeader header = 1;</code>
    */
   public EventHeaderProto.EventHeaderOrBuilder getHeaderOrBuilder() {
     if (headerBuilder_ != null) {
       return headerBuilder_.getMessageOrBuilder();
     } else {
       return header_;
     }
   }
   /**
    * <code>required .EventHeader header = 1;</code>
    */
   private com.google.protobuf.SingleFieldBuilder<
       EventHeaderProto.EventHeader, EventHeaderProto.EventHeader.Builder, EventHeaderProto.EventHeaderOrBuilder> 
       getHeaderFieldBuilder() {
     if (headerBuilder_ == null) {
       headerBuilder_ = new com.google.protobuf.SingleFieldBuilder<
           EventHeaderProto.EventHeader, EventHeaderProto.EventHeader.Builder, EventHeaderProto.EventHeaderOrBuilder>(
               getHeader(),
               getParentForChildren(),
               isClean());
       header_ = null;
     }
     return headerBuilder_;
   }

   private ConsolidatedFuelReasonTypeProto.ConsolidatedFuelReasonType reason_ = ConsolidatedFuelReasonTypeProto.ConsolidatedFuelReasonType.CONSOLIDATED_FUEL_REASON_PERIODIC;
   /**
    * <code>optional .ConsolidatedFuelReasonType reason = 2 [default = CONSOLIDATED_FUEL_REASON_PERIODIC];</code>
    *
    * <pre>
    * Reason for event being sent
    * </pre>
    */
   public boolean hasReason() {
     return ((bitField0_ & 0x00000002) == 0x00000002);
   }
   /**
    * <code>optional .ConsolidatedFuelReasonType reason = 2 [default = CONSOLIDATED_FUEL_REASON_PERIODIC];</code>
    *
    * <pre>
    * Reason for event being sent
    * </pre>
    */
   public ConsolidatedFuelReasonTypeProto.ConsolidatedFuelReasonType getReason() {
     return reason_;
   }
   /**
    * <code>optional .ConsolidatedFuelReasonType reason = 2 [default = CONSOLIDATED_FUEL_REASON_PERIODIC];</code>
    *
    * <pre>
    * Reason for event being sent
    * </pre>
    */
   public Builder setReason(ConsolidatedFuelReasonTypeProto.ConsolidatedFuelReasonType value) {
     if (value == null) {
       throw new NullPointerException();
     }
     bitField0_ |= 0x00000002;
     reason_ = value;
     onChanged();
     return this;
   }
   /**
    * <code>optional .ConsolidatedFuelReasonType reason = 2 [default = CONSOLIDATED_FUEL_REASON_PERIODIC];</code>
    *
    * <pre>
    * Reason for event being sent
    * </pre>
    */
   public Builder clearReason() {
     bitField0_ = (bitField0_ & ~0x00000002);
     reason_ = ConsolidatedFuelReasonTypeProto.ConsolidatedFuelReasonType.CONSOLIDATED_FUEL_REASON_PERIODIC;
     onChanged();
     return this;
   }

   private FuelLevelSourceTypeProto.FuelLevelSourceType fuelLevelSource_ = FuelLevelSourceTypeProto.FuelLevelSourceType.FUEL_LEVEL_SOURCE_TYPE_ANALOG_INPUT;
   /**
    * <code>optional .FuelLevelSourceType fuel_level_source = 3 [default = FUEL_LEVEL_SOURCE_TYPE_ANALOG_INPUT];</code>
    *
    * <pre>
    * Fuel level source
    * </pre>
    */
   public boolean hasFuelLevelSource() {
     return ((bitField0_ & 0x00000004) == 0x00000004);
   }
   /**
    * <code>optional .FuelLevelSourceType fuel_level_source = 3 [default = FUEL_LEVEL_SOURCE_TYPE_ANALOG_INPUT];</code>
    *
    * <pre>
    * Fuel level source
    * </pre>
    */
   public FuelLevelSourceTypeProto.FuelLevelSourceType getFuelLevelSource() {
     return fuelLevelSource_;
   }
   /**
    * <code>optional .FuelLevelSourceType fuel_level_source = 3 [default = FUEL_LEVEL_SOURCE_TYPE_ANALOG_INPUT];</code>
    *
    * <pre>
    * Fuel level source
    * </pre>
    */
   public Builder setFuelLevelSource(FuelLevelSourceTypeProto.FuelLevelSourceType value) {
     if (value == null) {
       throw new NullPointerException();
     }
     bitField0_ |= 0x00000004;
     fuelLevelSource_ = value;
     onChanged();
     return this;
   }
   /**
    * <code>optional .FuelLevelSourceType fuel_level_source = 3 [default = FUEL_LEVEL_SOURCE_TYPE_ANALOG_INPUT];</code>
    *
    * <pre>
    * Fuel level source
    * </pre>
    */
   public Builder clearFuelLevelSource() {
     bitField0_ = (bitField0_ & ~0x00000004);
     fuelLevelSource_ = FuelLevelSourceTypeProto.FuelLevelSourceType.FUEL_LEVEL_SOURCE_TYPE_ANALOG_INPUT;
     onChanged();
     return this;
   }

   private FuelLevelUnitOfMeasureTypeProto.FuelLevelUnitOfMeasureType fuelLevelUnitOfMeasure_ = FuelLevelUnitOfMeasureTypeProto.FuelLevelUnitOfMeasureType.FUEL_LEVEL_UNIT_OF_MEASURE_PERCENTAGE;
   /**
    * <code>optional .FuelLevelUnitOfMeasureType fuel_level_unit_of_measure = 4 [default = FUEL_LEVEL_UNIT_OF_MEASURE_PERCENTAGE];</code>
    *
    * <pre>
    * Unit of measurement of the fuel level
    * </pre>
    */
   public boolean hasFuelLevelUnitOfMeasure() {
     return ((bitField0_ & 0x00000008) == 0x00000008);
   }
   /**
    * <code>optional .FuelLevelUnitOfMeasureType fuel_level_unit_of_measure = 4 [default = FUEL_LEVEL_UNIT_OF_MEASURE_PERCENTAGE];</code>
    *
    * <pre>
    * Unit of measurement of the fuel level
    * </pre>
    */
   public FuelLevelUnitOfMeasureTypeProto.FuelLevelUnitOfMeasureType getFuelLevelUnitOfMeasure() {
     return fuelLevelUnitOfMeasure_;
   }
   /**
    * <code>optional .FuelLevelUnitOfMeasureType fuel_level_unit_of_measure = 4 [default = FUEL_LEVEL_UNIT_OF_MEASURE_PERCENTAGE];</code>
    *
    * <pre>
    * Unit of measurement of the fuel level
    * </pre>
    */
   public Builder setFuelLevelUnitOfMeasure(FuelLevelUnitOfMeasureTypeProto.FuelLevelUnitOfMeasureType value) {
     if (value == null) {
       throw new NullPointerException();
     }
     bitField0_ |= 0x00000008;
     fuelLevelUnitOfMeasure_ = value;
     onChanged();
     return this;
   }
   /**
    * <code>optional .FuelLevelUnitOfMeasureType fuel_level_unit_of_measure = 4 [default = FUEL_LEVEL_UNIT_OF_MEASURE_PERCENTAGE];</code>
    *
    * <pre>
    * Unit of measurement of the fuel level
    * </pre>
    */
   public Builder clearFuelLevelUnitOfMeasure() {
     bitField0_ = (bitField0_ & ~0x00000008);
     fuelLevelUnitOfMeasure_ = FuelLevelUnitOfMeasureTypeProto.FuelLevelUnitOfMeasureType.FUEL_LEVEL_UNIT_OF_MEASURE_PERCENTAGE;
     onChanged();
     return this;
   }

   private FuelConsumptionSourceTypeProto.FuelConsumptionSourceType currentFuelConsumptionSource_ = FuelConsumptionSourceTypeProto.FuelConsumptionSourceType.FUEL_CONSUMPTION_SOURCE_TYPE_ANALOG_INPUT;
   /**
    * <code>optional .FuelConsumptionSourceType current_fuel_consumption_source = 5 [default = FUEL_CONSUMPTION_SOURCE_TYPE_ANALOG_INPUT];</code>
    *
    * <pre>
    * Current fuel consumption source
    * </pre>
    */
   public boolean hasCurrentFuelConsumptionSource() {
     return ((bitField0_ & 0x00000010) == 0x00000010);
   }
   /**
    * <code>optional .FuelConsumptionSourceType current_fuel_consumption_source = 5 [default = FUEL_CONSUMPTION_SOURCE_TYPE_ANALOG_INPUT];</code>
    *
    * <pre>
    * Current fuel consumption source
    * </pre>
    */
   public FuelConsumptionSourceTypeProto.FuelConsumptionSourceType getCurrentFuelConsumptionSource() {
     return currentFuelConsumptionSource_;
   }
   /**
    * <code>optional .FuelConsumptionSourceType current_fuel_consumption_source = 5 [default = FUEL_CONSUMPTION_SOURCE_TYPE_ANALOG_INPUT];</code>
    *
    * <pre>
    * Current fuel consumption source
    * </pre>
    */
   public Builder setCurrentFuelConsumptionSource(FuelConsumptionSourceTypeProto.FuelConsumptionSourceType value) {
     if (value == null) {
       throw new NullPointerException();
     }
     bitField0_ |= 0x00000010;
     currentFuelConsumptionSource_ = value;
     onChanged();
     return this;
   }
   /**
    * <code>optional .FuelConsumptionSourceType current_fuel_consumption_source = 5 [default = FUEL_CONSUMPTION_SOURCE_TYPE_ANALOG_INPUT];</code>
    *
    * <pre>
    * Current fuel consumption source
    * </pre>
    */
   public Builder clearCurrentFuelConsumptionSource() {
     bitField0_ = (bitField0_ & ~0x00000010);
     currentFuelConsumptionSource_ = FuelConsumptionSourceTypeProto.FuelConsumptionSourceType.FUEL_CONSUMPTION_SOURCE_TYPE_ANALOG_INPUT;
     onChanged();
     return this;
   }

   private FuelConsumptionUnitOfMeasureTypeProto.FuelConsumptionUnitOfMeasureType currentFuelConsumptionUnitOfMeasure_ = FuelConsumptionUnitOfMeasureTypeProto.FuelConsumptionUnitOfMeasureType.FUEL_CONSUMPTION_UNIT_OF_MEASURE_LITERS_PER_100_KM;
   /**
    * <code>optional .FuelConsumptionUnitOfMeasureType current_fuel_consumption_unit_of_measure = 6 [default = FUEL_CONSUMPTION_UNIT_OF_MEASURE_LITERS_PER_100_KM];</code>
    *
    * <pre>
    * Unit of measurement of the current fuel consumption
    * </pre>
    */
   public boolean hasCurrentFuelConsumptionUnitOfMeasure() {
     return ((bitField0_ & 0x00000020) == 0x00000020);
   }
   /**
    * <code>optional .FuelConsumptionUnitOfMeasureType current_fuel_consumption_unit_of_measure = 6 [default = FUEL_CONSUMPTION_UNIT_OF_MEASURE_LITERS_PER_100_KM];</code>
    *
    * <pre>
    * Unit of measurement of the current fuel consumption
    * </pre>
    */
   public FuelConsumptionUnitOfMeasureTypeProto.FuelConsumptionUnitOfMeasureType getCurrentFuelConsumptionUnitOfMeasure() {
     return currentFuelConsumptionUnitOfMeasure_;
   }
   /**
    * <code>optional .FuelConsumptionUnitOfMeasureType current_fuel_consumption_unit_of_measure = 6 [default = FUEL_CONSUMPTION_UNIT_OF_MEASURE_LITERS_PER_100_KM];</code>
    *
    * <pre>
    * Unit of measurement of the current fuel consumption
    * </pre>
    */
   public Builder setCurrentFuelConsumptionUnitOfMeasure(FuelConsumptionUnitOfMeasureTypeProto.FuelConsumptionUnitOfMeasureType value) {
     if (value == null) {
       throw new NullPointerException();
     }
     bitField0_ |= 0x00000020;
     currentFuelConsumptionUnitOfMeasure_ = value;
     onChanged();
     return this;
   }
   /**
    * <code>optional .FuelConsumptionUnitOfMeasureType current_fuel_consumption_unit_of_measure = 6 [default = FUEL_CONSUMPTION_UNIT_OF_MEASURE_LITERS_PER_100_KM];</code>
    *
    * <pre>
    * Unit of measurement of the current fuel consumption
    * </pre>
    */
   public Builder clearCurrentFuelConsumptionUnitOfMeasure() {
     bitField0_ = (bitField0_ & ~0x00000020);
     currentFuelConsumptionUnitOfMeasure_ = FuelConsumptionUnitOfMeasureTypeProto.FuelConsumptionUnitOfMeasureType.FUEL_CONSUMPTION_UNIT_OF_MEASURE_LITERS_PER_100_KM;
     onChanged();
     return this;
   }

   private FuelConsumptionSourceTypeProto.FuelConsumptionSourceType averageFuelConsumptionSource_ = FuelConsumptionSourceTypeProto.FuelConsumptionSourceType.FUEL_CONSUMPTION_SOURCE_TYPE_ANALOG_INPUT;
   /**
    * <code>optional .FuelConsumptionSourceType average_fuel_consumption_source = 7 [default = FUEL_CONSUMPTION_SOURCE_TYPE_ANALOG_INPUT];</code>
    *
    * <pre>
    * Average fuel consumption source
    * </pre>
    */
   public boolean hasAverageFuelConsumptionSource() {
     return ((bitField0_ & 0x00000040) == 0x00000040);
   }
   /**
    * <code>optional .FuelConsumptionSourceType average_fuel_consumption_source = 7 [default = FUEL_CONSUMPTION_SOURCE_TYPE_ANALOG_INPUT];</code>
    *
    * <pre>
    * Average fuel consumption source
    * </pre>
    */
   public FuelConsumptionSourceTypeProto.FuelConsumptionSourceType getAverageFuelConsumptionSource() {
     return averageFuelConsumptionSource_;
   }
   /**
    * <code>optional .FuelConsumptionSourceType average_fuel_consumption_source = 7 [default = FUEL_CONSUMPTION_SOURCE_TYPE_ANALOG_INPUT];</code>
    *
    * <pre>
    * Average fuel consumption source
    * </pre>
    */
   public Builder setAverageFuelConsumptionSource(FuelConsumptionSourceTypeProto.FuelConsumptionSourceType value) {
     if (value == null) {
       throw new NullPointerException();
     }
     bitField0_ |= 0x00000040;
     averageFuelConsumptionSource_ = value;
     onChanged();
     return this;
   }
   /**
    * <code>optional .FuelConsumptionSourceType average_fuel_consumption_source = 7 [default = FUEL_CONSUMPTION_SOURCE_TYPE_ANALOG_INPUT];</code>
    *
    * <pre>
    * Average fuel consumption source
    * </pre>
    */
   public Builder clearAverageFuelConsumptionSource() {
     bitField0_ = (bitField0_ & ~0x00000040);
     averageFuelConsumptionSource_ = FuelConsumptionSourceTypeProto.FuelConsumptionSourceType.FUEL_CONSUMPTION_SOURCE_TYPE_ANALOG_INPUT;
     onChanged();
     return this;
   }

   private FuelConsumptionUnitOfMeasureTypeProto.FuelConsumptionUnitOfMeasureType averageFuelConsumptionUnitOfMeasure_ = FuelConsumptionUnitOfMeasureTypeProto.FuelConsumptionUnitOfMeasureType.FUEL_CONSUMPTION_UNIT_OF_MEASURE_LITERS_PER_100_KM;
   /**
    * <code>optional .FuelConsumptionUnitOfMeasureType average_fuel_consumption_unit_of_measure = 8 [default = FUEL_CONSUMPTION_UNIT_OF_MEASURE_LITERS_PER_100_KM];</code>
    *
    * <pre>
    * Unit of measurement of the average fuel consumption
    * </pre>
    */
   public boolean hasAverageFuelConsumptionUnitOfMeasure() {
     return ((bitField0_ & 0x00000080) == 0x00000080);
   }
   /**
    * <code>optional .FuelConsumptionUnitOfMeasureType average_fuel_consumption_unit_of_measure = 8 [default = FUEL_CONSUMPTION_UNIT_OF_MEASURE_LITERS_PER_100_KM];</code>
    *
    * <pre>
    * Unit of measurement of the average fuel consumption
    * </pre>
    */
   public FuelConsumptionUnitOfMeasureTypeProto.FuelConsumptionUnitOfMeasureType getAverageFuelConsumptionUnitOfMeasure() {
     return averageFuelConsumptionUnitOfMeasure_;
   }
   /**
    * <code>optional .FuelConsumptionUnitOfMeasureType average_fuel_consumption_unit_of_measure = 8 [default = FUEL_CONSUMPTION_UNIT_OF_MEASURE_LITERS_PER_100_KM];</code>
    *
    * <pre>
    * Unit of measurement of the average fuel consumption
    * </pre>
    */
   public Builder setAverageFuelConsumptionUnitOfMeasure(FuelConsumptionUnitOfMeasureTypeProto.FuelConsumptionUnitOfMeasureType value) {
     if (value == null) {
       throw new NullPointerException();
     }
     bitField0_ |= 0x00000080;
     averageFuelConsumptionUnitOfMeasure_ = value;
     onChanged();
     return this;
   }
   /**
    * <code>optional .FuelConsumptionUnitOfMeasureType average_fuel_consumption_unit_of_measure = 8 [default = FUEL_CONSUMPTION_UNIT_OF_MEASURE_LITERS_PER_100_KM];</code>
    *
    * <pre>
    * Unit of measurement of the average fuel consumption
    * </pre>
    */
   public Builder clearAverageFuelConsumptionUnitOfMeasure() {
     bitField0_ = (bitField0_ & ~0x00000080);
     averageFuelConsumptionUnitOfMeasure_ = FuelConsumptionUnitOfMeasureTypeProto.FuelConsumptionUnitOfMeasureType.FUEL_CONSUMPTION_UNIT_OF_MEASURE_LITERS_PER_100_KM;
     onChanged();
     return this;
   }

   private float fuelLevel_ ;
   /**
    * <code>optional float fuel_level = 9;</code>
    *
    * <pre>
    * Remaining fuel level indicator. Precision according to fuel_level_unit_of_measure.
    * </pre>
    */
   public boolean hasFuelLevel() {
     return ((bitField0_ & 0x00000100) == 0x00000100);
   }
   /**
    * <code>optional float fuel_level = 9;</code>
    *
    * <pre>
    * Remaining fuel level indicator. Precision according to fuel_level_unit_of_measure.
    * </pre>
    */
   public float getFuelLevel() {
     return fuelLevel_;
   }
   /**
    * <code>optional float fuel_level = 9;</code>
    *
    * <pre>
    * Remaining fuel level indicator. Precision according to fuel_level_unit_of_measure.
    * </pre>
    */
   public Builder setFuelLevel(float value) {
     bitField0_ |= 0x00000100;
     fuelLevel_ = value;
     onChanged();
     return this;
   }
   /**
    * <code>optional float fuel_level = 9;</code>
    *
    * <pre>
    * Remaining fuel level indicator. Precision according to fuel_level_unit_of_measure.
    * </pre>
    */
   public Builder clearFuelLevel() {
     bitField0_ = (bitField0_ & ~0x00000100);
     fuelLevel_ = 0F;
     onChanged();
     return this;
   }

   private float currentFuelConsumption_ ;
   /**
    * <code>optional float current_fuel_consumption = 10;</code>
    *
    * <pre>
    * Current fuel consumption. Precision according to current_fuel_consumption_unit_of_measure.
    * </pre>
    */
   public boolean hasCurrentFuelConsumption() {
     return ((bitField0_ & 0x00000200) == 0x00000200);
   }
   /**
    * <code>optional float current_fuel_consumption = 10;</code>
    *
    * <pre>
    * Current fuel consumption. Precision according to current_fuel_consumption_unit_of_measure.
    * </pre>
    */
   public float getCurrentFuelConsumption() {
     return currentFuelConsumption_;
   }
   /**
    * <code>optional float current_fuel_consumption = 10;</code>
    *
    * <pre>
    * Current fuel consumption. Precision according to current_fuel_consumption_unit_of_measure.
    * </pre>
    */
   public Builder setCurrentFuelConsumption(float value) {
     bitField0_ |= 0x00000200;
     currentFuelConsumption_ = value;
     onChanged();
     return this;
   }
   /**
    * <code>optional float current_fuel_consumption = 10;</code>
    *
    * <pre>
    * Current fuel consumption. Precision according to current_fuel_consumption_unit_of_measure.
    * </pre>
    */
   public Builder clearCurrentFuelConsumption() {
     bitField0_ = (bitField0_ & ~0x00000200);
     currentFuelConsumption_ = 0F;
     onChanged();
     return this;
   }

   private float averageFuelConsumption_ ;
   /**
    * <code>optional float average_fuel_consumption = 11;</code>
    *
    * <pre>
    * Average fuel consumption. Precision according to average_fuel_consumption_unit_of_measure.
    * </pre>
    */
   public boolean hasAverageFuelConsumption() {
     return ((bitField0_ & 0x00000400) == 0x00000400);
   }
   /**
    * <code>optional float average_fuel_consumption = 11;</code>
    *
    * <pre>
    * Average fuel consumption. Precision according to average_fuel_consumption_unit_of_measure.
    * </pre>
    */
   public float getAverageFuelConsumption() {
     return averageFuelConsumption_;
   }
   /**
    * <code>optional float average_fuel_consumption = 11;</code>
    *
    * <pre>
    * Average fuel consumption. Precision according to average_fuel_consumption_unit_of_measure.
    * </pre>
    */
   public Builder setAverageFuelConsumption(float value) {
     bitField0_ |= 0x00000400;
     averageFuelConsumption_ = value;
     onChanged();
     return this;
   }
   /**
    * <code>optional float average_fuel_consumption = 11;</code>
    *
    * <pre>
    * Average fuel consumption. Precision according to average_fuel_consumption_unit_of_measure.
    * </pre>
    */
   public Builder clearAverageFuelConsumption() {
     bitField0_ = (bitField0_ & ~0x00000400);
     averageFuelConsumption_ = 0F;
     onChanged();
     return this;
   }

   private int ambientTemperature_ ;
   /**
    * <code>optional sint32 ambient_temperature = 12;</code>
    *
    * <pre>
    * Ambient (external) temperature (in degrees Celsius). -40..215. Precision: 1
    * </pre>
    */
   public boolean hasAmbientTemperature() {
     return ((bitField0_ & 0x00000800) == 0x00000800);
   }
   /**
    * <code>optional sint32 ambient_temperature = 12;</code>
    *
    * <pre>
    * Ambient (external) temperature (in degrees Celsius). -40..215. Precision: 1
    * </pre>
    */
   public int getAmbientTemperature() {
     return ambientTemperature_;
   }
   /**
    * <code>optional sint32 ambient_temperature = 12;</code>
    *
    * <pre>
    * Ambient (external) temperature (in degrees Celsius). -40..215. Precision: 1
    * </pre>
    */
   public Builder setAmbientTemperature(int value) {
     bitField0_ |= 0x00000800;
     ambientTemperature_ = value;
     onChanged();
     return this;
   }
   /**
    * <code>optional sint32 ambient_temperature = 12;</code>
    *
    * <pre>
    * Ambient (external) temperature (in degrees Celsius). -40..215. Precision: 1
    * </pre>
    */
   public Builder clearAmbientTemperature() {
     bitField0_ = (bitField0_ & ~0x00000800);
     ambientTemperature_ = 0;
     onChanged();
     return this;
   }

   private int altitudeMeters_ ;
   /**
    * <code>optional int32 altitude_meters = 13;</code>
    *
    * <pre>
    * Altitude in meters. -32768..32767. Precision: 1
    * </pre>
    */
   public boolean hasAltitudeMeters() {
     return ((bitField0_ & 0x00001000) == 0x00001000);
   }
   /**
    * <code>optional int32 altitude_meters = 13;</code>
    *
    * <pre>
    * Altitude in meters. -32768..32767. Precision: 1
    * </pre>
    */
   public int getAltitudeMeters() {
     return altitudeMeters_;
   }
   /**
    * <code>optional int32 altitude_meters = 13;</code>
    *
    * <pre>
    * Altitude in meters. -32768..32767. Precision: 1
    * </pre>
    */
   public Builder setAltitudeMeters(int value) {
     bitField0_ |= 0x00001000;
     altitudeMeters_ = value;
     onChanged();
     return this;
   }
   /**
    * <code>optional int32 altitude_meters = 13;</code>
    *
    * <pre>
    * Altitude in meters. -32768..32767. Precision: 1
    * </pre>
    */
   public Builder clearAltitudeMeters() {
     bitField0_ = (bitField0_ & ~0x00001000);
     altitudeMeters_ = 0;
     onChanged();
     return this;
   }

   private int tripDistanceMeters_ ;
   /**
    * <code>optional uint32 trip_distance_meters = 14;</code>
    *
    * <pre>
    * Trip distance in meters. Precision: 1
    * </pre>
    */
   public boolean hasTripDistanceMeters() {
     return ((bitField0_ & 0x00002000) == 0x00002000);
   }
   /**
    * <code>optional uint32 trip_distance_meters = 14;</code>
    *
    * <pre>
    * Trip distance in meters. Precision: 1
    * </pre>
    */
   public int getTripDistanceMeters() {
     return tripDistanceMeters_;
   }
   /**
    * <code>optional uint32 trip_distance_meters = 14;</code>
    *
    * <pre>
    * Trip distance in meters. Precision: 1
    * </pre>
    */
   public Builder setTripDistanceMeters(int value) {
     bitField0_ |= 0x00002000;
     tripDistanceMeters_ = value;
     onChanged();
     return this;
   }
   /**
    * <code>optional uint32 trip_distance_meters = 14;</code>
    *
    * <pre>
    * Trip distance in meters. Precision: 1
    * </pre>
    */
   public Builder clearTripDistanceMeters() {
     bitField0_ = (bitField0_ & ~0x00002000);
     tripDistanceMeters_ = 0;
     onChanged();
     return this;
   }

   private int tripDurationSeconds_ ;
   /**
    * <code>optional uint32 trip_duration_seconds = 15;</code>
    *
    * <pre>
    * Trip duration in seconds. Precision: 1
    * </pre>
    */
   public boolean hasTripDurationSeconds() {
     return ((bitField0_ & 0x00004000) == 0x00004000);
   }
   /**
    * <code>optional uint32 trip_duration_seconds = 15;</code>
    *
    * <pre>
    * Trip duration in seconds. Precision: 1
    * </pre>
    */
   public int getTripDurationSeconds() {
     return tripDurationSeconds_;
   }
   /**
    * <code>optional uint32 trip_duration_seconds = 15;</code>
    *
    * <pre>
    * Trip duration in seconds. Precision: 1
    * </pre>
    */
   public Builder setTripDurationSeconds(int value) {
     bitField0_ |= 0x00004000;
     tripDurationSeconds_ = value;
     onChanged();
     return this;
   }
   /**
    * <code>optional uint32 trip_duration_seconds = 15;</code>
    *
    * <pre>
    * Trip duration in seconds. Precision: 1
    * </pre>
    */
   public Builder clearTripDurationSeconds() {
     bitField0_ = (bitField0_ & ~0x00004000);
     tripDurationSeconds_ = 0;
     onChanged();
     return this;
   }

   private int accuracyPercentage_ ;
   /**
    * <code>optional uint32 accuracy_percentage = 16;</code>
    *
    * <pre>
    * Accuracy of fuel level reading. 0..100. Precision: 1
    * </pre>
    */
   public boolean hasAccuracyPercentage() {
     return ((bitField0_ & 0x00008000) == 0x00008000);
   }
   /**
    * <code>optional uint32 accuracy_percentage = 16;</code>
    *
    * <pre>
    * Accuracy of fuel level reading. 0..100. Precision: 1
    * </pre>
    */
   public int getAccuracyPercentage() {
     return accuracyPercentage_;
   }
   /**
    * <code>optional uint32 accuracy_percentage = 16;</code>
    *
    * <pre>
    * Accuracy of fuel level reading. 0..100. Precision: 1
    * </pre>
    */
   public Builder setAccuracyPercentage(int value) {
     bitField0_ |= 0x00008000;
     accuracyPercentage_ = value;
     onChanged();
     return this;
   }
   /**
    * <code>optional uint32 accuracy_percentage = 16;</code>
    *
    * <pre>
    * Accuracy of fuel level reading. 0..100. Precision: 1
    * </pre>
    */
   public Builder clearAccuracyPercentage() {
     bitField0_ = (bitField0_ & ~0x00008000);
     accuracyPercentage_ = 0;
     onChanged();
     return this;
   }

   // @@protoc_insertion_point(builder_scope:ConsolidatedFuelData)
 }

 static {
   defaultInstance = new ConsolidatedFuelData(true);
   defaultInstance.initFields();
 }

 // @@protoc_insertion_point(class_scope:ConsolidatedFuelData)
}

private static final com.google.protobuf.Descriptors.Descriptor
 internal_static_ConsolidatedFuelData_descriptor;
private static
 com.google.protobuf.GeneratedMessage.FieldAccessorTable
   internal_static_ConsolidatedFuelData_fieldAccessorTable;

public static com.google.protobuf.Descriptors.FileDescriptor
   getDescriptor() {
 return descriptor;
}
private static com.google.protobuf.Descriptors.FileDescriptor
   descriptor;
static {
 java.lang.String[] descriptorData = {
   "\n\037ConsolidatedFuelDataProto.proto\032\026Event" +
   "HeaderProto.proto\032+Enums/ConsolidatedFue" +
   "lReasonTypeProto.proto\032$Enums/FuelLevelS" +
   "ourceTypeProto.proto\032+Enums/FuelLevelUni" +
   "tOfMeasureTypeProto.proto\032*Enums/FuelCon" +
   "sumptionSourceTypeProto.proto\0321Enums/Fue" +
   "lConsumptionUnitOfMeasureTypeProto.proto" +
   "\"\236\010\n\024ConsolidatedFuelData\022\034\n\006header\030\001 \002(" +
   "\0132\014.EventHeader\022N\n\006reason\030\002 \001(\0162\033.Consol" +
   "idatedFuelReasonType:!CONSOLIDATED_FUEL_",
   "REASON_PERIODIC\022T\n\021fuel_level_source\030\003 \001" +
   "(\0162\024.FuelLevelSourceType:#FUEL_LEVEL_SOU" +
   "RCE_TYPE_ANALOG_INPUT\022f\n\032fuel_level_unit" +
   "_of_measure\030\004 \001(\0162\033.FuelLevelUnitOfMeasu" +
   "reType:%FUEL_LEVEL_UNIT_OF_MEASURE_PERCE" +
   "NTAGE\022n\n\037current_fuel_consumption_source" +
   "\030\005 \001(\0162\032.FuelConsumptionSourceType:)FUEL" +
   "_CONSUMPTION_SOURCE_TYPE_ANALOG_INPUT\022\207\001" +
   "\n(current_fuel_consumption_unit_of_measu" +
   "re\030\006 \001(\0162!.FuelConsumptionUnitOfMeasureT",
   "ype:2FUEL_CONSUMPTION_UNIT_OF_MEASURE_LI" +
   "TERS_PER_100_KM\022n\n\037average_fuel_consumpt" +
   "ion_source\030\007 \001(\0162\032.FuelConsumptionSource" +
   "Type:)FUEL_CONSUMPTION_SOURCE_TYPE_ANALO" +
   "G_INPUT\022\207\001\n(average_fuel_consumption_uni" +
   "t_of_measure\030\010 \001(\0162!.FuelConsumptionUnit" +
   "OfMeasureType:2FUEL_CONSUMPTION_UNIT_OF_" +
   "MEASURE_LITERS_PER_100_KM\022\022\n\nfuel_level\030" +
   "\t \001(\002\022 \n\030current_fuel_consumption\030\n \001(\002\022" +
   " \n\030average_fuel_consumption\030\013 \001(\002\022\033\n\023amb",
   "ient_temperature\030\014 \001(\021\022\027\n\017altitude_meter" +
   "s\030\r \001(\005\022\034\n\024trip_distance_meters\030\016 \001(\r\022\035\n" +
   "\025trip_duration_seconds\030\017 \001(\r\022\033\n\023accuracy" +
   "_percentage\030\020 \001(\r"
 };
 com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
     new com.google.protobuf.Descriptors.FileDescriptor.    InternalDescriptorAssigner() {
       public com.google.protobuf.ExtensionRegistry assignDescriptors(
           com.google.protobuf.Descriptors.FileDescriptor root) {
         descriptor = root;
         return null;
       }
     };
 com.google.protobuf.Descriptors.FileDescriptor
   .internalBuildGeneratedFileFrom(descriptorData,
     new com.google.protobuf.Descriptors.FileDescriptor[] {
       EventHeaderProto.getDescriptor(),
       ConsolidatedFuelReasonTypeProto.getDescriptor(),
       FuelLevelSourceTypeProto.getDescriptor(),
       FuelLevelUnitOfMeasureTypeProto.getDescriptor(),
       FuelConsumptionSourceTypeProto.getDescriptor(),
       FuelConsumptionUnitOfMeasureTypeProto.getDescriptor(),
     }, assigner);
 internal_static_ConsolidatedFuelData_descriptor =
   getDescriptor().getMessageTypes().get(0);
 internal_static_ConsolidatedFuelData_fieldAccessorTable = new
   com.google.protobuf.GeneratedMessage.FieldAccessorTable(
     internal_static_ConsolidatedFuelData_descriptor,
     new java.lang.String[] { "Header", "Reason", "FuelLevelSource", "FuelLevelUnitOfMeasure", "CurrentFuelConsumptionSource", "CurrentFuelConsumptionUnitOfMeasure", "AverageFuelConsumptionSource", "AverageFuelConsumptionUnitOfMeasure", "FuelLevel", "CurrentFuelConsumption", "AverageFuelConsumption", "AmbientTemperature", "AltitudeMeters", "TripDistanceMeters", "TripDurationSeconds", "AccuracyPercentage", });
 EventHeaderProto.getDescriptor();
 ConsolidatedFuelReasonTypeProto.getDescriptor();
 FuelLevelSourceTypeProto.getDescriptor();
 FuelLevelUnitOfMeasureTypeProto.getDescriptor();
 FuelConsumptionSourceTypeProto.getDescriptor();
 FuelConsumptionUnitOfMeasureTypeProto.getDescriptor();
}

// @@protoc_insertion_point(outer_class_scope)
}
