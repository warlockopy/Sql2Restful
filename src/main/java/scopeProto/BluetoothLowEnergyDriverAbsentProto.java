package scopeProto;

//Generated by the protocol buffer compiler.  DO NOT EDIT!
//source: BluetoothLowEnergyDriverAbsentProto.proto

public final class BluetoothLowEnergyDriverAbsentProto {
private BluetoothLowEnergyDriverAbsentProto() {}
public static void registerAllExtensions(
   com.google.protobuf.ExtensionRegistry registry) {
}
public interface BluetoothLowEnergyDriverAbsentOrBuilder extends
   // @@protoc_insertion_point(interface_extends:BluetoothLowEnergyDriverAbsent)
   com.google.protobuf.MessageOrBuilder {

 /**
  * <code>required .EventHeader header = 1;</code>
  */
 boolean hasHeader();
 /**
  * <code>required .EventHeader header = 1;</code>
  */
 EventHeaderProto.EventHeader getHeader();
 /**
  * <code>required .EventHeader header = 1;</code>
  */
 EventHeaderProto.EventHeaderOrBuilder getHeaderOrBuilder();

 /**
  * <code>optional .BluetoothLowEnergyDriverAbsentReasonType reason = 2 [default = BLUETOOTH_LOW_ENERGY_DRIVER_ABSENT_REASON_UNDEFINED];</code>
  *
  * <pre>
  * Reason
  * </pre>
  */
 boolean hasReason();
 /**
  * <code>optional .BluetoothLowEnergyDriverAbsentReasonType reason = 2 [default = BLUETOOTH_LOW_ENERGY_DRIVER_ABSENT_REASON_UNDEFINED];</code>
  *
  * <pre>
  * Reason
  * </pre>
  */
 BluetoothLowEnergyDriverAbsentReasonTypeProto.BluetoothLowEnergyDriverAbsentReasonType getReason();

 /**
  * <code>optional uint64 device_id = 3;</code>
  *
  * <pre>
  * Device IEEE ID (6 bytes)
  * </pre>
  */
 boolean hasDeviceId();
 /**
  * <code>optional uint64 device_id = 3;</code>
  *
  * <pre>
  * Device IEEE ID (6 bytes)
  * </pre>
  */
 long getDeviceId();

 /**
  * <code>optional .BluetoothLowEnergyDeviceClassType device_class = 4 [default = BLUETOOTH_LOW_ENERGY_DEVICE_CLASS_UNDEFINED];</code>
  *
  * <pre>
  * Device class type
  * </pre>
  */
 boolean hasDeviceClass();
 /**
  * <code>optional .BluetoothLowEnergyDeviceClassType device_class = 4 [default = BLUETOOTH_LOW_ENERGY_DEVICE_CLASS_UNDEFINED];</code>
  *
  * <pre>
  * Device class type
  * </pre>
  */
 BluetoothLowEnergyDeviceClassTypeProto.BluetoothLowEnergyDeviceClassType getDeviceClass();

 /**
  * <code>optional uint32 received_signal_strength = 5;</code>
  *
  * <pre>
  * Received signal strength (RSSI)
  * </pre>
  */
 boolean hasReceivedSignalStrength();
 /**
  * <code>optional uint32 received_signal_strength = 5;</code>
  *
  * <pre>
  * Received signal strength (RSSI)
  * </pre>
  */
 int getReceivedSignalStrength();

 /**
  * <code>optional uint32 advertising_interval_seconds = 6;</code>
  *
  * <pre>
  * Advertising interval in seconds
  * </pre>
  */
 boolean hasAdvertisingIntervalSeconds();
 /**
  * <code>optional uint32 advertising_interval_seconds = 6;</code>
  *
  * <pre>
  * Advertising interval in seconds
  * </pre>
  */
 int getAdvertisingIntervalSeconds();

 /**
  * <code>optional uint32 battery_level_percentage = 7;</code>
  *
  * <pre>
  * Battery level percentage 0..100
  * </pre>
  */
 boolean hasBatteryLevelPercentage();
 /**
  * <code>optional uint32 battery_level_percentage = 7;</code>
  *
  * <pre>
  * Battery level percentage 0..100
  * </pre>
  */
 int getBatteryLevelPercentage();

 /**
  * <code>optional uint64 accelerometer_raw_values = 8;</code>
  *
  * <pre>
  * Accelerometer raw values (8 bytes)
  * </pre>
  */
 boolean hasAccelerometerRawValues();
 /**
  * <code>optional uint64 accelerometer_raw_values = 8;</code>
  *
  * <pre>
  * Accelerometer raw values (8 bytes)
  * </pre>
  */
 long getAccelerometerRawValues();

 /**
  * <code>optional uint32 scope_driver_id = 9;</code>
  *
  * <pre>
  * Custom Driver Identification programmed by the customer
  * </pre>
  */
 boolean hasScopeDriverId();
 /**
  * <code>optional uint32 scope_driver_id = 9;</code>
  *
  * <pre>
  * Custom Driver Identification programmed by the customer
  * </pre>
  */
 int getScopeDriverId();

 /**
  * <code>optional uint32 fleet_code = 10;</code>
  *
  * <pre>
  * Fleet code of the device that determines which group of vehicles may be driven
  * </pre>
  */
 boolean hasFleetCode();
 /**
  * <code>optional uint32 fleet_code = 10;</code>
  *
  * <pre>
  * Fleet code of the device that determines which group of vehicles may be driven
  * </pre>
  */
 int getFleetCode();

 /**
  * <code>optional uint32 driver_class = 11;</code>
  *
  * <pre>
  * Class of vehicle that may be driver (Customer defined)
  * </pre>
  */
 boolean hasDriverClass();
 /**
  * <code>optional uint32 driver_class = 11;</code>
  *
  * <pre>
  * Class of vehicle that may be driver (Customer defined)
  * </pre>
  */
 int getDriverClass();

 /**
  * <code>optional uint32 customer_code = 12;</code>
  *
  * <pre>
  * Customer Code
  * </pre>
  */
 boolean hasCustomerCode();
 /**
  * <code>optional uint32 customer_code = 12;</code>
  *
  * <pre>
  * Customer Code
  * </pre>
  */
 int getCustomerCode();

 /**
  * <code>optional uint32 firmware_major_version = 13;</code>
  *
  * <pre>
  * Firmware major version
  * </pre>
  */
 boolean hasFirmwareMajorVersion();
 /**
  * <code>optional uint32 firmware_major_version = 13;</code>
  *
  * <pre>
  * Firmware major version
  * </pre>
  */
 int getFirmwareMajorVersion();

 /**
  * <code>optional uint32 firmware_minor_version = 14;</code>
  *
  * <pre>
  * Firmware minor version
  * </pre>
  */
 boolean hasFirmwareMinorVersion();
 /**
  * <code>optional uint32 firmware_minor_version = 14;</code>
  *
  * <pre>
  * Firmware minor version
  * </pre>
  */
 int getFirmwareMinorVersion();
}
/**
* Protobuf type {@code BluetoothLowEnergyDriverAbsent}
*
* <pre>
* Bluetooth Low Energy Tracking event
* </pre>
*/
public static final class BluetoothLowEnergyDriverAbsent extends
   com.google.protobuf.GeneratedMessage implements
   // @@protoc_insertion_point(message_implements:BluetoothLowEnergyDriverAbsent)
   BluetoothLowEnergyDriverAbsentOrBuilder {
 // Use BluetoothLowEnergyDriverAbsent.newBuilder() to construct.
 private BluetoothLowEnergyDriverAbsent(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
   super(builder);
   this.unknownFields = builder.getUnknownFields();
 }
 private BluetoothLowEnergyDriverAbsent(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

 private static final BluetoothLowEnergyDriverAbsent defaultInstance;
 public static BluetoothLowEnergyDriverAbsent getDefaultInstance() {
   return defaultInstance;
 }

 public BluetoothLowEnergyDriverAbsent getDefaultInstanceForType() {
   return defaultInstance;
 }

 private final com.google.protobuf.UnknownFieldSet unknownFields;
 @java.lang.Override
 public final com.google.protobuf.UnknownFieldSet
     getUnknownFields() {
   return this.unknownFields;
 }
 private BluetoothLowEnergyDriverAbsent(
     com.google.protobuf.CodedInputStream input,
     com.google.protobuf.ExtensionRegistryLite extensionRegistry)
     throws com.google.protobuf.InvalidProtocolBufferException {
   initFields();
   int mutable_bitField0_ = 0;
   com.google.protobuf.UnknownFieldSet.Builder unknownFields =
       com.google.protobuf.UnknownFieldSet.newBuilder();
   try {
     boolean done = false;
     while (!done) {
       int tag = input.readTag();
       switch (tag) {
         case 0:
           done = true;
           break;
         default: {
           if (!parseUnknownField(input, unknownFields,
                                  extensionRegistry, tag)) {
             done = true;
           }
           break;
         }
         case 10: {
           EventHeaderProto.EventHeader.Builder subBuilder = null;
           if (((bitField0_ & 0x00000001) == 0x00000001)) {
             subBuilder = header_.toBuilder();
           }
           header_ = input.readMessage(EventHeaderProto.EventHeader.PARSER, extensionRegistry);
           if (subBuilder != null) {
             subBuilder.mergeFrom(header_);
             header_ = subBuilder.buildPartial();
           }
           bitField0_ |= 0x00000001;
           break;
         }
         case 16: {
           int rawValue = input.readEnum();
           BluetoothLowEnergyDriverAbsentReasonTypeProto.BluetoothLowEnergyDriverAbsentReasonType value = BluetoothLowEnergyDriverAbsentReasonTypeProto.BluetoothLowEnergyDriverAbsentReasonType.valueOf(rawValue);
           if (value == null) {
             unknownFields.mergeVarintField(2, rawValue);
           } else {
             bitField0_ |= 0x00000002;
             reason_ = value;
           }
           break;
         }
         case 24: {
           bitField0_ |= 0x00000004;
           deviceId_ = input.readUInt64();
           break;
         }
         case 32: {
           int rawValue = input.readEnum();
           BluetoothLowEnergyDeviceClassTypeProto.BluetoothLowEnergyDeviceClassType value = BluetoothLowEnergyDeviceClassTypeProto.BluetoothLowEnergyDeviceClassType.valueOf(rawValue);
           if (value == null) {
             unknownFields.mergeVarintField(4, rawValue);
           } else {
             bitField0_ |= 0x00000008;
             deviceClass_ = value;
           }
           break;
         }
         case 40: {
           bitField0_ |= 0x00000010;
           receivedSignalStrength_ = input.readUInt32();
           break;
         }
         case 48: {
           bitField0_ |= 0x00000020;
           advertisingIntervalSeconds_ = input.readUInt32();
           break;
         }
         case 56: {
           bitField0_ |= 0x00000040;
           batteryLevelPercentage_ = input.readUInt32();
           break;
         }
         case 64: {
           bitField0_ |= 0x00000080;
           accelerometerRawValues_ = input.readUInt64();
           break;
         }
         case 72: {
           bitField0_ |= 0x00000100;
           scopeDriverId_ = input.readUInt32();
           break;
         }
         case 80: {
           bitField0_ |= 0x00000200;
           fleetCode_ = input.readUInt32();
           break;
         }
         case 88: {
           bitField0_ |= 0x00000400;
           driverClass_ = input.readUInt32();
           break;
         }
         case 96: {
           bitField0_ |= 0x00000800;
           customerCode_ = input.readUInt32();
           break;
         }
         case 104: {
           bitField0_ |= 0x00001000;
           firmwareMajorVersion_ = input.readUInt32();
           break;
         }
         case 112: {
           bitField0_ |= 0x00002000;
           firmwareMinorVersion_ = input.readUInt32();
           break;
         }
       }
     }
   } catch (com.google.protobuf.InvalidProtocolBufferException e) {
     throw e.setUnfinishedMessage(this);
   } catch (java.io.IOException e) {
     throw new com.google.protobuf.InvalidProtocolBufferException(
         e.getMessage()).setUnfinishedMessage(this);
   } finally {
     this.unknownFields = unknownFields.build();
     makeExtensionsImmutable();
   }
 }
 public static final com.google.protobuf.Descriptors.Descriptor
     getDescriptor() {
   return BluetoothLowEnergyDriverAbsentProto.internal_static_BluetoothLowEnergyDriverAbsent_descriptor;
 }

 protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
     internalGetFieldAccessorTable() {
   return BluetoothLowEnergyDriverAbsentProto.internal_static_BluetoothLowEnergyDriverAbsent_fieldAccessorTable
       .ensureFieldAccessorsInitialized(
           BluetoothLowEnergyDriverAbsentProto.BluetoothLowEnergyDriverAbsent.class, BluetoothLowEnergyDriverAbsentProto.BluetoothLowEnergyDriverAbsent.Builder.class);
 }

 public static com.google.protobuf.Parser<BluetoothLowEnergyDriverAbsent> PARSER =
     new com.google.protobuf.AbstractParser<BluetoothLowEnergyDriverAbsent>() {
   public BluetoothLowEnergyDriverAbsent parsePartialFrom(
       com.google.protobuf.CodedInputStream input,
       com.google.protobuf.ExtensionRegistryLite extensionRegistry)
       throws com.google.protobuf.InvalidProtocolBufferException {
     return new BluetoothLowEnergyDriverAbsent(input, extensionRegistry);
   }
 };

 @java.lang.Override
 public com.google.protobuf.Parser<BluetoothLowEnergyDriverAbsent> getParserForType() {
   return PARSER;
 }

 private int bitField0_;
 public static final int HEADER_FIELD_NUMBER = 1;
 private EventHeaderProto.EventHeader header_;
 /**
  * <code>required .EventHeader header = 1;</code>
  */
 public boolean hasHeader() {
   return ((bitField0_ & 0x00000001) == 0x00000001);
 }
 /**
  * <code>required .EventHeader header = 1;</code>
  */
 public EventHeaderProto.EventHeader getHeader() {
   return header_;
 }
 /**
  * <code>required .EventHeader header = 1;</code>
  */
 public EventHeaderProto.EventHeaderOrBuilder getHeaderOrBuilder() {
   return header_;
 }

 public static final int REASON_FIELD_NUMBER = 2;
 private BluetoothLowEnergyDriverAbsentReasonTypeProto.BluetoothLowEnergyDriverAbsentReasonType reason_;
 /**
  * <code>optional .BluetoothLowEnergyDriverAbsentReasonType reason = 2 [default = BLUETOOTH_LOW_ENERGY_DRIVER_ABSENT_REASON_UNDEFINED];</code>
  *
  * <pre>
  * Reason
  * </pre>
  */
 public boolean hasReason() {
   return ((bitField0_ & 0x00000002) == 0x00000002);
 }
 /**
  * <code>optional .BluetoothLowEnergyDriverAbsentReasonType reason = 2 [default = BLUETOOTH_LOW_ENERGY_DRIVER_ABSENT_REASON_UNDEFINED];</code>
  *
  * <pre>
  * Reason
  * </pre>
  */
 public BluetoothLowEnergyDriverAbsentReasonTypeProto.BluetoothLowEnergyDriverAbsentReasonType getReason() {
   return reason_;
 }

 public static final int DEVICE_ID_FIELD_NUMBER = 3;
 private long deviceId_;
 /**
  * <code>optional uint64 device_id = 3;</code>
  *
  * <pre>
  * Device IEEE ID (6 bytes)
  * </pre>
  */
 public boolean hasDeviceId() {
   return ((bitField0_ & 0x00000004) == 0x00000004);
 }
 /**
  * <code>optional uint64 device_id = 3;</code>
  *
  * <pre>
  * Device IEEE ID (6 bytes)
  * </pre>
  */
 public long getDeviceId() {
   return deviceId_;
 }

 public static final int DEVICE_CLASS_FIELD_NUMBER = 4;
 private BluetoothLowEnergyDeviceClassTypeProto.BluetoothLowEnergyDeviceClassType deviceClass_;
 /**
  * <code>optional .BluetoothLowEnergyDeviceClassType device_class = 4 [default = BLUETOOTH_LOW_ENERGY_DEVICE_CLASS_UNDEFINED];</code>
  *
  * <pre>
  * Device class type
  * </pre>
  */
 public boolean hasDeviceClass() {
   return ((bitField0_ & 0x00000008) == 0x00000008);
 }
 /**
  * <code>optional .BluetoothLowEnergyDeviceClassType device_class = 4 [default = BLUETOOTH_LOW_ENERGY_DEVICE_CLASS_UNDEFINED];</code>
  *
  * <pre>
  * Device class type
  * </pre>
  */
 public BluetoothLowEnergyDeviceClassTypeProto.BluetoothLowEnergyDeviceClassType getDeviceClass() {
   return deviceClass_;
 }

 public static final int RECEIVED_SIGNAL_STRENGTH_FIELD_NUMBER = 5;
 private int receivedSignalStrength_;
 /**
  * <code>optional uint32 received_signal_strength = 5;</code>
  *
  * <pre>
  * Received signal strength (RSSI)
  * </pre>
  */
 public boolean hasReceivedSignalStrength() {
   return ((bitField0_ & 0x00000010) == 0x00000010);
 }
 /**
  * <code>optional uint32 received_signal_strength = 5;</code>
  *
  * <pre>
  * Received signal strength (RSSI)
  * </pre>
  */
 public int getReceivedSignalStrength() {
   return receivedSignalStrength_;
 }

 public static final int ADVERTISING_INTERVAL_SECONDS_FIELD_NUMBER = 6;
 private int advertisingIntervalSeconds_;
 /**
  * <code>optional uint32 advertising_interval_seconds = 6;</code>
  *
  * <pre>
  * Advertising interval in seconds
  * </pre>
  */
 public boolean hasAdvertisingIntervalSeconds() {
   return ((bitField0_ & 0x00000020) == 0x00000020);
 }
 /**
  * <code>optional uint32 advertising_interval_seconds = 6;</code>
  *
  * <pre>
  * Advertising interval in seconds
  * </pre>
  */
 public int getAdvertisingIntervalSeconds() {
   return advertisingIntervalSeconds_;
 }

 public static final int BATTERY_LEVEL_PERCENTAGE_FIELD_NUMBER = 7;
 private int batteryLevelPercentage_;
 /**
  * <code>optional uint32 battery_level_percentage = 7;</code>
  *
  * <pre>
  * Battery level percentage 0..100
  * </pre>
  */
 public boolean hasBatteryLevelPercentage() {
   return ((bitField0_ & 0x00000040) == 0x00000040);
 }
 /**
  * <code>optional uint32 battery_level_percentage = 7;</code>
  *
  * <pre>
  * Battery level percentage 0..100
  * </pre>
  */
 public int getBatteryLevelPercentage() {
   return batteryLevelPercentage_;
 }

 public static final int ACCELEROMETER_RAW_VALUES_FIELD_NUMBER = 8;
 private long accelerometerRawValues_;
 /**
  * <code>optional uint64 accelerometer_raw_values = 8;</code>
  *
  * <pre>
  * Accelerometer raw values (8 bytes)
  * </pre>
  */
 public boolean hasAccelerometerRawValues() {
   return ((bitField0_ & 0x00000080) == 0x00000080);
 }
 /**
  * <code>optional uint64 accelerometer_raw_values = 8;</code>
  *
  * <pre>
  * Accelerometer raw values (8 bytes)
  * </pre>
  */
 public long getAccelerometerRawValues() {
   return accelerometerRawValues_;
 }

 public static final int SCOPE_DRIVER_ID_FIELD_NUMBER = 9;
 private int scopeDriverId_;
 /**
  * <code>optional uint32 scope_driver_id = 9;</code>
  *
  * <pre>
  * Custom Driver Identification programmed by the customer
  * </pre>
  */
 public boolean hasScopeDriverId() {
   return ((bitField0_ & 0x00000100) == 0x00000100);
 }
 /**
  * <code>optional uint32 scope_driver_id = 9;</code>
  *
  * <pre>
  * Custom Driver Identification programmed by the customer
  * </pre>
  */
 public int getScopeDriverId() {
   return scopeDriverId_;
 }

 public static final int FLEET_CODE_FIELD_NUMBER = 10;
 private int fleetCode_;
 /**
  * <code>optional uint32 fleet_code = 10;</code>
  *
  * <pre>
  * Fleet code of the device that determines which group of vehicles may be driven
  * </pre>
  */
 public boolean hasFleetCode() {
   return ((bitField0_ & 0x00000200) == 0x00000200);
 }
 /**
  * <code>optional uint32 fleet_code = 10;</code>
  *
  * <pre>
  * Fleet code of the device that determines which group of vehicles may be driven
  * </pre>
  */
 public int getFleetCode() {
   return fleetCode_;
 }

 public static final int DRIVER_CLASS_FIELD_NUMBER = 11;
 private int driverClass_;
 /**
  * <code>optional uint32 driver_class = 11;</code>
  *
  * <pre>
  * Class of vehicle that may be driver (Customer defined)
  * </pre>
  */
 public boolean hasDriverClass() {
   return ((bitField0_ & 0x00000400) == 0x00000400);
 }
 /**
  * <code>optional uint32 driver_class = 11;</code>
  *
  * <pre>
  * Class of vehicle that may be driver (Customer defined)
  * </pre>
  */
 public int getDriverClass() {
   return driverClass_;
 }

 public static final int CUSTOMER_CODE_FIELD_NUMBER = 12;
 private int customerCode_;
 /**
  * <code>optional uint32 customer_code = 12;</code>
  *
  * <pre>
  * Customer Code
  * </pre>
  */
 public boolean hasCustomerCode() {
   return ((bitField0_ & 0x00000800) == 0x00000800);
 }
 /**
  * <code>optional uint32 customer_code = 12;</code>
  *
  * <pre>
  * Customer Code
  * </pre>
  */
 public int getCustomerCode() {
   return customerCode_;
 }

 public static final int FIRMWARE_MAJOR_VERSION_FIELD_NUMBER = 13;
 private int firmwareMajorVersion_;
 /**
  * <code>optional uint32 firmware_major_version = 13;</code>
  *
  * <pre>
  * Firmware major version
  * </pre>
  */
 public boolean hasFirmwareMajorVersion() {
   return ((bitField0_ & 0x00001000) == 0x00001000);
 }
 /**
  * <code>optional uint32 firmware_major_version = 13;</code>
  *
  * <pre>
  * Firmware major version
  * </pre>
  */
 public int getFirmwareMajorVersion() {
   return firmwareMajorVersion_;
 }

 public static final int FIRMWARE_MINOR_VERSION_FIELD_NUMBER = 14;
 private int firmwareMinorVersion_;
 /**
  * <code>optional uint32 firmware_minor_version = 14;</code>
  *
  * <pre>
  * Firmware minor version
  * </pre>
  */
 public boolean hasFirmwareMinorVersion() {
   return ((bitField0_ & 0x00002000) == 0x00002000);
 }
 /**
  * <code>optional uint32 firmware_minor_version = 14;</code>
  *
  * <pre>
  * Firmware minor version
  * </pre>
  */
 public int getFirmwareMinorVersion() {
   return firmwareMinorVersion_;
 }

 private void initFields() {
   header_ = EventHeaderProto.EventHeader.getDefaultInstance();
   reason_ = BluetoothLowEnergyDriverAbsentReasonTypeProto.BluetoothLowEnergyDriverAbsentReasonType.BLUETOOTH_LOW_ENERGY_DRIVER_ABSENT_REASON_UNDEFINED;
   deviceId_ = 0L;
   deviceClass_ = BluetoothLowEnergyDeviceClassTypeProto.BluetoothLowEnergyDeviceClassType.BLUETOOTH_LOW_ENERGY_DEVICE_CLASS_UNDEFINED;
   receivedSignalStrength_ = 0;
   advertisingIntervalSeconds_ = 0;
   batteryLevelPercentage_ = 0;
   accelerometerRawValues_ = 0L;
   scopeDriverId_ = 0;
   fleetCode_ = 0;
   driverClass_ = 0;
   customerCode_ = 0;
   firmwareMajorVersion_ = 0;
   firmwareMinorVersion_ = 0;
 }
 private byte memoizedIsInitialized = -1;
 public final boolean isInitialized() {
   byte isInitialized = memoizedIsInitialized;
   if (isInitialized == 1) return true;
   if (isInitialized == 0) return false;

   if (!hasHeader()) {
     memoizedIsInitialized = 0;
     return false;
   }
   if (!getHeader().isInitialized()) {
     memoizedIsInitialized = 0;
     return false;
   }
   memoizedIsInitialized = 1;
   return true;
 }

 public void writeTo(com.google.protobuf.CodedOutputStream output)
                     throws java.io.IOException {
   getSerializedSize();
   if (((bitField0_ & 0x00000001) == 0x00000001)) {
     output.writeMessage(1, header_);
   }
   if (((bitField0_ & 0x00000002) == 0x00000002)) {
     output.writeEnum(2, reason_.getNumber());
   }
   if (((bitField0_ & 0x00000004) == 0x00000004)) {
     output.writeUInt64(3, deviceId_);
   }
   if (((bitField0_ & 0x00000008) == 0x00000008)) {
     output.writeEnum(4, deviceClass_.getNumber());
   }
   if (((bitField0_ & 0x00000010) == 0x00000010)) {
     output.writeUInt32(5, receivedSignalStrength_);
   }
   if (((bitField0_ & 0x00000020) == 0x00000020)) {
     output.writeUInt32(6, advertisingIntervalSeconds_);
   }
   if (((bitField0_ & 0x00000040) == 0x00000040)) {
     output.writeUInt32(7, batteryLevelPercentage_);
   }
   if (((bitField0_ & 0x00000080) == 0x00000080)) {
     output.writeUInt64(8, accelerometerRawValues_);
   }
   if (((bitField0_ & 0x00000100) == 0x00000100)) {
     output.writeUInt32(9, scopeDriverId_);
   }
   if (((bitField0_ & 0x00000200) == 0x00000200)) {
     output.writeUInt32(10, fleetCode_);
   }
   if (((bitField0_ & 0x00000400) == 0x00000400)) {
     output.writeUInt32(11, driverClass_);
   }
   if (((bitField0_ & 0x00000800) == 0x00000800)) {
     output.writeUInt32(12, customerCode_);
   }
   if (((bitField0_ & 0x00001000) == 0x00001000)) {
     output.writeUInt32(13, firmwareMajorVersion_);
   }
   if (((bitField0_ & 0x00002000) == 0x00002000)) {
     output.writeUInt32(14, firmwareMinorVersion_);
   }
   getUnknownFields().writeTo(output);
 }

 private int memoizedSerializedSize = -1;
 public int getSerializedSize() {
   int size = memoizedSerializedSize;
   if (size != -1) return size;

   size = 0;
   if (((bitField0_ & 0x00000001) == 0x00000001)) {
     size += com.google.protobuf.CodedOutputStream
       .computeMessageSize(1, header_);
   }
   if (((bitField0_ & 0x00000002) == 0x00000002)) {
     size += com.google.protobuf.CodedOutputStream
       .computeEnumSize(2, reason_.getNumber());
   }
   if (((bitField0_ & 0x00000004) == 0x00000004)) {
     size += com.google.protobuf.CodedOutputStream
       .computeUInt64Size(3, deviceId_);
   }
   if (((bitField0_ & 0x00000008) == 0x00000008)) {
     size += com.google.protobuf.CodedOutputStream
       .computeEnumSize(4, deviceClass_.getNumber());
   }
   if (((bitField0_ & 0x00000010) == 0x00000010)) {
     size += com.google.protobuf.CodedOutputStream
       .computeUInt32Size(5, receivedSignalStrength_);
   }
   if (((bitField0_ & 0x00000020) == 0x00000020)) {
     size += com.google.protobuf.CodedOutputStream
       .computeUInt32Size(6, advertisingIntervalSeconds_);
   }
   if (((bitField0_ & 0x00000040) == 0x00000040)) {
     size += com.google.protobuf.CodedOutputStream
       .computeUInt32Size(7, batteryLevelPercentage_);
   }
   if (((bitField0_ & 0x00000080) == 0x00000080)) {
     size += com.google.protobuf.CodedOutputStream
       .computeUInt64Size(8, accelerometerRawValues_);
   }
   if (((bitField0_ & 0x00000100) == 0x00000100)) {
     size += com.google.protobuf.CodedOutputStream
       .computeUInt32Size(9, scopeDriverId_);
   }
   if (((bitField0_ & 0x00000200) == 0x00000200)) {
     size += com.google.protobuf.CodedOutputStream
       .computeUInt32Size(10, fleetCode_);
   }
   if (((bitField0_ & 0x00000400) == 0x00000400)) {
     size += com.google.protobuf.CodedOutputStream
       .computeUInt32Size(11, driverClass_);
   }
   if (((bitField0_ & 0x00000800) == 0x00000800)) {
     size += com.google.protobuf.CodedOutputStream
       .computeUInt32Size(12, customerCode_);
   }
   if (((bitField0_ & 0x00001000) == 0x00001000)) {
     size += com.google.protobuf.CodedOutputStream
       .computeUInt32Size(13, firmwareMajorVersion_);
   }
   if (((bitField0_ & 0x00002000) == 0x00002000)) {
     size += com.google.protobuf.CodedOutputStream
       .computeUInt32Size(14, firmwareMinorVersion_);
   }
   size += getUnknownFields().getSerializedSize();
   memoizedSerializedSize = size;
   return size;
 }

 private static final long serialVersionUID = 0L;
 @java.lang.Override
 protected java.lang.Object writeReplace()
     throws java.io.ObjectStreamException {
   return super.writeReplace();
 }

 public static BluetoothLowEnergyDriverAbsentProto.BluetoothLowEnergyDriverAbsent parseFrom(
     com.google.protobuf.ByteString data)
     throws com.google.protobuf.InvalidProtocolBufferException {
   return PARSER.parseFrom(data);
 }
 public static BluetoothLowEnergyDriverAbsentProto.BluetoothLowEnergyDriverAbsent parseFrom(
     com.google.protobuf.ByteString data,
     com.google.protobuf.ExtensionRegistryLite extensionRegistry)
     throws com.google.protobuf.InvalidProtocolBufferException {
   return PARSER.parseFrom(data, extensionRegistry);
 }
 public static BluetoothLowEnergyDriverAbsentProto.BluetoothLowEnergyDriverAbsent parseFrom(byte[] data)
     throws com.google.protobuf.InvalidProtocolBufferException {
   return PARSER.parseFrom(data);
 }
 public static BluetoothLowEnergyDriverAbsentProto.BluetoothLowEnergyDriverAbsent parseFrom(
     byte[] data,
     com.google.protobuf.ExtensionRegistryLite extensionRegistry)
     throws com.google.protobuf.InvalidProtocolBufferException {
   return PARSER.parseFrom(data, extensionRegistry);
 }
 public static BluetoothLowEnergyDriverAbsentProto.BluetoothLowEnergyDriverAbsent parseFrom(java.io.InputStream input)
     throws java.io.IOException {
   return PARSER.parseFrom(input);
 }
 public static BluetoothLowEnergyDriverAbsentProto.BluetoothLowEnergyDriverAbsent parseFrom(
     java.io.InputStream input,
     com.google.protobuf.ExtensionRegistryLite extensionRegistry)
     throws java.io.IOException {
   return PARSER.parseFrom(input, extensionRegistry);
 }
 public static BluetoothLowEnergyDriverAbsentProto.BluetoothLowEnergyDriverAbsent parseDelimitedFrom(java.io.InputStream input)
     throws java.io.IOException {
   return PARSER.parseDelimitedFrom(input);
 }
 public static BluetoothLowEnergyDriverAbsentProto.BluetoothLowEnergyDriverAbsent parseDelimitedFrom(
     java.io.InputStream input,
     com.google.protobuf.ExtensionRegistryLite extensionRegistry)
     throws java.io.IOException {
   return PARSER.parseDelimitedFrom(input, extensionRegistry);
 }
 public static BluetoothLowEnergyDriverAbsentProto.BluetoothLowEnergyDriverAbsent parseFrom(
     com.google.protobuf.CodedInputStream input)
     throws java.io.IOException {
   return PARSER.parseFrom(input);
 }
 public static BluetoothLowEnergyDriverAbsentProto.BluetoothLowEnergyDriverAbsent parseFrom(
     com.google.protobuf.CodedInputStream input,
     com.google.protobuf.ExtensionRegistryLite extensionRegistry)
     throws java.io.IOException {
   return PARSER.parseFrom(input, extensionRegistry);
 }

 public static Builder newBuilder() { return Builder.create(); }
 public Builder newBuilderForType() { return newBuilder(); }
 public static Builder newBuilder(BluetoothLowEnergyDriverAbsentProto.BluetoothLowEnergyDriverAbsent prototype) {
   return newBuilder().mergeFrom(prototype);
 }
 public Builder toBuilder() { return newBuilder(this); }

 @java.lang.Override
 protected Builder newBuilderForType(
     com.google.protobuf.GeneratedMessage.BuilderParent parent) {
   Builder builder = new Builder(parent);
   return builder;
 }
 /**
  * Protobuf type {@code BluetoothLowEnergyDriverAbsent}
  *
  * <pre>
  * Bluetooth Low Energy Tracking event
  * </pre>
  */
 public static final class Builder extends
     com.google.protobuf.GeneratedMessage.Builder<Builder> implements
     // @@protoc_insertion_point(builder_implements:BluetoothLowEnergyDriverAbsent)
     BluetoothLowEnergyDriverAbsentProto.BluetoothLowEnergyDriverAbsentOrBuilder {
   public static final com.google.protobuf.Descriptors.Descriptor
       getDescriptor() {
     return BluetoothLowEnergyDriverAbsentProto.internal_static_BluetoothLowEnergyDriverAbsent_descriptor;
   }

   protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
       internalGetFieldAccessorTable() {
     return BluetoothLowEnergyDriverAbsentProto.internal_static_BluetoothLowEnergyDriverAbsent_fieldAccessorTable
         .ensureFieldAccessorsInitialized(
             BluetoothLowEnergyDriverAbsentProto.BluetoothLowEnergyDriverAbsent.class, BluetoothLowEnergyDriverAbsentProto.BluetoothLowEnergyDriverAbsent.Builder.class);
   }

   // Construct using BluetoothLowEnergyDriverAbsentProto.BluetoothLowEnergyDriverAbsent.newBuilder()
   private Builder() {
     maybeForceBuilderInitialization();
   }

   private Builder(
       com.google.protobuf.GeneratedMessage.BuilderParent parent) {
     super(parent);
     maybeForceBuilderInitialization();
   }
   private void maybeForceBuilderInitialization() {
     if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
       getHeaderFieldBuilder();
     }
   }
   private static Builder create() {
     return new Builder();
   }

   public Builder clear() {
     super.clear();
     if (headerBuilder_ == null) {
       header_ = EventHeaderProto.EventHeader.getDefaultInstance();
     } else {
       headerBuilder_.clear();
     }
     bitField0_ = (bitField0_ & ~0x00000001);
     reason_ = BluetoothLowEnergyDriverAbsentReasonTypeProto.BluetoothLowEnergyDriverAbsentReasonType.BLUETOOTH_LOW_ENERGY_DRIVER_ABSENT_REASON_UNDEFINED;
     bitField0_ = (bitField0_ & ~0x00000002);
     deviceId_ = 0L;
     bitField0_ = (bitField0_ & ~0x00000004);
     deviceClass_ = BluetoothLowEnergyDeviceClassTypeProto.BluetoothLowEnergyDeviceClassType.BLUETOOTH_LOW_ENERGY_DEVICE_CLASS_UNDEFINED;
     bitField0_ = (bitField0_ & ~0x00000008);
     receivedSignalStrength_ = 0;
     bitField0_ = (bitField0_ & ~0x00000010);
     advertisingIntervalSeconds_ = 0;
     bitField0_ = (bitField0_ & ~0x00000020);
     batteryLevelPercentage_ = 0;
     bitField0_ = (bitField0_ & ~0x00000040);
     accelerometerRawValues_ = 0L;
     bitField0_ = (bitField0_ & ~0x00000080);
     scopeDriverId_ = 0;
     bitField0_ = (bitField0_ & ~0x00000100);
     fleetCode_ = 0;
     bitField0_ = (bitField0_ & ~0x00000200);
     driverClass_ = 0;
     bitField0_ = (bitField0_ & ~0x00000400);
     customerCode_ = 0;
     bitField0_ = (bitField0_ & ~0x00000800);
     firmwareMajorVersion_ = 0;
     bitField0_ = (bitField0_ & ~0x00001000);
     firmwareMinorVersion_ = 0;
     bitField0_ = (bitField0_ & ~0x00002000);
     return this;
   }

   public Builder clone() {
     return create().mergeFrom(buildPartial());
   }

   public com.google.protobuf.Descriptors.Descriptor
       getDescriptorForType() {
     return BluetoothLowEnergyDriverAbsentProto.internal_static_BluetoothLowEnergyDriverAbsent_descriptor;
   }

   public BluetoothLowEnergyDriverAbsentProto.BluetoothLowEnergyDriverAbsent getDefaultInstanceForType() {
     return BluetoothLowEnergyDriverAbsentProto.BluetoothLowEnergyDriverAbsent.getDefaultInstance();
   }

   public BluetoothLowEnergyDriverAbsentProto.BluetoothLowEnergyDriverAbsent build() {
     BluetoothLowEnergyDriverAbsentProto.BluetoothLowEnergyDriverAbsent result = buildPartial();
     if (!result.isInitialized()) {
       throw newUninitializedMessageException(result);
     }
     return result;
   }

   public BluetoothLowEnergyDriverAbsentProto.BluetoothLowEnergyDriverAbsent buildPartial() {
     BluetoothLowEnergyDriverAbsentProto.BluetoothLowEnergyDriverAbsent result = new BluetoothLowEnergyDriverAbsentProto.BluetoothLowEnergyDriverAbsent(this);
     int from_bitField0_ = bitField0_;
     int to_bitField0_ = 0;
     if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
       to_bitField0_ |= 0x00000001;
     }
     if (headerBuilder_ == null) {
       result.header_ = header_;
     } else {
       result.header_ = headerBuilder_.build();
     }
     if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
       to_bitField0_ |= 0x00000002;
     }
     result.reason_ = reason_;
     if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
       to_bitField0_ |= 0x00000004;
     }
     result.deviceId_ = deviceId_;
     if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
       to_bitField0_ |= 0x00000008;
     }
     result.deviceClass_ = deviceClass_;
     if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
       to_bitField0_ |= 0x00000010;
     }
     result.receivedSignalStrength_ = receivedSignalStrength_;
     if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
       to_bitField0_ |= 0x00000020;
     }
     result.advertisingIntervalSeconds_ = advertisingIntervalSeconds_;
     if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
       to_bitField0_ |= 0x00000040;
     }
     result.batteryLevelPercentage_ = batteryLevelPercentage_;
     if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
       to_bitField0_ |= 0x00000080;
     }
     result.accelerometerRawValues_ = accelerometerRawValues_;
     if (((from_bitField0_ & 0x00000100) == 0x00000100)) {
       to_bitField0_ |= 0x00000100;
     }
     result.scopeDriverId_ = scopeDriverId_;
     if (((from_bitField0_ & 0x00000200) == 0x00000200)) {
       to_bitField0_ |= 0x00000200;
     }
     result.fleetCode_ = fleetCode_;
     if (((from_bitField0_ & 0x00000400) == 0x00000400)) {
       to_bitField0_ |= 0x00000400;
     }
     result.driverClass_ = driverClass_;
     if (((from_bitField0_ & 0x00000800) == 0x00000800)) {
       to_bitField0_ |= 0x00000800;
     }
     result.customerCode_ = customerCode_;
     if (((from_bitField0_ & 0x00001000) == 0x00001000)) {
       to_bitField0_ |= 0x00001000;
     }
     result.firmwareMajorVersion_ = firmwareMajorVersion_;
     if (((from_bitField0_ & 0x00002000) == 0x00002000)) {
       to_bitField0_ |= 0x00002000;
     }
     result.firmwareMinorVersion_ = firmwareMinorVersion_;
     result.bitField0_ = to_bitField0_;
     onBuilt();
     return result;
   }

   public Builder mergeFrom(com.google.protobuf.Message other) {
     if (other instanceof BluetoothLowEnergyDriverAbsentProto.BluetoothLowEnergyDriverAbsent) {
       return mergeFrom((BluetoothLowEnergyDriverAbsentProto.BluetoothLowEnergyDriverAbsent)other);
     } else {
       super.mergeFrom(other);
       return this;
     }
   }

   public Builder mergeFrom(BluetoothLowEnergyDriverAbsentProto.BluetoothLowEnergyDriverAbsent other) {
     if (other == BluetoothLowEnergyDriverAbsentProto.BluetoothLowEnergyDriverAbsent.getDefaultInstance()) return this;
     if (other.hasHeader()) {
       mergeHeader(other.getHeader());
     }
     if (other.hasReason()) {
       setReason(other.getReason());
     }
     if (other.hasDeviceId()) {
       setDeviceId(other.getDeviceId());
     }
     if (other.hasDeviceClass()) {
       setDeviceClass(other.getDeviceClass());
     }
     if (other.hasReceivedSignalStrength()) {
       setReceivedSignalStrength(other.getReceivedSignalStrength());
     }
     if (other.hasAdvertisingIntervalSeconds()) {
       setAdvertisingIntervalSeconds(other.getAdvertisingIntervalSeconds());
     }
     if (other.hasBatteryLevelPercentage()) {
       setBatteryLevelPercentage(other.getBatteryLevelPercentage());
     }
     if (other.hasAccelerometerRawValues()) {
       setAccelerometerRawValues(other.getAccelerometerRawValues());
     }
     if (other.hasScopeDriverId()) {
       setScopeDriverId(other.getScopeDriverId());
     }
     if (other.hasFleetCode()) {
       setFleetCode(other.getFleetCode());
     }
     if (other.hasDriverClass()) {
       setDriverClass(other.getDriverClass());
     }
     if (other.hasCustomerCode()) {
       setCustomerCode(other.getCustomerCode());
     }
     if (other.hasFirmwareMajorVersion()) {
       setFirmwareMajorVersion(other.getFirmwareMajorVersion());
     }
     if (other.hasFirmwareMinorVersion()) {
       setFirmwareMinorVersion(other.getFirmwareMinorVersion());
     }
     this.mergeUnknownFields(other.getUnknownFields());
     return this;
   }

   public final boolean isInitialized() {
     if (!hasHeader()) {
       
       return false;
     }
     if (!getHeader().isInitialized()) {
       
       return false;
     }
     return true;
   }

   public Builder mergeFrom(
       com.google.protobuf.CodedInputStream input,
       com.google.protobuf.ExtensionRegistryLite extensionRegistry)
       throws java.io.IOException {
     BluetoothLowEnergyDriverAbsentProto.BluetoothLowEnergyDriverAbsent parsedMessage = null;
     try {
       parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
     } catch (com.google.protobuf.InvalidProtocolBufferException e) {
       parsedMessage = (BluetoothLowEnergyDriverAbsentProto.BluetoothLowEnergyDriverAbsent) e.getUnfinishedMessage();
       throw e;
     } finally {
       if (parsedMessage != null) {
         mergeFrom(parsedMessage);
       }
     }
     return this;
   }
   private int bitField0_;

   private EventHeaderProto.EventHeader header_ = EventHeaderProto.EventHeader.getDefaultInstance();
   private com.google.protobuf.SingleFieldBuilder<
       EventHeaderProto.EventHeader, EventHeaderProto.EventHeader.Builder, EventHeaderProto.EventHeaderOrBuilder> headerBuilder_;
   /**
    * <code>required .EventHeader header = 1;</code>
    */
   public boolean hasHeader() {
     return ((bitField0_ & 0x00000001) == 0x00000001);
   }
   /**
    * <code>required .EventHeader header = 1;</code>
    */
   public EventHeaderProto.EventHeader getHeader() {
     if (headerBuilder_ == null) {
       return header_;
     } else {
       return headerBuilder_.getMessage();
     }
   }
   /**
    * <code>required .EventHeader header = 1;</code>
    */
   public Builder setHeader(EventHeaderProto.EventHeader value) {
     if (headerBuilder_ == null) {
       if (value == null) {
         throw new NullPointerException();
       }
       header_ = value;
       onChanged();
     } else {
       headerBuilder_.setMessage(value);
     }
     bitField0_ |= 0x00000001;
     return this;
   }
   /**
    * <code>required .EventHeader header = 1;</code>
    */
   public Builder setHeader(
       EventHeaderProto.EventHeader.Builder builderForValue) {
     if (headerBuilder_ == null) {
       header_ = builderForValue.build();
       onChanged();
     } else {
       headerBuilder_.setMessage(builderForValue.build());
     }
     bitField0_ |= 0x00000001;
     return this;
   }
   /**
    * <code>required .EventHeader header = 1;</code>
    */
   public Builder mergeHeader(EventHeaderProto.EventHeader value) {
     if (headerBuilder_ == null) {
       if (((bitField0_ & 0x00000001) == 0x00000001) &&
           header_ != EventHeaderProto.EventHeader.getDefaultInstance()) {
         header_ =
           EventHeaderProto.EventHeader.newBuilder(header_).mergeFrom(value).buildPartial();
       } else {
         header_ = value;
       }
       onChanged();
     } else {
       headerBuilder_.mergeFrom(value);
     }
     bitField0_ |= 0x00000001;
     return this;
   }
   /**
    * <code>required .EventHeader header = 1;</code>
    */
   public Builder clearHeader() {
     if (headerBuilder_ == null) {
       header_ = EventHeaderProto.EventHeader.getDefaultInstance();
       onChanged();
     } else {
       headerBuilder_.clear();
     }
     bitField0_ = (bitField0_ & ~0x00000001);
     return this;
   }
   /**
    * <code>required .EventHeader header = 1;</code>
    */
   public EventHeaderProto.EventHeader.Builder getHeaderBuilder() {
     bitField0_ |= 0x00000001;
     onChanged();
     return getHeaderFieldBuilder().getBuilder();
   }
   /**
    * <code>required .EventHeader header = 1;</code>
    */
   public EventHeaderProto.EventHeaderOrBuilder getHeaderOrBuilder() {
     if (headerBuilder_ != null) {
       return headerBuilder_.getMessageOrBuilder();
     } else {
       return header_;
     }
   }
   /**
    * <code>required .EventHeader header = 1;</code>
    */
   private com.google.protobuf.SingleFieldBuilder<
       EventHeaderProto.EventHeader, EventHeaderProto.EventHeader.Builder, EventHeaderProto.EventHeaderOrBuilder> 
       getHeaderFieldBuilder() {
     if (headerBuilder_ == null) {
       headerBuilder_ = new com.google.protobuf.SingleFieldBuilder<
           EventHeaderProto.EventHeader, EventHeaderProto.EventHeader.Builder, EventHeaderProto.EventHeaderOrBuilder>(
               getHeader(),
               getParentForChildren(),
               isClean());
       header_ = null;
     }
     return headerBuilder_;
   }

   private BluetoothLowEnergyDriverAbsentReasonTypeProto.BluetoothLowEnergyDriverAbsentReasonType reason_ = BluetoothLowEnergyDriverAbsentReasonTypeProto.BluetoothLowEnergyDriverAbsentReasonType.BLUETOOTH_LOW_ENERGY_DRIVER_ABSENT_REASON_UNDEFINED;
   /**
    * <code>optional .BluetoothLowEnergyDriverAbsentReasonType reason = 2 [default = BLUETOOTH_LOW_ENERGY_DRIVER_ABSENT_REASON_UNDEFINED];</code>
    *
    * <pre>
    * Reason
    * </pre>
    */
   public boolean hasReason() {
     return ((bitField0_ & 0x00000002) == 0x00000002);
   }
   /**
    * <code>optional .BluetoothLowEnergyDriverAbsentReasonType reason = 2 [default = BLUETOOTH_LOW_ENERGY_DRIVER_ABSENT_REASON_UNDEFINED];</code>
    *
    * <pre>
    * Reason
    * </pre>
    */
   public BluetoothLowEnergyDriverAbsentReasonTypeProto.BluetoothLowEnergyDriverAbsentReasonType getReason() {
     return reason_;
   }
   /**
    * <code>optional .BluetoothLowEnergyDriverAbsentReasonType reason = 2 [default = BLUETOOTH_LOW_ENERGY_DRIVER_ABSENT_REASON_UNDEFINED];</code>
    *
    * <pre>
    * Reason
    * </pre>
    */
   public Builder setReason(BluetoothLowEnergyDriverAbsentReasonTypeProto.BluetoothLowEnergyDriverAbsentReasonType value) {
     if (value == null) {
       throw new NullPointerException();
     }
     bitField0_ |= 0x00000002;
     reason_ = value;
     onChanged();
     return this;
   }
   /**
    * <code>optional .BluetoothLowEnergyDriverAbsentReasonType reason = 2 [default = BLUETOOTH_LOW_ENERGY_DRIVER_ABSENT_REASON_UNDEFINED];</code>
    *
    * <pre>
    * Reason
    * </pre>
    */
   public Builder clearReason() {
     bitField0_ = (bitField0_ & ~0x00000002);
     reason_ = BluetoothLowEnergyDriverAbsentReasonTypeProto.BluetoothLowEnergyDriverAbsentReasonType.BLUETOOTH_LOW_ENERGY_DRIVER_ABSENT_REASON_UNDEFINED;
     onChanged();
     return this;
   }

   private long deviceId_ ;
   /**
    * <code>optional uint64 device_id = 3;</code>
    *
    * <pre>
    * Device IEEE ID (6 bytes)
    * </pre>
    */
   public boolean hasDeviceId() {
     return ((bitField0_ & 0x00000004) == 0x00000004);
   }
   /**
    * <code>optional uint64 device_id = 3;</code>
    *
    * <pre>
    * Device IEEE ID (6 bytes)
    * </pre>
    */
   public long getDeviceId() {
     return deviceId_;
   }
   /**
    * <code>optional uint64 device_id = 3;</code>
    *
    * <pre>
    * Device IEEE ID (6 bytes)
    * </pre>
    */
   public Builder setDeviceId(long value) {
     bitField0_ |= 0x00000004;
     deviceId_ = value;
     onChanged();
     return this;
   }
   /**
    * <code>optional uint64 device_id = 3;</code>
    *
    * <pre>
    * Device IEEE ID (6 bytes)
    * </pre>
    */
   public Builder clearDeviceId() {
     bitField0_ = (bitField0_ & ~0x00000004);
     deviceId_ = 0L;
     onChanged();
     return this;
   }

   private BluetoothLowEnergyDeviceClassTypeProto.BluetoothLowEnergyDeviceClassType deviceClass_ = BluetoothLowEnergyDeviceClassTypeProto.BluetoothLowEnergyDeviceClassType.BLUETOOTH_LOW_ENERGY_DEVICE_CLASS_UNDEFINED;
   /**
    * <code>optional .BluetoothLowEnergyDeviceClassType device_class = 4 [default = BLUETOOTH_LOW_ENERGY_DEVICE_CLASS_UNDEFINED];</code>
    *
    * <pre>
    * Device class type
    * </pre>
    */
   public boolean hasDeviceClass() {
     return ((bitField0_ & 0x00000008) == 0x00000008);
   }
   /**
    * <code>optional .BluetoothLowEnergyDeviceClassType device_class = 4 [default = BLUETOOTH_LOW_ENERGY_DEVICE_CLASS_UNDEFINED];</code>
    *
    * <pre>
    * Device class type
    * </pre>
    */
   public BluetoothLowEnergyDeviceClassTypeProto.BluetoothLowEnergyDeviceClassType getDeviceClass() {
     return deviceClass_;
   }
   /**
    * <code>optional .BluetoothLowEnergyDeviceClassType device_class = 4 [default = BLUETOOTH_LOW_ENERGY_DEVICE_CLASS_UNDEFINED];</code>
    *
    * <pre>
    * Device class type
    * </pre>
    */
   public Builder setDeviceClass(BluetoothLowEnergyDeviceClassTypeProto.BluetoothLowEnergyDeviceClassType value) {
     if (value == null) {
       throw new NullPointerException();
     }
     bitField0_ |= 0x00000008;
     deviceClass_ = value;
     onChanged();
     return this;
   }
   /**
    * <code>optional .BluetoothLowEnergyDeviceClassType device_class = 4 [default = BLUETOOTH_LOW_ENERGY_DEVICE_CLASS_UNDEFINED];</code>
    *
    * <pre>
    * Device class type
    * </pre>
    */
   public Builder clearDeviceClass() {
     bitField0_ = (bitField0_ & ~0x00000008);
     deviceClass_ = BluetoothLowEnergyDeviceClassTypeProto.BluetoothLowEnergyDeviceClassType.BLUETOOTH_LOW_ENERGY_DEVICE_CLASS_UNDEFINED;
     onChanged();
     return this;
   }

   private int receivedSignalStrength_ ;
   /**
    * <code>optional uint32 received_signal_strength = 5;</code>
    *
    * <pre>
    * Received signal strength (RSSI)
    * </pre>
    */
   public boolean hasReceivedSignalStrength() {
     return ((bitField0_ & 0x00000010) == 0x00000010);
   }
   /**
    * <code>optional uint32 received_signal_strength = 5;</code>
    *
    * <pre>
    * Received signal strength (RSSI)
    * </pre>
    */
   public int getReceivedSignalStrength() {
     return receivedSignalStrength_;
   }
   /**
    * <code>optional uint32 received_signal_strength = 5;</code>
    *
    * <pre>
    * Received signal strength (RSSI)
    * </pre>
    */
   public Builder setReceivedSignalStrength(int value) {
     bitField0_ |= 0x00000010;
     receivedSignalStrength_ = value;
     onChanged();
     return this;
   }
   /**
    * <code>optional uint32 received_signal_strength = 5;</code>
    *
    * <pre>
    * Received signal strength (RSSI)
    * </pre>
    */
   public Builder clearReceivedSignalStrength() {
     bitField0_ = (bitField0_ & ~0x00000010);
     receivedSignalStrength_ = 0;
     onChanged();
     return this;
   }

   private int advertisingIntervalSeconds_ ;
   /**
    * <code>optional uint32 advertising_interval_seconds = 6;</code>
    *
    * <pre>
    * Advertising interval in seconds
    * </pre>
    */
   public boolean hasAdvertisingIntervalSeconds() {
     return ((bitField0_ & 0x00000020) == 0x00000020);
   }
   /**
    * <code>optional uint32 advertising_interval_seconds = 6;</code>
    *
    * <pre>
    * Advertising interval in seconds
    * </pre>
    */
   public int getAdvertisingIntervalSeconds() {
     return advertisingIntervalSeconds_;
   }
   /**
    * <code>optional uint32 advertising_interval_seconds = 6;</code>
    *
    * <pre>
    * Advertising interval in seconds
    * </pre>
    */
   public Builder setAdvertisingIntervalSeconds(int value) {
     bitField0_ |= 0x00000020;
     advertisingIntervalSeconds_ = value;
     onChanged();
     return this;
   }
   /**
    * <code>optional uint32 advertising_interval_seconds = 6;</code>
    *
    * <pre>
    * Advertising interval in seconds
    * </pre>
    */
   public Builder clearAdvertisingIntervalSeconds() {
     bitField0_ = (bitField0_ & ~0x00000020);
     advertisingIntervalSeconds_ = 0;
     onChanged();
     return this;
   }

   private int batteryLevelPercentage_ ;
   /**
    * <code>optional uint32 battery_level_percentage = 7;</code>
    *
    * <pre>
    * Battery level percentage 0..100
    * </pre>
    */
   public boolean hasBatteryLevelPercentage() {
     return ((bitField0_ & 0x00000040) == 0x00000040);
   }
   /**
    * <code>optional uint32 battery_level_percentage = 7;</code>
    *
    * <pre>
    * Battery level percentage 0..100
    * </pre>
    */
   public int getBatteryLevelPercentage() {
     return batteryLevelPercentage_;
   }
   /**
    * <code>optional uint32 battery_level_percentage = 7;</code>
    *
    * <pre>
    * Battery level percentage 0..100
    * </pre>
    */
   public Builder setBatteryLevelPercentage(int value) {
     bitField0_ |= 0x00000040;
     batteryLevelPercentage_ = value;
     onChanged();
     return this;
   }
   /**
    * <code>optional uint32 battery_level_percentage = 7;</code>
    *
    * <pre>
    * Battery level percentage 0..100
    * </pre>
    */
   public Builder clearBatteryLevelPercentage() {
     bitField0_ = (bitField0_ & ~0x00000040);
     batteryLevelPercentage_ = 0;
     onChanged();
     return this;
   }

   private long accelerometerRawValues_ ;
   /**
    * <code>optional uint64 accelerometer_raw_values = 8;</code>
    *
    * <pre>
    * Accelerometer raw values (8 bytes)
    * </pre>
    */
   public boolean hasAccelerometerRawValues() {
     return ((bitField0_ & 0x00000080) == 0x00000080);
   }
   /**
    * <code>optional uint64 accelerometer_raw_values = 8;</code>
    *
    * <pre>
    * Accelerometer raw values (8 bytes)
    * </pre>
    */
   public long getAccelerometerRawValues() {
     return accelerometerRawValues_;
   }
   /**
    * <code>optional uint64 accelerometer_raw_values = 8;</code>
    *
    * <pre>
    * Accelerometer raw values (8 bytes)
    * </pre>
    */
   public Builder setAccelerometerRawValues(long value) {
     bitField0_ |= 0x00000080;
     accelerometerRawValues_ = value;
     onChanged();
     return this;
   }
   /**
    * <code>optional uint64 accelerometer_raw_values = 8;</code>
    *
    * <pre>
    * Accelerometer raw values (8 bytes)
    * </pre>
    */
   public Builder clearAccelerometerRawValues() {
     bitField0_ = (bitField0_ & ~0x00000080);
     accelerometerRawValues_ = 0L;
     onChanged();
     return this;
   }

   private int scopeDriverId_ ;
   /**
    * <code>optional uint32 scope_driver_id = 9;</code>
    *
    * <pre>
    * Custom Driver Identification programmed by the customer
    * </pre>
    */
   public boolean hasScopeDriverId() {
     return ((bitField0_ & 0x00000100) == 0x00000100);
   }
   /**
    * <code>optional uint32 scope_driver_id = 9;</code>
    *
    * <pre>
    * Custom Driver Identification programmed by the customer
    * </pre>
    */
   public int getScopeDriverId() {
     return scopeDriverId_;
   }
   /**
    * <code>optional uint32 scope_driver_id = 9;</code>
    *
    * <pre>
    * Custom Driver Identification programmed by the customer
    * </pre>
    */
   public Builder setScopeDriverId(int value) {
     bitField0_ |= 0x00000100;
     scopeDriverId_ = value;
     onChanged();
     return this;
   }
   /**
    * <code>optional uint32 scope_driver_id = 9;</code>
    *
    * <pre>
    * Custom Driver Identification programmed by the customer
    * </pre>
    */
   public Builder clearScopeDriverId() {
     bitField0_ = (bitField0_ & ~0x00000100);
     scopeDriverId_ = 0;
     onChanged();
     return this;
   }

   private int fleetCode_ ;
   /**
    * <code>optional uint32 fleet_code = 10;</code>
    *
    * <pre>
    * Fleet code of the device that determines which group of vehicles may be driven
    * </pre>
    */
   public boolean hasFleetCode() {
     return ((bitField0_ & 0x00000200) == 0x00000200);
   }
   /**
    * <code>optional uint32 fleet_code = 10;</code>
    *
    * <pre>
    * Fleet code of the device that determines which group of vehicles may be driven
    * </pre>
    */
   public int getFleetCode() {
     return fleetCode_;
   }
   /**
    * <code>optional uint32 fleet_code = 10;</code>
    *
    * <pre>
    * Fleet code of the device that determines which group of vehicles may be driven
    * </pre>
    */
   public Builder setFleetCode(int value) {
     bitField0_ |= 0x00000200;
     fleetCode_ = value;
     onChanged();
     return this;
   }
   /**
    * <code>optional uint32 fleet_code = 10;</code>
    *
    * <pre>
    * Fleet code of the device that determines which group of vehicles may be driven
    * </pre>
    */
   public Builder clearFleetCode() {
     bitField0_ = (bitField0_ & ~0x00000200);
     fleetCode_ = 0;
     onChanged();
     return this;
   }

   private int driverClass_ ;
   /**
    * <code>optional uint32 driver_class = 11;</code>
    *
    * <pre>
    * Class of vehicle that may be driver (Customer defined)
    * </pre>
    */
   public boolean hasDriverClass() {
     return ((bitField0_ & 0x00000400) == 0x00000400);
   }
   /**
    * <code>optional uint32 driver_class = 11;</code>
    *
    * <pre>
    * Class of vehicle that may be driver (Customer defined)
    * </pre>
    */
   public int getDriverClass() {
     return driverClass_;
   }
   /**
    * <code>optional uint32 driver_class = 11;</code>
    *
    * <pre>
    * Class of vehicle that may be driver (Customer defined)
    * </pre>
    */
   public Builder setDriverClass(int value) {
     bitField0_ |= 0x00000400;
     driverClass_ = value;
     onChanged();
     return this;
   }
   /**
    * <code>optional uint32 driver_class = 11;</code>
    *
    * <pre>
    * Class of vehicle that may be driver (Customer defined)
    * </pre>
    */
   public Builder clearDriverClass() {
     bitField0_ = (bitField0_ & ~0x00000400);
     driverClass_ = 0;
     onChanged();
     return this;
   }

   private int customerCode_ ;
   /**
    * <code>optional uint32 customer_code = 12;</code>
    *
    * <pre>
    * Customer Code
    * </pre>
    */
   public boolean hasCustomerCode() {
     return ((bitField0_ & 0x00000800) == 0x00000800);
   }
   /**
    * <code>optional uint32 customer_code = 12;</code>
    *
    * <pre>
    * Customer Code
    * </pre>
    */
   public int getCustomerCode() {
     return customerCode_;
   }
   /**
    * <code>optional uint32 customer_code = 12;</code>
    *
    * <pre>
    * Customer Code
    * </pre>
    */
   public Builder setCustomerCode(int value) {
     bitField0_ |= 0x00000800;
     customerCode_ = value;
     onChanged();
     return this;
   }
   /**
    * <code>optional uint32 customer_code = 12;</code>
    *
    * <pre>
    * Customer Code
    * </pre>
    */
   public Builder clearCustomerCode() {
     bitField0_ = (bitField0_ & ~0x00000800);
     customerCode_ = 0;
     onChanged();
     return this;
   }

   private int firmwareMajorVersion_ ;
   /**
    * <code>optional uint32 firmware_major_version = 13;</code>
    *
    * <pre>
    * Firmware major version
    * </pre>
    */
   public boolean hasFirmwareMajorVersion() {
     return ((bitField0_ & 0x00001000) == 0x00001000);
   }
   /**
    * <code>optional uint32 firmware_major_version = 13;</code>
    *
    * <pre>
    * Firmware major version
    * </pre>
    */
   public int getFirmwareMajorVersion() {
     return firmwareMajorVersion_;
   }
   /**
    * <code>optional uint32 firmware_major_version = 13;</code>
    *
    * <pre>
    * Firmware major version
    * </pre>
    */
   public Builder setFirmwareMajorVersion(int value) {
     bitField0_ |= 0x00001000;
     firmwareMajorVersion_ = value;
     onChanged();
     return this;
   }
   /**
    * <code>optional uint32 firmware_major_version = 13;</code>
    *
    * <pre>
    * Firmware major version
    * </pre>
    */
   public Builder clearFirmwareMajorVersion() {
     bitField0_ = (bitField0_ & ~0x00001000);
     firmwareMajorVersion_ = 0;
     onChanged();
     return this;
   }

   private int firmwareMinorVersion_ ;
   /**
    * <code>optional uint32 firmware_minor_version = 14;</code>
    *
    * <pre>
    * Firmware minor version
    * </pre>
    */
   public boolean hasFirmwareMinorVersion() {
     return ((bitField0_ & 0x00002000) == 0x00002000);
   }
   /**
    * <code>optional uint32 firmware_minor_version = 14;</code>
    *
    * <pre>
    * Firmware minor version
    * </pre>
    */
   public int getFirmwareMinorVersion() {
     return firmwareMinorVersion_;
   }
   /**
    * <code>optional uint32 firmware_minor_version = 14;</code>
    *
    * <pre>
    * Firmware minor version
    * </pre>
    */
   public Builder setFirmwareMinorVersion(int value) {
     bitField0_ |= 0x00002000;
     firmwareMinorVersion_ = value;
     onChanged();
     return this;
   }
   /**
    * <code>optional uint32 firmware_minor_version = 14;</code>
    *
    * <pre>
    * Firmware minor version
    * </pre>
    */
   public Builder clearFirmwareMinorVersion() {
     bitField0_ = (bitField0_ & ~0x00002000);
     firmwareMinorVersion_ = 0;
     onChanged();
     return this;
   }

   // @@protoc_insertion_point(builder_scope:BluetoothLowEnergyDriverAbsent)
 }

 static {
   defaultInstance = new BluetoothLowEnergyDriverAbsent(true);
   defaultInstance.initFields();
 }

 // @@protoc_insertion_point(class_scope:BluetoothLowEnergyDriverAbsent)
}

private static final com.google.protobuf.Descriptors.Descriptor
 internal_static_BluetoothLowEnergyDriverAbsent_descriptor;
private static
 com.google.protobuf.GeneratedMessage.FieldAccessorTable
   internal_static_BluetoothLowEnergyDriverAbsent_fieldAccessorTable;

public static com.google.protobuf.Descriptors.FileDescriptor
   getDescriptor() {
 return descriptor;
}
private static com.google.protobuf.Descriptors.FileDescriptor
   descriptor;
static {
 java.lang.String[] descriptorData = {
   "\n)BluetoothLowEnergyDriverAbsentProto.pr" +
   "oto\032\026EventHeaderProto.proto\0329Enums/Bluet" +
   "oothLowEnergyDriverAbsentReasonTypeProto" +
   ".proto\0322Enums/BluetoothLowEnergyDeviceCl" +
   "assTypeProto.proto\"\316\004\n\036BluetoothLowEnerg" +
   "yDriverAbsent\022\034\n\006header\030\001 \002(\0132\014.EventHea" +
   "der\022n\n\006reason\030\002 \001(\0162).BluetoothLowEnergy" +
   "DriverAbsentReasonType:3BLUETOOTH_LOW_EN" +
   "ERGY_DRIVER_ABSENT_REASON_UNDEFINED\022\021\n\td" +
   "evice_id\030\003 \001(\004\022e\n\014device_class\030\004 \001(\0162\".B",
   "luetoothLowEnergyDeviceClassType:+BLUETO" +
   "OTH_LOW_ENERGY_DEVICE_CLASS_UNDEFINED\022 \n" +
   "\030received_signal_strength\030\005 \001(\r\022$\n\034adver" +
   "tising_interval_seconds\030\006 \001(\r\022 \n\030battery" +
   "_level_percentage\030\007 \001(\r\022 \n\030accelerometer" +
   "_raw_values\030\010 \001(\004\022\027\n\017scope_driver_id\030\t \001" +
   "(\r\022\022\n\nfleet_code\030\n \001(\r\022\024\n\014driver_class\030\013" +
   " \001(\r\022\025\n\rcustomer_code\030\014 \001(\r\022\036\n\026firmware_" +
   "major_version\030\r \001(\r\022\036\n\026firmware_minor_ve" +
   "rsion\030\016 \001(\r"
 };
 com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
     new com.google.protobuf.Descriptors.FileDescriptor.    InternalDescriptorAssigner() {
       public com.google.protobuf.ExtensionRegistry assignDescriptors(
           com.google.protobuf.Descriptors.FileDescriptor root) {
         descriptor = root;
         return null;
       }
     };
 com.google.protobuf.Descriptors.FileDescriptor
   .internalBuildGeneratedFileFrom(descriptorData,
     new com.google.protobuf.Descriptors.FileDescriptor[] {
       EventHeaderProto.getDescriptor(),
       BluetoothLowEnergyDriverAbsentReasonTypeProto.getDescriptor(),
       BluetoothLowEnergyDeviceClassTypeProto.getDescriptor(),
     }, assigner);
 internal_static_BluetoothLowEnergyDriverAbsent_descriptor =
   getDescriptor().getMessageTypes().get(0);
 internal_static_BluetoothLowEnergyDriverAbsent_fieldAccessorTable = new
   com.google.protobuf.GeneratedMessage.FieldAccessorTable(
     internal_static_BluetoothLowEnergyDriverAbsent_descriptor,
     new java.lang.String[] { "Header", "Reason", "DeviceId", "DeviceClass", "ReceivedSignalStrength", "AdvertisingIntervalSeconds", "BatteryLevelPercentage", "AccelerometerRawValues", "ScopeDriverId", "FleetCode", "DriverClass", "CustomerCode", "FirmwareMajorVersion", "FirmwareMinorVersion", });
 EventHeaderProto.getDescriptor();
 BluetoothLowEnergyDriverAbsentReasonTypeProto.getDescriptor();
 BluetoothLowEnergyDeviceClassTypeProto.getDescriptor();
}

// @@protoc_insertion_point(outer_class_scope)
}
