package scopeProto;

//Generated by the protocol buffer compiler.  DO NOT EDIT!
//source: FuelDataProto.proto

public final class FuelDataProto {
private FuelDataProto() {}
public static void registerAllExtensions(
   com.google.protobuf.ExtensionRegistry registry) {
}
public interface FuelDataOrBuilder extends
   // @@protoc_insertion_point(interface_extends:FuelData)
   com.google.protobuf.MessageOrBuilder {

 /**
  * <code>required .EventHeader header = 1;</code>
  */
 boolean hasHeader();
 /**
  * <code>required .EventHeader header = 1;</code>
  */
 EventHeaderProto.EventHeader getHeader();
 /**
  * <code>required .EventHeader header = 1;</code>
  */
 EventHeaderProto.EventHeaderOrBuilder getHeaderOrBuilder();

 /**
  * <code>optional uint32 reason = 2;</code>
  *
  * <pre>
  * Reason for event
  * </pre>
  */
 boolean hasReason();
 /**
  * <code>optional uint32 reason = 2;</code>
  *
  * <pre>
  * Reason for event
  * </pre>
  */
 int getReason();

 /**
  * <code>optional float fuel_level_percents = 3;</code>
  *
  * <pre>
  * Fuel level in percents. 0..100. Precision: 0.1
  * </pre>
  */
 boolean hasFuelLevelPercents();
 /**
  * <code>optional float fuel_level_percents = 3;</code>
  *
  * <pre>
  * Fuel level in percents. 0..100. Precision: 0.1
  * </pre>
  */
 float getFuelLevelPercents();

 /**
  * <code>optional int32 total_fuel_liters = 4;</code>
  *
  * <pre>
  * Total fuel volume in liters
  * </pre>
  */
 boolean hasTotalFuelLiters();
 /**
  * <code>optional int32 total_fuel_liters = 4;</code>
  *
  * <pre>
  * Total fuel volume in liters
  * </pre>
  */
 int getTotalFuelLiters();

 /**
  * <code>optional bool fuel_cap_open = 5;</code>
  *
  * <pre>
  * Indicates whether fuel cap is open. 0 - fuel cap closed; 1 - fuel cap open
  * </pre>
  */
 boolean hasFuelCapOpen();
 /**
  * <code>optional bool fuel_cap_open = 5;</code>
  *
  * <pre>
  * Indicates whether fuel cap is open. 0 - fuel cap closed; 1 - fuel cap open
  * </pre>
  */
 boolean getFuelCapOpen();

 /**
  * <code>optional float minimum_fuel_level_percents = 6;</code>
  *
  * <pre>
  * Percentage of the minimum fuel level. (0..100). Precision: 0.1
  * </pre>
  */
 boolean hasMinimumFuelLevelPercents();
 /**
  * <code>optional float minimum_fuel_level_percents = 6;</code>
  *
  * <pre>
  * Percentage of the minimum fuel level. (0..100). Precision: 0.1
  * </pre>
  */
 float getMinimumFuelLevelPercents();
}
/**
* Protobuf type {@code FuelData}
*
* <pre>
* Fuel Data event
* </pre>
*/
public static final class FuelData extends
   com.google.protobuf.GeneratedMessage implements
   // @@protoc_insertion_point(message_implements:FuelData)
   FuelDataOrBuilder {
 // Use FuelData.newBuilder() to construct.
 private FuelData(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
   super(builder);
   this.unknownFields = builder.getUnknownFields();
 }
 private FuelData(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

 private static final FuelData defaultInstance;
 public static FuelData getDefaultInstance() {
   return defaultInstance;
 }

 public FuelData getDefaultInstanceForType() {
   return defaultInstance;
 }

 private final com.google.protobuf.UnknownFieldSet unknownFields;
 @java.lang.Override
 public final com.google.protobuf.UnknownFieldSet
     getUnknownFields() {
   return this.unknownFields;
 }
 private FuelData(
     com.google.protobuf.CodedInputStream input,
     com.google.protobuf.ExtensionRegistryLite extensionRegistry)
     throws com.google.protobuf.InvalidProtocolBufferException {
   initFields();
   int mutable_bitField0_ = 0;
   com.google.protobuf.UnknownFieldSet.Builder unknownFields =
       com.google.protobuf.UnknownFieldSet.newBuilder();
   try {
     boolean done = false;
     while (!done) {
       int tag = input.readTag();
       switch (tag) {
         case 0:
           done = true;
           break;
         default: {
           if (!parseUnknownField(input, unknownFields,
                                  extensionRegistry, tag)) {
             done = true;
           }
           break;
         }
         case 10: {
           EventHeaderProto.EventHeader.Builder subBuilder = null;
           if (((bitField0_ & 0x00000001) == 0x00000001)) {
             subBuilder = header_.toBuilder();
           }
           header_ = input.readMessage(EventHeaderProto.EventHeader.PARSER, extensionRegistry);
           if (subBuilder != null) {
             subBuilder.mergeFrom(header_);
             header_ = subBuilder.buildPartial();
           }
           bitField0_ |= 0x00000001;
           break;
         }
         case 16: {
           bitField0_ |= 0x00000002;
           reason_ = input.readUInt32();
           break;
         }
         case 29: {
           bitField0_ |= 0x00000004;
           fuelLevelPercents_ = input.readFloat();
           break;
         }
         case 32: {
           bitField0_ |= 0x00000008;
           totalFuelLiters_ = input.readInt32();
           break;
         }
         case 40: {
           bitField0_ |= 0x00000010;
           fuelCapOpen_ = input.readBool();
           break;
         }
         case 53: {
           bitField0_ |= 0x00000020;
           minimumFuelLevelPercents_ = input.readFloat();
           break;
         }
       }
     }
   } catch (com.google.protobuf.InvalidProtocolBufferException e) {
     throw e.setUnfinishedMessage(this);
   } catch (java.io.IOException e) {
     throw new com.google.protobuf.InvalidProtocolBufferException(
         e.getMessage()).setUnfinishedMessage(this);
   } finally {
     this.unknownFields = unknownFields.build();
     makeExtensionsImmutable();
   }
 }
 public static final com.google.protobuf.Descriptors.Descriptor
     getDescriptor() {
   return FuelDataProto.internal_static_FuelData_descriptor;
 }

 protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
     internalGetFieldAccessorTable() {
   return FuelDataProto.internal_static_FuelData_fieldAccessorTable
       .ensureFieldAccessorsInitialized(
           FuelDataProto.FuelData.class, FuelDataProto.FuelData.Builder.class);
 }

 public static com.google.protobuf.Parser<FuelData> PARSER =
     new com.google.protobuf.AbstractParser<FuelData>() {
   public FuelData parsePartialFrom(
       com.google.protobuf.CodedInputStream input,
       com.google.protobuf.ExtensionRegistryLite extensionRegistry)
       throws com.google.protobuf.InvalidProtocolBufferException {
     return new FuelData(input, extensionRegistry);
   }
 };

 @java.lang.Override
 public com.google.protobuf.Parser<FuelData> getParserForType() {
   return PARSER;
 }

 private int bitField0_;
 public static final int HEADER_FIELD_NUMBER = 1;
 private EventHeaderProto.EventHeader header_;
 /**
  * <code>required .EventHeader header = 1;</code>
  */
 public boolean hasHeader() {
   return ((bitField0_ & 0x00000001) == 0x00000001);
 }
 /**
  * <code>required .EventHeader header = 1;</code>
  */
 public EventHeaderProto.EventHeader getHeader() {
   return header_;
 }
 /**
  * <code>required .EventHeader header = 1;</code>
  */
 public EventHeaderProto.EventHeaderOrBuilder getHeaderOrBuilder() {
   return header_;
 }

 public static final int REASON_FIELD_NUMBER = 2;
 private int reason_;
 /**
  * <code>optional uint32 reason = 2;</code>
  *
  * <pre>
  * Reason for event
  * </pre>
  */
 public boolean hasReason() {
   return ((bitField0_ & 0x00000002) == 0x00000002);
 }
 /**
  * <code>optional uint32 reason = 2;</code>
  *
  * <pre>
  * Reason for event
  * </pre>
  */
 public int getReason() {
   return reason_;
 }

 public static final int FUEL_LEVEL_PERCENTS_FIELD_NUMBER = 3;
 private float fuelLevelPercents_;
 /**
  * <code>optional float fuel_level_percents = 3;</code>
  *
  * <pre>
  * Fuel level in percents. 0..100. Precision: 0.1
  * </pre>
  */
 public boolean hasFuelLevelPercents() {
   return ((bitField0_ & 0x00000004) == 0x00000004);
 }
 /**
  * <code>optional float fuel_level_percents = 3;</code>
  *
  * <pre>
  * Fuel level in percents. 0..100. Precision: 0.1
  * </pre>
  */
 public float getFuelLevelPercents() {
   return fuelLevelPercents_;
 }

 public static final int TOTAL_FUEL_LITERS_FIELD_NUMBER = 4;
 private int totalFuelLiters_;
 /**
  * <code>optional int32 total_fuel_liters = 4;</code>
  *
  * <pre>
  * Total fuel volume in liters
  * </pre>
  */
 public boolean hasTotalFuelLiters() {
   return ((bitField0_ & 0x00000008) == 0x00000008);
 }
 /**
  * <code>optional int32 total_fuel_liters = 4;</code>
  *
  * <pre>
  * Total fuel volume in liters
  * </pre>
  */
 public int getTotalFuelLiters() {
   return totalFuelLiters_;
 }

 public static final int FUEL_CAP_OPEN_FIELD_NUMBER = 5;
 private boolean fuelCapOpen_;
 /**
  * <code>optional bool fuel_cap_open = 5;</code>
  *
  * <pre>
  * Indicates whether fuel cap is open. 0 - fuel cap closed; 1 - fuel cap open
  * </pre>
  */
 public boolean hasFuelCapOpen() {
   return ((bitField0_ & 0x00000010) == 0x00000010);
 }
 /**
  * <code>optional bool fuel_cap_open = 5;</code>
  *
  * <pre>
  * Indicates whether fuel cap is open. 0 - fuel cap closed; 1 - fuel cap open
  * </pre>
  */
 public boolean getFuelCapOpen() {
   return fuelCapOpen_;
 }

 public static final int MINIMUM_FUEL_LEVEL_PERCENTS_FIELD_NUMBER = 6;
 private float minimumFuelLevelPercents_;
 /**
  * <code>optional float minimum_fuel_level_percents = 6;</code>
  *
  * <pre>
  * Percentage of the minimum fuel level. (0..100). Precision: 0.1
  * </pre>
  */
 public boolean hasMinimumFuelLevelPercents() {
   return ((bitField0_ & 0x00000020) == 0x00000020);
 }
 /**
  * <code>optional float minimum_fuel_level_percents = 6;</code>
  *
  * <pre>
  * Percentage of the minimum fuel level. (0..100). Precision: 0.1
  * </pre>
  */
 public float getMinimumFuelLevelPercents() {
   return minimumFuelLevelPercents_;
 }

 private void initFields() {
   header_ = EventHeaderProto.EventHeader.getDefaultInstance();
   reason_ = 0;
   fuelLevelPercents_ = 0F;
   totalFuelLiters_ = 0;
   fuelCapOpen_ = false;
   minimumFuelLevelPercents_ = 0F;
 }
 private byte memoizedIsInitialized = -1;
 public final boolean isInitialized() {
   byte isInitialized = memoizedIsInitialized;
   if (isInitialized == 1) return true;
   if (isInitialized == 0) return false;

   if (!hasHeader()) {
     memoizedIsInitialized = 0;
     return false;
   }
   if (!getHeader().isInitialized()) {
     memoizedIsInitialized = 0;
     return false;
   }
   memoizedIsInitialized = 1;
   return true;
 }

 public void writeTo(com.google.protobuf.CodedOutputStream output)
                     throws java.io.IOException {
   getSerializedSize();
   if (((bitField0_ & 0x00000001) == 0x00000001)) {
     output.writeMessage(1, header_);
   }
   if (((bitField0_ & 0x00000002) == 0x00000002)) {
     output.writeUInt32(2, reason_);
   }
   if (((bitField0_ & 0x00000004) == 0x00000004)) {
     output.writeFloat(3, fuelLevelPercents_);
   }
   if (((bitField0_ & 0x00000008) == 0x00000008)) {
     output.writeInt32(4, totalFuelLiters_);
   }
   if (((bitField0_ & 0x00000010) == 0x00000010)) {
     output.writeBool(5, fuelCapOpen_);
   }
   if (((bitField0_ & 0x00000020) == 0x00000020)) {
     output.writeFloat(6, minimumFuelLevelPercents_);
   }
   getUnknownFields().writeTo(output);
 }

 private int memoizedSerializedSize = -1;
 public int getSerializedSize() {
   int size = memoizedSerializedSize;
   if (size != -1) return size;

   size = 0;
   if (((bitField0_ & 0x00000001) == 0x00000001)) {
     size += com.google.protobuf.CodedOutputStream
       .computeMessageSize(1, header_);
   }
   if (((bitField0_ & 0x00000002) == 0x00000002)) {
     size += com.google.protobuf.CodedOutputStream
       .computeUInt32Size(2, reason_);
   }
   if (((bitField0_ & 0x00000004) == 0x00000004)) {
     size += com.google.protobuf.CodedOutputStream
       .computeFloatSize(3, fuelLevelPercents_);
   }
   if (((bitField0_ & 0x00000008) == 0x00000008)) {
     size += com.google.protobuf.CodedOutputStream
       .computeInt32Size(4, totalFuelLiters_);
   }
   if (((bitField0_ & 0x00000010) == 0x00000010)) {
     size += com.google.protobuf.CodedOutputStream
       .computeBoolSize(5, fuelCapOpen_);
   }
   if (((bitField0_ & 0x00000020) == 0x00000020)) {
     size += com.google.protobuf.CodedOutputStream
       .computeFloatSize(6, minimumFuelLevelPercents_);
   }
   size += getUnknownFields().getSerializedSize();
   memoizedSerializedSize = size;
   return size;
 }

 private static final long serialVersionUID = 0L;
 @java.lang.Override
 protected java.lang.Object writeReplace()
     throws java.io.ObjectStreamException {
   return super.writeReplace();
 }

 public static FuelDataProto.FuelData parseFrom(
     com.google.protobuf.ByteString data)
     throws com.google.protobuf.InvalidProtocolBufferException {
   return PARSER.parseFrom(data);
 }
 public static FuelDataProto.FuelData parseFrom(
     com.google.protobuf.ByteString data,
     com.google.protobuf.ExtensionRegistryLite extensionRegistry)
     throws com.google.protobuf.InvalidProtocolBufferException {
   return PARSER.parseFrom(data, extensionRegistry);
 }
 public static FuelDataProto.FuelData parseFrom(byte[] data)
     throws com.google.protobuf.InvalidProtocolBufferException {
   return PARSER.parseFrom(data);
 }
 public static FuelDataProto.FuelData parseFrom(
     byte[] data,
     com.google.protobuf.ExtensionRegistryLite extensionRegistry)
     throws com.google.protobuf.InvalidProtocolBufferException {
   return PARSER.parseFrom(data, extensionRegistry);
 }
 public static FuelDataProto.FuelData parseFrom(java.io.InputStream input)
     throws java.io.IOException {
   return PARSER.parseFrom(input);
 }
 public static FuelDataProto.FuelData parseFrom(
     java.io.InputStream input,
     com.google.protobuf.ExtensionRegistryLite extensionRegistry)
     throws java.io.IOException {
   return PARSER.parseFrom(input, extensionRegistry);
 }
 public static FuelDataProto.FuelData parseDelimitedFrom(java.io.InputStream input)
     throws java.io.IOException {
   return PARSER.parseDelimitedFrom(input);
 }
 public static FuelDataProto.FuelData parseDelimitedFrom(
     java.io.InputStream input,
     com.google.protobuf.ExtensionRegistryLite extensionRegistry)
     throws java.io.IOException {
   return PARSER.parseDelimitedFrom(input, extensionRegistry);
 }
 public static FuelDataProto.FuelData parseFrom(
     com.google.protobuf.CodedInputStream input)
     throws java.io.IOException {
   return PARSER.parseFrom(input);
 }
 public static FuelDataProto.FuelData parseFrom(
     com.google.protobuf.CodedInputStream input,
     com.google.protobuf.ExtensionRegistryLite extensionRegistry)
     throws java.io.IOException {
   return PARSER.parseFrom(input, extensionRegistry);
 }

 public static Builder newBuilder() { return Builder.create(); }
 public Builder newBuilderForType() { return newBuilder(); }
 public static Builder newBuilder(FuelDataProto.FuelData prototype) {
   return newBuilder().mergeFrom(prototype);
 }
 public Builder toBuilder() { return newBuilder(this); }

 @java.lang.Override
 protected Builder newBuilderForType(
     com.google.protobuf.GeneratedMessage.BuilderParent parent) {
   Builder builder = new Builder(parent);
   return builder;
 }
 /**
  * Protobuf type {@code FuelData}
  *
  * <pre>
  * Fuel Data event
  * </pre>
  */
 public static final class Builder extends
     com.google.protobuf.GeneratedMessage.Builder<Builder> implements
     // @@protoc_insertion_point(builder_implements:FuelData)
     FuelDataProto.FuelDataOrBuilder {
   public static final com.google.protobuf.Descriptors.Descriptor
       getDescriptor() {
     return FuelDataProto.internal_static_FuelData_descriptor;
   }

   protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
       internalGetFieldAccessorTable() {
     return FuelDataProto.internal_static_FuelData_fieldAccessorTable
         .ensureFieldAccessorsInitialized(
             FuelDataProto.FuelData.class, FuelDataProto.FuelData.Builder.class);
   }

   // Construct using FuelDataProto.FuelData.newBuilder()
   private Builder() {
     maybeForceBuilderInitialization();
   }

   private Builder(
       com.google.protobuf.GeneratedMessage.BuilderParent parent) {
     super(parent);
     maybeForceBuilderInitialization();
   }
   private void maybeForceBuilderInitialization() {
     if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
       getHeaderFieldBuilder();
     }
   }
   private static Builder create() {
     return new Builder();
   }

   public Builder clear() {
     super.clear();
     if (headerBuilder_ == null) {
       header_ = EventHeaderProto.EventHeader.getDefaultInstance();
     } else {
       headerBuilder_.clear();
     }
     bitField0_ = (bitField0_ & ~0x00000001);
     reason_ = 0;
     bitField0_ = (bitField0_ & ~0x00000002);
     fuelLevelPercents_ = 0F;
     bitField0_ = (bitField0_ & ~0x00000004);
     totalFuelLiters_ = 0;
     bitField0_ = (bitField0_ & ~0x00000008);
     fuelCapOpen_ = false;
     bitField0_ = (bitField0_ & ~0x00000010);
     minimumFuelLevelPercents_ = 0F;
     bitField0_ = (bitField0_ & ~0x00000020);
     return this;
   }

   public Builder clone() {
     return create().mergeFrom(buildPartial());
   }

   public com.google.protobuf.Descriptors.Descriptor
       getDescriptorForType() {
     return FuelDataProto.internal_static_FuelData_descriptor;
   }

   public FuelDataProto.FuelData getDefaultInstanceForType() {
     return FuelDataProto.FuelData.getDefaultInstance();
   }

   public FuelDataProto.FuelData build() {
     FuelDataProto.FuelData result = buildPartial();
     if (!result.isInitialized()) {
       throw newUninitializedMessageException(result);
     }
     return result;
   }

   public FuelDataProto.FuelData buildPartial() {
     FuelDataProto.FuelData result = new FuelDataProto.FuelData(this);
     int from_bitField0_ = bitField0_;
     int to_bitField0_ = 0;
     if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
       to_bitField0_ |= 0x00000001;
     }
     if (headerBuilder_ == null) {
       result.header_ = header_;
     } else {
       result.header_ = headerBuilder_.build();
     }
     if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
       to_bitField0_ |= 0x00000002;
     }
     result.reason_ = reason_;
     if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
       to_bitField0_ |= 0x00000004;
     }
     result.fuelLevelPercents_ = fuelLevelPercents_;
     if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
       to_bitField0_ |= 0x00000008;
     }
     result.totalFuelLiters_ = totalFuelLiters_;
     if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
       to_bitField0_ |= 0x00000010;
     }
     result.fuelCapOpen_ = fuelCapOpen_;
     if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
       to_bitField0_ |= 0x00000020;
     }
     result.minimumFuelLevelPercents_ = minimumFuelLevelPercents_;
     result.bitField0_ = to_bitField0_;
     onBuilt();
     return result;
   }

   public Builder mergeFrom(com.google.protobuf.Message other) {
     if (other instanceof FuelDataProto.FuelData) {
       return mergeFrom((FuelDataProto.FuelData)other);
     } else {
       super.mergeFrom(other);
       return this;
     }
   }

   public Builder mergeFrom(FuelDataProto.FuelData other) {
     if (other == FuelDataProto.FuelData.getDefaultInstance()) return this;
     if (other.hasHeader()) {
       mergeHeader(other.getHeader());
     }
     if (other.hasReason()) {
       setReason(other.getReason());
     }
     if (other.hasFuelLevelPercents()) {
       setFuelLevelPercents(other.getFuelLevelPercents());
     }
     if (other.hasTotalFuelLiters()) {
       setTotalFuelLiters(other.getTotalFuelLiters());
     }
     if (other.hasFuelCapOpen()) {
       setFuelCapOpen(other.getFuelCapOpen());
     }
     if (other.hasMinimumFuelLevelPercents()) {
       setMinimumFuelLevelPercents(other.getMinimumFuelLevelPercents());
     }
     this.mergeUnknownFields(other.getUnknownFields());
     return this;
   }

   public final boolean isInitialized() {
     if (!hasHeader()) {
       
       return false;
     }
     if (!getHeader().isInitialized()) {
       
       return false;
     }
     return true;
   }

   public Builder mergeFrom(
       com.google.protobuf.CodedInputStream input,
       com.google.protobuf.ExtensionRegistryLite extensionRegistry)
       throws java.io.IOException {
     FuelDataProto.FuelData parsedMessage = null;
     try {
       parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
     } catch (com.google.protobuf.InvalidProtocolBufferException e) {
       parsedMessage = (FuelDataProto.FuelData) e.getUnfinishedMessage();
       throw e;
     } finally {
       if (parsedMessage != null) {
         mergeFrom(parsedMessage);
       }
     }
     return this;
   }
   private int bitField0_;

   private EventHeaderProto.EventHeader header_ = EventHeaderProto.EventHeader.getDefaultInstance();
   private com.google.protobuf.SingleFieldBuilder<
       EventHeaderProto.EventHeader, EventHeaderProto.EventHeader.Builder, EventHeaderProto.EventHeaderOrBuilder> headerBuilder_;
   /**
    * <code>required .EventHeader header = 1;</code>
    */
   public boolean hasHeader() {
     return ((bitField0_ & 0x00000001) == 0x00000001);
   }
   /**
    * <code>required .EventHeader header = 1;</code>
    */
   public EventHeaderProto.EventHeader getHeader() {
     if (headerBuilder_ == null) {
       return header_;
     } else {
       return headerBuilder_.getMessage();
     }
   }
   /**
    * <code>required .EventHeader header = 1;</code>
    */
   public Builder setHeader(EventHeaderProto.EventHeader value) {
     if (headerBuilder_ == null) {
       if (value == null) {
         throw new NullPointerException();
       }
       header_ = value;
       onChanged();
     } else {
       headerBuilder_.setMessage(value);
     }
     bitField0_ |= 0x00000001;
     return this;
   }
   /**
    * <code>required .EventHeader header = 1;</code>
    */
   public Builder setHeader(
       EventHeaderProto.EventHeader.Builder builderForValue) {
     if (headerBuilder_ == null) {
       header_ = builderForValue.build();
       onChanged();
     } else {
       headerBuilder_.setMessage(builderForValue.build());
     }
     bitField0_ |= 0x00000001;
     return this;
   }
   /**
    * <code>required .EventHeader header = 1;</code>
    */
   public Builder mergeHeader(EventHeaderProto.EventHeader value) {
     if (headerBuilder_ == null) {
       if (((bitField0_ & 0x00000001) == 0x00000001) &&
           header_ != EventHeaderProto.EventHeader.getDefaultInstance()) {
         header_ =
           EventHeaderProto.EventHeader.newBuilder(header_).mergeFrom(value).buildPartial();
       } else {
         header_ = value;
       }
       onChanged();
     } else {
       headerBuilder_.mergeFrom(value);
     }
     bitField0_ |= 0x00000001;
     return this;
   }
   /**
    * <code>required .EventHeader header = 1;</code>
    */
   public Builder clearHeader() {
     if (headerBuilder_ == null) {
       header_ = EventHeaderProto.EventHeader.getDefaultInstance();
       onChanged();
     } else {
       headerBuilder_.clear();
     }
     bitField0_ = (bitField0_ & ~0x00000001);
     return this;
   }
   /**
    * <code>required .EventHeader header = 1;</code>
    */
   public EventHeaderProto.EventHeader.Builder getHeaderBuilder() {
     bitField0_ |= 0x00000001;
     onChanged();
     return getHeaderFieldBuilder().getBuilder();
   }
   /**
    * <code>required .EventHeader header = 1;</code>
    */
   public EventHeaderProto.EventHeaderOrBuilder getHeaderOrBuilder() {
     if (headerBuilder_ != null) {
       return headerBuilder_.getMessageOrBuilder();
     } else {
       return header_;
     }
   }
   /**
    * <code>required .EventHeader header = 1;</code>
    */
   private com.google.protobuf.SingleFieldBuilder<
       EventHeaderProto.EventHeader, EventHeaderProto.EventHeader.Builder, EventHeaderProto.EventHeaderOrBuilder> 
       getHeaderFieldBuilder() {
     if (headerBuilder_ == null) {
       headerBuilder_ = new com.google.protobuf.SingleFieldBuilder<
           EventHeaderProto.EventHeader, EventHeaderProto.EventHeader.Builder, EventHeaderProto.EventHeaderOrBuilder>(
               getHeader(),
               getParentForChildren(),
               isClean());
       header_ = null;
     }
     return headerBuilder_;
   }

   private int reason_ ;
   /**
    * <code>optional uint32 reason = 2;</code>
    *
    * <pre>
    * Reason for event
    * </pre>
    */
   public boolean hasReason() {
     return ((bitField0_ & 0x00000002) == 0x00000002);
   }
   /**
    * <code>optional uint32 reason = 2;</code>
    *
    * <pre>
    * Reason for event
    * </pre>
    */
   public int getReason() {
     return reason_;
   }
   /**
    * <code>optional uint32 reason = 2;</code>
    *
    * <pre>
    * Reason for event
    * </pre>
    */
   public Builder setReason(int value) {
     bitField0_ |= 0x00000002;
     reason_ = value;
     onChanged();
     return this;
   }
   /**
    * <code>optional uint32 reason = 2;</code>
    *
    * <pre>
    * Reason for event
    * </pre>
    */
   public Builder clearReason() {
     bitField0_ = (bitField0_ & ~0x00000002);
     reason_ = 0;
     onChanged();
     return this;
   }

   private float fuelLevelPercents_ ;
   /**
    * <code>optional float fuel_level_percents = 3;</code>
    *
    * <pre>
    * Fuel level in percents. 0..100. Precision: 0.1
    * </pre>
    */
   public boolean hasFuelLevelPercents() {
     return ((bitField0_ & 0x00000004) == 0x00000004);
   }
   /**
    * <code>optional float fuel_level_percents = 3;</code>
    *
    * <pre>
    * Fuel level in percents. 0..100. Precision: 0.1
    * </pre>
    */
   public float getFuelLevelPercents() {
     return fuelLevelPercents_;
   }
   /**
    * <code>optional float fuel_level_percents = 3;</code>
    *
    * <pre>
    * Fuel level in percents. 0..100. Precision: 0.1
    * </pre>
    */
   public Builder setFuelLevelPercents(float value) {
     bitField0_ |= 0x00000004;
     fuelLevelPercents_ = value;
     onChanged();
     return this;
   }
   /**
    * <code>optional float fuel_level_percents = 3;</code>
    *
    * <pre>
    * Fuel level in percents. 0..100. Precision: 0.1
    * </pre>
    */
   public Builder clearFuelLevelPercents() {
     bitField0_ = (bitField0_ & ~0x00000004);
     fuelLevelPercents_ = 0F;
     onChanged();
     return this;
   }

   private int totalFuelLiters_ ;
   /**
    * <code>optional int32 total_fuel_liters = 4;</code>
    *
    * <pre>
    * Total fuel volume in liters
    * </pre>
    */
   public boolean hasTotalFuelLiters() {
     return ((bitField0_ & 0x00000008) == 0x00000008);
   }
   /**
    * <code>optional int32 total_fuel_liters = 4;</code>
    *
    * <pre>
    * Total fuel volume in liters
    * </pre>
    */
   public int getTotalFuelLiters() {
     return totalFuelLiters_;
   }
   /**
    * <code>optional int32 total_fuel_liters = 4;</code>
    *
    * <pre>
    * Total fuel volume in liters
    * </pre>
    */
   public Builder setTotalFuelLiters(int value) {
     bitField0_ |= 0x00000008;
     totalFuelLiters_ = value;
     onChanged();
     return this;
   }
   /**
    * <code>optional int32 total_fuel_liters = 4;</code>
    *
    * <pre>
    * Total fuel volume in liters
    * </pre>
    */
   public Builder clearTotalFuelLiters() {
     bitField0_ = (bitField0_ & ~0x00000008);
     totalFuelLiters_ = 0;
     onChanged();
     return this;
   }

   private boolean fuelCapOpen_ ;
   /**
    * <code>optional bool fuel_cap_open = 5;</code>
    *
    * <pre>
    * Indicates whether fuel cap is open. 0 - fuel cap closed; 1 - fuel cap open
    * </pre>
    */
   public boolean hasFuelCapOpen() {
     return ((bitField0_ & 0x00000010) == 0x00000010);
   }
   /**
    * <code>optional bool fuel_cap_open = 5;</code>
    *
    * <pre>
    * Indicates whether fuel cap is open. 0 - fuel cap closed; 1 - fuel cap open
    * </pre>
    */
   public boolean getFuelCapOpen() {
     return fuelCapOpen_;
   }
   /**
    * <code>optional bool fuel_cap_open = 5;</code>
    *
    * <pre>
    * Indicates whether fuel cap is open. 0 - fuel cap closed; 1 - fuel cap open
    * </pre>
    */
   public Builder setFuelCapOpen(boolean value) {
     bitField0_ |= 0x00000010;
     fuelCapOpen_ = value;
     onChanged();
     return this;
   }
   /**
    * <code>optional bool fuel_cap_open = 5;</code>
    *
    * <pre>
    * Indicates whether fuel cap is open. 0 - fuel cap closed; 1 - fuel cap open
    * </pre>
    */
   public Builder clearFuelCapOpen() {
     bitField0_ = (bitField0_ & ~0x00000010);
     fuelCapOpen_ = false;
     onChanged();
     return this;
   }

   private float minimumFuelLevelPercents_ ;
   /**
    * <code>optional float minimum_fuel_level_percents = 6;</code>
    *
    * <pre>
    * Percentage of the minimum fuel level. (0..100). Precision: 0.1
    * </pre>
    */
   public boolean hasMinimumFuelLevelPercents() {
     return ((bitField0_ & 0x00000020) == 0x00000020);
   }
   /**
    * <code>optional float minimum_fuel_level_percents = 6;</code>
    *
    * <pre>
    * Percentage of the minimum fuel level. (0..100). Precision: 0.1
    * </pre>
    */
   public float getMinimumFuelLevelPercents() {
     return minimumFuelLevelPercents_;
   }
   /**
    * <code>optional float minimum_fuel_level_percents = 6;</code>
    *
    * <pre>
    * Percentage of the minimum fuel level. (0..100). Precision: 0.1
    * </pre>
    */
   public Builder setMinimumFuelLevelPercents(float value) {
     bitField0_ |= 0x00000020;
     minimumFuelLevelPercents_ = value;
     onChanged();
     return this;
   }
   /**
    * <code>optional float minimum_fuel_level_percents = 6;</code>
    *
    * <pre>
    * Percentage of the minimum fuel level. (0..100). Precision: 0.1
    * </pre>
    */
   public Builder clearMinimumFuelLevelPercents() {
     bitField0_ = (bitField0_ & ~0x00000020);
     minimumFuelLevelPercents_ = 0F;
     onChanged();
     return this;
   }

   // @@protoc_insertion_point(builder_scope:FuelData)
 }

 static {
   defaultInstance = new FuelData(true);
   defaultInstance.initFields();
 }

 // @@protoc_insertion_point(class_scope:FuelData)
}

private static final com.google.protobuf.Descriptors.Descriptor
 internal_static_FuelData_descriptor;
private static
 com.google.protobuf.GeneratedMessage.FieldAccessorTable
   internal_static_FuelData_fieldAccessorTable;

public static com.google.protobuf.Descriptors.FileDescriptor
   getDescriptor() {
 return descriptor;
}
private static com.google.protobuf.Descriptors.FileDescriptor
   descriptor;
static {
 java.lang.String[] descriptorData = {
   "\n\023FuelDataProto.proto\032\026EventHeaderProto." +
   "proto\"\254\001\n\010FuelData\022\034\n\006header\030\001 \002(\0132\014.Eve" +
   "ntHeader\022\016\n\006reason\030\002 \001(\r\022\033\n\023fuel_level_p" +
   "ercents\030\003 \001(\002\022\031\n\021total_fuel_liters\030\004 \001(\005" +
   "\022\025\n\rfuel_cap_open\030\005 \001(\010\022#\n\033minimum_fuel_" +
   "level_percents\030\006 \001(\002"
 };
 com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
     new com.google.protobuf.Descriptors.FileDescriptor.    InternalDescriptorAssigner() {
       public com.google.protobuf.ExtensionRegistry assignDescriptors(
           com.google.protobuf.Descriptors.FileDescriptor root) {
         descriptor = root;
         return null;
       }
     };
 com.google.protobuf.Descriptors.FileDescriptor
   .internalBuildGeneratedFileFrom(descriptorData,
     new com.google.protobuf.Descriptors.FileDescriptor[] {
       EventHeaderProto.getDescriptor(),
     }, assigner);
 internal_static_FuelData_descriptor =
   getDescriptor().getMessageTypes().get(0);
 internal_static_FuelData_fieldAccessorTable = new
   com.google.protobuf.GeneratedMessage.FieldAccessorTable(
     internal_static_FuelData_descriptor,
     new java.lang.String[] { "Header", "Reason", "FuelLevelPercents", "TotalFuelLiters", "FuelCapOpen", "MinimumFuelLevelPercents", });
 EventHeaderProto.getDescriptor();
}

// @@protoc_insertion_point(outer_class_scope)
}
